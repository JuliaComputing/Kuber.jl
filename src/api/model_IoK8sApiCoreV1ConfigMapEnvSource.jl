# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.  The contents of the target ConfigMap&#39;s Data field will represent the key-value pairs as environment variables.

    IoK8sApiCoreV1ConfigMapEnvSource(;
        name=nothing,
        optional=nothing,
    )

    - name::String : Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    - optional::Bool : Specify whether the ConfigMap must be defined
"""
mutable struct IoK8sApiCoreV1ConfigMapEnvSource <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    optional::Any # spec type: Union{ Nothing, Bool } # spec name: optional

    function IoK8sApiCoreV1ConfigMapEnvSource(;name=nothing, optional=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1ConfigMapEnvSource, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(IoK8sApiCoreV1ConfigMapEnvSource, Symbol("optional"), optional)
        setfield!(o, Symbol("optional"), optional)
        o
    end
end # type IoK8sApiCoreV1ConfigMapEnvSource

const _property_map_IoK8sApiCoreV1ConfigMapEnvSource = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("optional")=>Symbol("optional"))
const _property_types_IoK8sApiCoreV1ConfigMapEnvSource = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("optional")=>"Bool")
Base.propertynames(::Type{ IoK8sApiCoreV1ConfigMapEnvSource }) = collect(keys(_property_map_IoK8sApiCoreV1ConfigMapEnvSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1ConfigMapEnvSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ConfigMapEnvSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1ConfigMapEnvSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1ConfigMapEnvSource[property_name]

function check_required(o::IoK8sApiCoreV1ConfigMapEnvSource)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1ConfigMapEnvSource }, name::Symbol, val)
end
