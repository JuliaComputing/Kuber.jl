# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""The pod this Toleration is attached to tolerates any taint that matches the triple &lt;key,value,effect&gt; using the matching operator &lt;operator&gt;.

    IoK8sApiCoreV1Toleration(;
        effect=nothing,
        key=nothing,
        operator=nothing,
        tolerationSeconds=nothing,
        value=nothing,
    )

    - effect::String : Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    - key::String : Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    - operator::String : Operator represents a key&#39;s relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    - tolerationSeconds::Int64 : TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    - value::String : Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
"""
mutable struct IoK8sApiCoreV1Toleration <: SwaggerModel
    effect::Any # spec type: Union{ Nothing, String } # spec name: effect
    key::Any # spec type: Union{ Nothing, String } # spec name: key
    operator::Any # spec type: Union{ Nothing, String } # spec name: operator
    tolerationSeconds::Any # spec type: Union{ Nothing, Int64 } # spec name: tolerationSeconds
    value::Any # spec type: Union{ Nothing, String } # spec name: value

    function IoK8sApiCoreV1Toleration(;effect=nothing, key=nothing, operator=nothing, tolerationSeconds=nothing, value=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1Toleration, Symbol("effect"), effect)
        setfield!(o, Symbol("effect"), effect)
        validate_property(IoK8sApiCoreV1Toleration, Symbol("key"), key)
        setfield!(o, Symbol("key"), key)
        validate_property(IoK8sApiCoreV1Toleration, Symbol("operator"), operator)
        setfield!(o, Symbol("operator"), operator)
        validate_property(IoK8sApiCoreV1Toleration, Symbol("tolerationSeconds"), tolerationSeconds)
        setfield!(o, Symbol("tolerationSeconds"), tolerationSeconds)
        validate_property(IoK8sApiCoreV1Toleration, Symbol("value"), value)
        setfield!(o, Symbol("value"), value)
        o
    end
end # type IoK8sApiCoreV1Toleration

const _property_map_IoK8sApiCoreV1Toleration = Dict{Symbol,Symbol}(Symbol("effect")=>Symbol("effect"), Symbol("key")=>Symbol("key"), Symbol("operator")=>Symbol("operator"), Symbol("tolerationSeconds")=>Symbol("tolerationSeconds"), Symbol("value")=>Symbol("value"))
const _property_types_IoK8sApiCoreV1Toleration = Dict{Symbol,String}(Symbol("effect")=>"String", Symbol("key")=>"String", Symbol("operator")=>"String", Symbol("tolerationSeconds")=>"Int64", Symbol("value")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1Toleration }) = collect(keys(_property_map_IoK8sApiCoreV1Toleration))
Swagger.property_type(::Type{ IoK8sApiCoreV1Toleration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1Toleration[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1Toleration }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1Toleration[property_name]

function check_required(o::IoK8sApiCoreV1Toleration)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1Toleration }, name::Symbol, val)
end
