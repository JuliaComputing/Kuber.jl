# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Represents a vSphere volume resource.

    IoK8sApiCoreV1VsphereVirtualDiskVolumeSource(;
        fsType=nothing,
        storagePolicyID=nothing,
        storagePolicyName=nothing,
        volumePath=nothing,
    )

    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - storagePolicyID::String : Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    - storagePolicyName::String : Storage Policy Based Management (SPBM) profile name.
    - volumePath::String : Path that identifies vSphere volume vmdk
"""
mutable struct IoK8sApiCoreV1VsphereVirtualDiskVolumeSource <: SwaggerModel
    fsType::Any # spec type: Union{ Nothing, String } # spec name: fsType
    storagePolicyID::Any # spec type: Union{ Nothing, String } # spec name: storagePolicyID
    storagePolicyName::Any # spec type: Union{ Nothing, String } # spec name: storagePolicyName
    volumePath::Any # spec type: Union{ Nothing, String } # spec name: volumePath

    function IoK8sApiCoreV1VsphereVirtualDiskVolumeSource(;fsType=nothing, storagePolicyID=nothing, storagePolicyName=nothing, volumePath=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1VsphereVirtualDiskVolumeSource, Symbol("fsType"), fsType)
        setfield!(o, Symbol("fsType"), fsType)
        validate_property(IoK8sApiCoreV1VsphereVirtualDiskVolumeSource, Symbol("storagePolicyID"), storagePolicyID)
        setfield!(o, Symbol("storagePolicyID"), storagePolicyID)
        validate_property(IoK8sApiCoreV1VsphereVirtualDiskVolumeSource, Symbol("storagePolicyName"), storagePolicyName)
        setfield!(o, Symbol("storagePolicyName"), storagePolicyName)
        validate_property(IoK8sApiCoreV1VsphereVirtualDiskVolumeSource, Symbol("volumePath"), volumePath)
        setfield!(o, Symbol("volumePath"), volumePath)
        o
    end
end # type IoK8sApiCoreV1VsphereVirtualDiskVolumeSource

const _property_map_IoK8sApiCoreV1VsphereVirtualDiskVolumeSource = Dict{Symbol,Symbol}(Symbol("fsType")=>Symbol("fsType"), Symbol("storagePolicyID")=>Symbol("storagePolicyID"), Symbol("storagePolicyName")=>Symbol("storagePolicyName"), Symbol("volumePath")=>Symbol("volumePath"))
const _property_types_IoK8sApiCoreV1VsphereVirtualDiskVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("storagePolicyID")=>"String", Symbol("storagePolicyName")=>"String", Symbol("volumePath")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1VsphereVirtualDiskVolumeSource }) = collect(keys(_property_map_IoK8sApiCoreV1VsphereVirtualDiskVolumeSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1VsphereVirtualDiskVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1VsphereVirtualDiskVolumeSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1VsphereVirtualDiskVolumeSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1VsphereVirtualDiskVolumeSource[property_name]

function check_required(o::IoK8sApiCoreV1VsphereVirtualDiskVolumeSource)
    (getproperty(o, Symbol("volumePath")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1VsphereVirtualDiskVolumeSource }, name::Symbol, val)
end
