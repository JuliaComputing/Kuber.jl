# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ResourceQuotaSpec defines the desired hard limits to enforce for Quota.

    IoK8sApiCoreV1ResourceQuotaSpec(;
        hard=nothing,
        scopeSelector=nothing,
        scopes=nothing,
    )

    - hard::Dict{String, IoK8sApimachineryPkgApiResourceQuantity} : hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    - scopeSelector::IoK8sApiCoreV1ScopeSelector : scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
    - scopes::Vector{String} : A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
"""
mutable struct IoK8sApiCoreV1ResourceQuotaSpec <: SwaggerModel
    hard::Any # spec type: Union{ Nothing, Dict{String, IoK8sApimachineryPkgApiResourceQuantity} } # spec name: hard
    scopeSelector::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ScopeSelector } # spec name: scopeSelector
    scopes::Any # spec type: Union{ Nothing, Vector{String} } # spec name: scopes

    function IoK8sApiCoreV1ResourceQuotaSpec(;hard=nothing, scopeSelector=nothing, scopes=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1ResourceQuotaSpec, Symbol("hard"), hard)
        setfield!(o, Symbol("hard"), hard)
        validate_property(IoK8sApiCoreV1ResourceQuotaSpec, Symbol("scopeSelector"), scopeSelector)
        setfield!(o, Symbol("scopeSelector"), scopeSelector)
        validate_property(IoK8sApiCoreV1ResourceQuotaSpec, Symbol("scopes"), scopes)
        setfield!(o, Symbol("scopes"), scopes)
        o
    end
end # type IoK8sApiCoreV1ResourceQuotaSpec

const _property_map_IoK8sApiCoreV1ResourceQuotaSpec = Dict{Symbol,Symbol}(Symbol("hard")=>Symbol("hard"), Symbol("scopeSelector")=>Symbol("scopeSelector"), Symbol("scopes")=>Symbol("scopes"))
const _property_types_IoK8sApiCoreV1ResourceQuotaSpec = Dict{Symbol,String}(Symbol("hard")=>"Dict{String, IoK8sApimachineryPkgApiResourceQuantity}", Symbol("scopeSelector")=>"IoK8sApiCoreV1ScopeSelector", Symbol("scopes")=>"Vector{String}")
Base.propertynames(::Type{ IoK8sApiCoreV1ResourceQuotaSpec }) = collect(keys(_property_map_IoK8sApiCoreV1ResourceQuotaSpec))
Swagger.property_type(::Type{ IoK8sApiCoreV1ResourceQuotaSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ResourceQuotaSpec[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1ResourceQuotaSpec }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1ResourceQuotaSpec[property_name]

function check_required(o::IoK8sApiCoreV1ResourceQuotaSpec)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1ResourceQuotaSpec }, name::Symbol, val)
end
