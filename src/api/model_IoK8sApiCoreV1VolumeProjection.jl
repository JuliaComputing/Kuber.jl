# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Projection that may be projected along with other supported volume types

    IoK8sApiCoreV1VolumeProjection(;
        configMap=nothing,
        downwardAPI=nothing,
        secret=nothing,
        serviceAccountToken=nothing,
    )

    - configMap::IoK8sApiCoreV1ConfigMapProjection : information about the configMap data to project
    - downwardAPI::IoK8sApiCoreV1DownwardAPIProjection : information about the downwardAPI data to project
    - secret::IoK8sApiCoreV1SecretProjection : information about the secret data to project
    - serviceAccountToken::IoK8sApiCoreV1ServiceAccountTokenProjection : information about the serviceAccountToken data to project
"""
mutable struct IoK8sApiCoreV1VolumeProjection <: SwaggerModel
    configMap::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapProjection } # spec name: configMap
    downwardAPI::Any # spec type: Union{ Nothing, IoK8sApiCoreV1DownwardAPIProjection } # spec name: downwardAPI
    secret::Any # spec type: Union{ Nothing, IoK8sApiCoreV1SecretProjection } # spec name: secret
    serviceAccountToken::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ServiceAccountTokenProjection } # spec name: serviceAccountToken

    function IoK8sApiCoreV1VolumeProjection(;configMap=nothing, downwardAPI=nothing, secret=nothing, serviceAccountToken=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("configMap"), configMap)
        setfield!(o, Symbol("configMap"), configMap)
        validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("downwardAPI"), downwardAPI)
        setfield!(o, Symbol("downwardAPI"), downwardAPI)
        validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("secret"), secret)
        setfield!(o, Symbol("secret"), secret)
        validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("serviceAccountToken"), serviceAccountToken)
        setfield!(o, Symbol("serviceAccountToken"), serviceAccountToken)
        o
    end
end # type IoK8sApiCoreV1VolumeProjection

const _property_map_IoK8sApiCoreV1VolumeProjection = Dict{Symbol,Symbol}(Symbol("configMap")=>Symbol("configMap"), Symbol("downwardAPI")=>Symbol("downwardAPI"), Symbol("secret")=>Symbol("secret"), Symbol("serviceAccountToken")=>Symbol("serviceAccountToken"))
const _property_types_IoK8sApiCoreV1VolumeProjection = Dict{Symbol,String}(Symbol("configMap")=>"IoK8sApiCoreV1ConfigMapProjection", Symbol("downwardAPI")=>"IoK8sApiCoreV1DownwardAPIProjection", Symbol("secret")=>"IoK8sApiCoreV1SecretProjection", Symbol("serviceAccountToken")=>"IoK8sApiCoreV1ServiceAccountTokenProjection")
Base.propertynames(::Type{ IoK8sApiCoreV1VolumeProjection }) = collect(keys(_property_map_IoK8sApiCoreV1VolumeProjection))
Swagger.property_type(::Type{ IoK8sApiCoreV1VolumeProjection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1VolumeProjection[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1VolumeProjection }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1VolumeProjection[property_name]

function check_required(o::IoK8sApiCoreV1VolumeProjection)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1VolumeProjection }, name::Symbol, val)
end
