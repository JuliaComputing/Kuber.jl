# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface

    IoK8sApiAuthorizationV1ResourceAttributes(;
        group=nothing,
        name=nothing,
        namespace=nothing,
        resource=nothing,
        subresource=nothing,
        verb=nothing,
        version=nothing,
    )

    - group::String : Group is the API Group of the Resource.  \&quot;*\&quot; means all.
    - name::String : Name is the name of the resource being requested for a \&quot;get\&quot; or deleted for a \&quot;delete\&quot;. \&quot;\&quot; (empty) means all.
    - namespace::String : Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \&quot;\&quot; (empty) is defaulted for LocalSubjectAccessReviews \&quot;\&quot; (empty) is empty for cluster-scoped resources \&quot;\&quot; (empty) means \&quot;all\&quot; for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    - resource::String : Resource is one of the existing resource types.  \&quot;*\&quot; means all.
    - subresource::String : Subresource is one of the existing resource types.  \&quot;\&quot; means none.
    - verb::String : Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \&quot;*\&quot; means all.
    - version::String : Version is the API Version of the Resource.  \&quot;*\&quot; means all.
"""
mutable struct IoK8sApiAuthorizationV1ResourceAttributes <: SwaggerModel
    group::Any # spec type: Union{ Nothing, String } # spec name: group
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    namespace::Any # spec type: Union{ Nothing, String } # spec name: namespace
    resource::Any # spec type: Union{ Nothing, String } # spec name: resource
    subresource::Any # spec type: Union{ Nothing, String } # spec name: subresource
    verb::Any # spec type: Union{ Nothing, String } # spec name: verb
    version::Any # spec type: Union{ Nothing, String } # spec name: version

    function IoK8sApiAuthorizationV1ResourceAttributes(;group=nothing, name=nothing, namespace=nothing, resource=nothing, subresource=nothing, verb=nothing, version=nothing)
        o = new()
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("group"), group)
        setfield!(o, Symbol("group"), group)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("namespace"), namespace)
        setfield!(o, Symbol("namespace"), namespace)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("resource"), resource)
        setfield!(o, Symbol("resource"), resource)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("subresource"), subresource)
        setfield!(o, Symbol("subresource"), subresource)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("verb"), verb)
        setfield!(o, Symbol("verb"), verb)
        validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("version"), version)
        setfield!(o, Symbol("version"), version)
        o
    end
end # type IoK8sApiAuthorizationV1ResourceAttributes

const _property_map_IoK8sApiAuthorizationV1ResourceAttributes = Dict{Symbol,Symbol}(Symbol("group")=>Symbol("group"), Symbol("name")=>Symbol("name"), Symbol("namespace")=>Symbol("namespace"), Symbol("resource")=>Symbol("resource"), Symbol("subresource")=>Symbol("subresource"), Symbol("verb")=>Symbol("verb"), Symbol("version")=>Symbol("version"))
const _property_types_IoK8sApiAuthorizationV1ResourceAttributes = Dict{Symbol,String}(Symbol("group")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", Symbol("resource")=>"String", Symbol("subresource")=>"String", Symbol("verb")=>"String", Symbol("version")=>"String")
Base.propertynames(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }) = collect(keys(_property_map_IoK8sApiAuthorizationV1ResourceAttributes))
Swagger.property_type(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthorizationV1ResourceAttributes[name]))}
Swagger.field_name(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }, property_name::Symbol) =  _property_map_IoK8sApiAuthorizationV1ResourceAttributes[property_name]

function check_required(o::IoK8sApiAuthorizationV1ResourceAttributes)
    true
end

function validate_property(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }, name::Symbol, val)
end
