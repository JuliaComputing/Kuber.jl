# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.

    IoK8sApiCoreV1Secret(;
        apiVersion=nothing,
        data=nothing,
        kind=nothing,
        metadata=nothing,
        stringData=nothing,
        type=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - data::Dict{String, Vector{UInt8}} : Data contains the secret data. Each key must consist of alphanumeric characters, &#39;-&#39;, &#39;_&#39; or &#39;.&#39;. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta : Standard object&#39;s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    - stringData::Dict{String, String} : stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
    - type::String : Used to facilitate programmatic handling of secret data.
"""
mutable struct IoK8sApiCoreV1Secret <: SwaggerModel
    apiVersion::Any # spec type: Union{ Nothing, String } # spec name: apiVersion
    data::Any # spec type: Union{ Nothing, Dict{String, Vector{UInt8}} } # spec name: data
    kind::Any # spec type: Union{ Nothing, String } # spec name: kind
    metadata::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta } # spec name: metadata
    stringData::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: stringData
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function IoK8sApiCoreV1Secret(;apiVersion=nothing, data=nothing, kind=nothing, metadata=nothing, stringData=nothing, type=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1Secret, Symbol("apiVersion"), apiVersion)
        setfield!(o, Symbol("apiVersion"), apiVersion)
        validate_property(IoK8sApiCoreV1Secret, Symbol("data"), data)
        setfield!(o, Symbol("data"), data)
        validate_property(IoK8sApiCoreV1Secret, Symbol("kind"), kind)
        setfield!(o, Symbol("kind"), kind)
        validate_property(IoK8sApiCoreV1Secret, Symbol("metadata"), metadata)
        setfield!(o, Symbol("metadata"), metadata)
        validate_property(IoK8sApiCoreV1Secret, Symbol("stringData"), stringData)
        setfield!(o, Symbol("stringData"), stringData)
        validate_property(IoK8sApiCoreV1Secret, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type IoK8sApiCoreV1Secret

const _property_map_IoK8sApiCoreV1Secret = Dict{Symbol,Symbol}(Symbol("apiVersion")=>Symbol("apiVersion"), Symbol("data")=>Symbol("data"), Symbol("kind")=>Symbol("kind"), Symbol("metadata")=>Symbol("metadata"), Symbol("stringData")=>Symbol("stringData"), Symbol("type")=>Symbol("type"))
const _property_types_IoK8sApiCoreV1Secret = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("data")=>"Dict{String, Vector{UInt8}}", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("stringData")=>"Dict{String, String}", Symbol("type")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1Secret }) = collect(keys(_property_map_IoK8sApiCoreV1Secret))
Swagger.property_type(::Type{ IoK8sApiCoreV1Secret }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1Secret[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1Secret }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1Secret[property_name]

function check_required(o::IoK8sApiCoreV1Secret)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1Secret }, name::Symbol, val)
end
