# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Affinity is a group of affinity scheduling rules.

    IoK8sApiCoreV1Affinity(;
        nodeAffinity=nothing,
        podAffinity=nothing,
        podAntiAffinity=nothing,
    )

    - nodeAffinity::IoK8sApiCoreV1NodeAffinity : Describes node affinity scheduling rules for the pod.
    - podAffinity::IoK8sApiCoreV1PodAffinity : Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    - podAntiAffinity::IoK8sApiCoreV1PodAntiAffinity : Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
"""
mutable struct IoK8sApiCoreV1Affinity <: SwaggerModel
    nodeAffinity::Any # spec type: Union{ Nothing, IoK8sApiCoreV1NodeAffinity } # spec name: nodeAffinity
    podAffinity::Any # spec type: Union{ Nothing, IoK8sApiCoreV1PodAffinity } # spec name: podAffinity
    podAntiAffinity::Any # spec type: Union{ Nothing, IoK8sApiCoreV1PodAntiAffinity } # spec name: podAntiAffinity

    function IoK8sApiCoreV1Affinity(;nodeAffinity=nothing, podAffinity=nothing, podAntiAffinity=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1Affinity, Symbol("nodeAffinity"), nodeAffinity)
        setfield!(o, Symbol("nodeAffinity"), nodeAffinity)
        validate_property(IoK8sApiCoreV1Affinity, Symbol("podAffinity"), podAffinity)
        setfield!(o, Symbol("podAffinity"), podAffinity)
        validate_property(IoK8sApiCoreV1Affinity, Symbol("podAntiAffinity"), podAntiAffinity)
        setfield!(o, Symbol("podAntiAffinity"), podAntiAffinity)
        o
    end
end # type IoK8sApiCoreV1Affinity

const _property_map_IoK8sApiCoreV1Affinity = Dict{Symbol,Symbol}(Symbol("nodeAffinity")=>Symbol("nodeAffinity"), Symbol("podAffinity")=>Symbol("podAffinity"), Symbol("podAntiAffinity")=>Symbol("podAntiAffinity"))
const _property_types_IoK8sApiCoreV1Affinity = Dict{Symbol,String}(Symbol("nodeAffinity")=>"IoK8sApiCoreV1NodeAffinity", Symbol("podAffinity")=>"IoK8sApiCoreV1PodAffinity", Symbol("podAntiAffinity")=>"IoK8sApiCoreV1PodAntiAffinity")
Base.propertynames(::Type{ IoK8sApiCoreV1Affinity }) = collect(keys(_property_map_IoK8sApiCoreV1Affinity))
Swagger.property_type(::Type{ IoK8sApiCoreV1Affinity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1Affinity[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1Affinity }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1Affinity[property_name]

function check_required(o::IoK8sApiCoreV1Affinity)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1Affinity }, name::Symbol, val)
end
