# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""DeploymentStatus is the most recently observed status of the Deployment.

    IoK8sApiAppsV1beta1DeploymentStatus(;
        availableReplicas=nothing,
        collisionCount=nothing,
        conditions=nothing,
        observedGeneration=nothing,
        readyReplicas=nothing,
        replicas=nothing,
        unavailableReplicas=nothing,
        updatedReplicas=nothing,
    )

    - availableReplicas::Int32 : Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    - collisionCount::Int32 : Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    - conditions::Vector{IoK8sApiAppsV1beta1DeploymentCondition} : Represents the latest available observations of a deployment&#39;s current state.
    - observedGeneration::Int64 : The generation observed by the deployment controller.
    - readyReplicas::Int32 : Total number of ready pods targeted by this deployment.
    - replicas::Int32 : Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    - unavailableReplicas::Int32 : Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    - updatedReplicas::Int32 : Total number of non-terminated pods targeted by this deployment that have the desired template spec.
"""
mutable struct IoK8sApiAppsV1beta1DeploymentStatus <: SwaggerModel
    availableReplicas::Any # spec type: Union{ Nothing, Int32 } # spec name: availableReplicas
    collisionCount::Any # spec type: Union{ Nothing, Int32 } # spec name: collisionCount
    conditions::Any # spec type: Union{ Nothing, Vector{IoK8sApiAppsV1beta1DeploymentCondition} } # spec name: conditions
    observedGeneration::Any # spec type: Union{ Nothing, Int64 } # spec name: observedGeneration
    readyReplicas::Any # spec type: Union{ Nothing, Int32 } # spec name: readyReplicas
    replicas::Any # spec type: Union{ Nothing, Int32 } # spec name: replicas
    unavailableReplicas::Any # spec type: Union{ Nothing, Int32 } # spec name: unavailableReplicas
    updatedReplicas::Any # spec type: Union{ Nothing, Int32 } # spec name: updatedReplicas

    function IoK8sApiAppsV1beta1DeploymentStatus(;availableReplicas=nothing, collisionCount=nothing, conditions=nothing, observedGeneration=nothing, readyReplicas=nothing, replicas=nothing, unavailableReplicas=nothing, updatedReplicas=nothing)
        o = new()
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("availableReplicas"), availableReplicas)
        setfield!(o, Symbol("availableReplicas"), availableReplicas)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("collisionCount"), collisionCount)
        setfield!(o, Symbol("collisionCount"), collisionCount)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("conditions"), conditions)
        setfield!(o, Symbol("conditions"), conditions)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("observedGeneration"), observedGeneration)
        setfield!(o, Symbol("observedGeneration"), observedGeneration)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("readyReplicas"), readyReplicas)
        setfield!(o, Symbol("readyReplicas"), readyReplicas)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("replicas"), replicas)
        setfield!(o, Symbol("replicas"), replicas)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("unavailableReplicas"), unavailableReplicas)
        setfield!(o, Symbol("unavailableReplicas"), unavailableReplicas)
        validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("updatedReplicas"), updatedReplicas)
        setfield!(o, Symbol("updatedReplicas"), updatedReplicas)
        o
    end
end # type IoK8sApiAppsV1beta1DeploymentStatus

const _property_map_IoK8sApiAppsV1beta1DeploymentStatus = Dict{Symbol,Symbol}(Symbol("availableReplicas")=>Symbol("availableReplicas"), Symbol("collisionCount")=>Symbol("collisionCount"), Symbol("conditions")=>Symbol("conditions"), Symbol("observedGeneration")=>Symbol("observedGeneration"), Symbol("readyReplicas")=>Symbol("readyReplicas"), Symbol("replicas")=>Symbol("replicas"), Symbol("unavailableReplicas")=>Symbol("unavailableReplicas"), Symbol("updatedReplicas")=>Symbol("updatedReplicas"))
const _property_types_IoK8sApiAppsV1beta1DeploymentStatus = Dict{Symbol,String}(Symbol("availableReplicas")=>"Int32", Symbol("collisionCount")=>"Int32", Symbol("conditions")=>"Vector{IoK8sApiAppsV1beta1DeploymentCondition}", Symbol("observedGeneration")=>"Int64", Symbol("readyReplicas")=>"Int32", Symbol("replicas")=>"Int32", Symbol("unavailableReplicas")=>"Int32", Symbol("updatedReplicas")=>"Int32")
Base.propertynames(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }) = collect(keys(_property_map_IoK8sApiAppsV1beta1DeploymentStatus))
Swagger.property_type(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAppsV1beta1DeploymentStatus[name]))}
Swagger.field_name(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }, property_name::Symbol) =  _property_map_IoK8sApiAppsV1beta1DeploymentStatus[property_name]

function check_required(o::IoK8sApiAppsV1beta1DeploymentStatus)
    true
end

function validate_property(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }, name::Symbol, val)
end
