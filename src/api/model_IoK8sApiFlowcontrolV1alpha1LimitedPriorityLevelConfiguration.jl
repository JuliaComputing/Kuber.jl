# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  * How are requests for this priority level limited?  * What should be done with requests that exceed the limit?

    IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(;
        assuredConcurrencyShares=nothing,
        limitResponse=nothing,
    )

    - assuredConcurrencyShares::Int32 : &#x60;assuredConcurrencyShares&#x60; (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server&#39;s concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) &#x3D; ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
    - limitResponse::IoK8sApiFlowcontrolV1alpha1LimitResponse : &#x60;limitResponse&#x60; indicates what to do with requests that can not be executed right now
"""
mutable struct IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration <: SwaggerModel
    assuredConcurrencyShares::Any # spec type: Union{ Nothing, Int32 } # spec name: assuredConcurrencyShares
    limitResponse::Any # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1LimitResponse } # spec name: limitResponse

    function IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(;assuredConcurrencyShares=nothing, limitResponse=nothing)
        o = new()
        validate_property(IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration, Symbol("assuredConcurrencyShares"), assuredConcurrencyShares)
        setfield!(o, Symbol("assuredConcurrencyShares"), assuredConcurrencyShares)
        validate_property(IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration, Symbol("limitResponse"), limitResponse)
        setfield!(o, Symbol("limitResponse"), limitResponse)
        o
    end
end # type IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration

const _property_map_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration = Dict{Symbol,Symbol}(Symbol("assuredConcurrencyShares")=>Symbol("assuredConcurrencyShares"), Symbol("limitResponse")=>Symbol("limitResponse"))
const _property_types_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration = Dict{Symbol,String}(Symbol("assuredConcurrencyShares")=>"Int32", Symbol("limitResponse")=>"IoK8sApiFlowcontrolV1alpha1LimitResponse")
Base.propertynames(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }) = collect(keys(_property_map_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration))
Swagger.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration[name]))}
Swagger.field_name(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }, property_name::Symbol) =  _property_map_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration[property_name]

function check_required(o::IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration)
    true
end

function validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }, name::Symbol, val)
end
