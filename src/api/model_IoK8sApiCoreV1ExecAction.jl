# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ExecAction describes a \&quot;run in container\&quot; action.

    IoK8sApiCoreV1ExecAction(;
        command=nothing,
    )

    - command::Vector{String} : Command is the command line to execute inside the container, the working directory for the command  is root (&#39;/&#39;) in the container&#39;s filesystem. The command is simply exec&#39;d, it is not run inside a shell, so traditional shell instructions (&#39;|&#39;, etc) won&#39;t work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
"""
mutable struct IoK8sApiCoreV1ExecAction <: SwaggerModel
    command::Any # spec type: Union{ Nothing, Vector{String} } # spec name: command

    function IoK8sApiCoreV1ExecAction(;command=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1ExecAction, Symbol("command"), command)
        setfield!(o, Symbol("command"), command)
        o
    end
end # type IoK8sApiCoreV1ExecAction

const _property_map_IoK8sApiCoreV1ExecAction = Dict{Symbol,Symbol}(Symbol("command")=>Symbol("command"))
const _property_types_IoK8sApiCoreV1ExecAction = Dict{Symbol,String}(Symbol("command")=>"Vector{String}")
Base.propertynames(::Type{ IoK8sApiCoreV1ExecAction }) = collect(keys(_property_map_IoK8sApiCoreV1ExecAction))
Swagger.property_type(::Type{ IoK8sApiCoreV1ExecAction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ExecAction[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1ExecAction }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1ExecAction[property_name]

function check_required(o::IoK8sApiCoreV1ExecAction)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1ExecAction }, name::Symbol, val)
end
