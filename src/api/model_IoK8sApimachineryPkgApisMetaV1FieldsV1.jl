# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.  Each key is either a &#39;.&#39; representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: &#39;f:&lt;name&gt;&#39;, where &lt;name&gt; is the name of a field in a struct, or key in a map &#39;v:&lt;value&gt;&#39;, where &lt;value&gt; is the exact json formatted value of a list item &#39;i:&lt;index&gt;&#39;, where &lt;index&gt; is position of a item in a list &#39;k:&lt;keys&gt;&#39;, where &lt;keys&gt; is a map of  a list item&#39;s key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff

    IoK8sApimachineryPkgApisMetaV1FieldsV1(;
    )

"""
mutable struct IoK8sApimachineryPkgApisMetaV1FieldsV1 <: SwaggerModel

    function IoK8sApimachineryPkgApisMetaV1FieldsV1(;)
        o = new()
        o
    end
end # type IoK8sApimachineryPkgApisMetaV1FieldsV1

const _property_map_IoK8sApimachineryPkgApisMetaV1FieldsV1 = Dict{Symbol,Symbol}()
const _property_types_IoK8sApimachineryPkgApisMetaV1FieldsV1 = Dict{Symbol,String}()
Base.propertynames(::Type{ IoK8sApimachineryPkgApisMetaV1FieldsV1 }) = collect(keys(_property_map_IoK8sApimachineryPkgApisMetaV1FieldsV1))
Swagger.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1FieldsV1 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1FieldsV1[name]))}
Swagger.field_name(::Type{ IoK8sApimachineryPkgApisMetaV1FieldsV1 }, property_name::Symbol) =  _property_map_IoK8sApimachineryPkgApisMetaV1FieldsV1[property_name]

function check_required(o::IoK8sApimachineryPkgApisMetaV1FieldsV1)
    true
end

function validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1FieldsV1 }, name::Symbol, val)
end
