# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Represents a source location of a volume to mount, managed by an external CSI driver

    IoK8sApiCoreV1CSIVolumeSource(;
        driver=nothing,
        fsType=nothing,
        nodePublishSecretRef=nothing,
        readOnly=nothing,
        volumeAttributes=nothing,
    )

    - driver::String : Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    - fsType::String : Filesystem type to mount. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    - nodePublishSecretRef::IoK8sApiCoreV1LocalObjectReference : NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
    - readOnly::Bool : Specifies a read-only configuration for the volume. Defaults to false (read/write).
    - volumeAttributes::Dict{String, String} : VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver&#39;s documentation for supported values.
"""
mutable struct IoK8sApiCoreV1CSIVolumeSource <: SwaggerModel
    driver::Any # spec type: Union{ Nothing, String } # spec name: driver
    fsType::Any # spec type: Union{ Nothing, String } # spec name: fsType
    nodePublishSecretRef::Any # spec type: Union{ Nothing, IoK8sApiCoreV1LocalObjectReference } # spec name: nodePublishSecretRef
    readOnly::Any # spec type: Union{ Nothing, Bool } # spec name: readOnly
    volumeAttributes::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: volumeAttributes

    function IoK8sApiCoreV1CSIVolumeSource(;driver=nothing, fsType=nothing, nodePublishSecretRef=nothing, readOnly=nothing, volumeAttributes=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1CSIVolumeSource, Symbol("driver"), driver)
        setfield!(o, Symbol("driver"), driver)
        validate_property(IoK8sApiCoreV1CSIVolumeSource, Symbol("fsType"), fsType)
        setfield!(o, Symbol("fsType"), fsType)
        validate_property(IoK8sApiCoreV1CSIVolumeSource, Symbol("nodePublishSecretRef"), nodePublishSecretRef)
        setfield!(o, Symbol("nodePublishSecretRef"), nodePublishSecretRef)
        validate_property(IoK8sApiCoreV1CSIVolumeSource, Symbol("readOnly"), readOnly)
        setfield!(o, Symbol("readOnly"), readOnly)
        validate_property(IoK8sApiCoreV1CSIVolumeSource, Symbol("volumeAttributes"), volumeAttributes)
        setfield!(o, Symbol("volumeAttributes"), volumeAttributes)
        o
    end
end # type IoK8sApiCoreV1CSIVolumeSource

const _property_map_IoK8sApiCoreV1CSIVolumeSource = Dict{Symbol,Symbol}(Symbol("driver")=>Symbol("driver"), Symbol("fsType")=>Symbol("fsType"), Symbol("nodePublishSecretRef")=>Symbol("nodePublishSecretRef"), Symbol("readOnly")=>Symbol("readOnly"), Symbol("volumeAttributes")=>Symbol("volumeAttributes"))
const _property_types_IoK8sApiCoreV1CSIVolumeSource = Dict{Symbol,String}(Symbol("driver")=>"String", Symbol("fsType")=>"String", Symbol("nodePublishSecretRef")=>"IoK8sApiCoreV1LocalObjectReference", Symbol("readOnly")=>"Bool", Symbol("volumeAttributes")=>"Dict{String, String}")
Base.propertynames(::Type{ IoK8sApiCoreV1CSIVolumeSource }) = collect(keys(_property_map_IoK8sApiCoreV1CSIVolumeSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1CSIVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1CSIVolumeSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1CSIVolumeSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1CSIVolumeSource[property_name]

function check_required(o::IoK8sApiCoreV1CSIVolumeSource)
    (getproperty(o, Symbol("driver")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1CSIVolumeSource }, name::Symbol, val)
end
