# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. Deprecated: use AllowedHostPath from policy API Group instead.

    IoK8sApiExtensionsV1beta1AllowedHostPath(;
        pathPrefix=nothing,
        readOnly=nothing,
    )

    - pathPrefix::String : pathPrefix is the path prefix that the host volume must match. It does not support &#x60;*&#x60;. Trailing slashes are trimmed when validating the path prefix with a host path.  Examples: &#x60;/foo&#x60; would allow &#x60;/foo&#x60;, &#x60;/foo/&#x60; and &#x60;/foo/bar&#x60; &#x60;/foo&#x60; would not allow &#x60;/food&#x60; or &#x60;/etc/foo&#x60;
    - readOnly::Bool : when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
"""
mutable struct IoK8sApiExtensionsV1beta1AllowedHostPath <: SwaggerModel
    pathPrefix::Any # spec type: Union{ Nothing, String } # spec name: pathPrefix
    readOnly::Any # spec type: Union{ Nothing, Bool } # spec name: readOnly

    function IoK8sApiExtensionsV1beta1AllowedHostPath(;pathPrefix=nothing, readOnly=nothing)
        o = new()
        validate_property(IoK8sApiExtensionsV1beta1AllowedHostPath, Symbol("pathPrefix"), pathPrefix)
        setfield!(o, Symbol("pathPrefix"), pathPrefix)
        validate_property(IoK8sApiExtensionsV1beta1AllowedHostPath, Symbol("readOnly"), readOnly)
        setfield!(o, Symbol("readOnly"), readOnly)
        o
    end
end # type IoK8sApiExtensionsV1beta1AllowedHostPath

const _property_map_IoK8sApiExtensionsV1beta1AllowedHostPath = Dict{Symbol,Symbol}(Symbol("pathPrefix")=>Symbol("pathPrefix"), Symbol("readOnly")=>Symbol("readOnly"))
const _property_types_IoK8sApiExtensionsV1beta1AllowedHostPath = Dict{Symbol,String}(Symbol("pathPrefix")=>"String", Symbol("readOnly")=>"Bool")
Base.propertynames(::Type{ IoK8sApiExtensionsV1beta1AllowedHostPath }) = collect(keys(_property_map_IoK8sApiExtensionsV1beta1AllowedHostPath))
Swagger.property_type(::Type{ IoK8sApiExtensionsV1beta1AllowedHostPath }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiExtensionsV1beta1AllowedHostPath[name]))}
Swagger.field_name(::Type{ IoK8sApiExtensionsV1beta1AllowedHostPath }, property_name::Symbol) =  _property_map_IoK8sApiExtensionsV1beta1AllowedHostPath[property_name]

function check_required(o::IoK8sApiExtensionsV1beta1AllowedHostPath)
    true
end

function validate_property(::Type{ IoK8sApiExtensionsV1beta1AllowedHostPath }, name::Symbol, val)
end
