# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    IoK8sApiCoreV1TopologySpreadConstraint(;
        labelSelector=nothing,
        maxSkew=nothing,
        topologyKey=nothing,
        whenUnsatisfiable=nothing,
    )

    - labelSelector::IoK8sApimachineryPkgApisMetaV1LabelSelector : LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
    - maxSkew::Int32 : MaxSkew describes the degree to which pods may be unevenly distributed. It&#39;s the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It&#39;s a required field. Default value is 1 and 0 is not allowed.
    - topologyKey::String : TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each &lt;key, value&gt; as a \&quot;bucket\&quot;, and try to put balanced number of pods into each bucket. It&#39;s a required field.
    - whenUnsatisfiable::String : WhenUnsatisfiable indicates how to deal with a pod if it doesn&#39;t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It&#39;s considered as \&quot;Unsatisfiable\&quot; if and only if placing incoming pod on any topology violates \&quot;MaxSkew\&quot;. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won&#39;t make it *more* imbalanced. It&#39;s a required field.
"""
mutable struct IoK8sApiCoreV1TopologySpreadConstraint <: SwaggerModel
    labelSelector::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1LabelSelector } # spec name: labelSelector
    maxSkew::Any # spec type: Union{ Nothing, Int32 } # spec name: maxSkew
    topologyKey::Any # spec type: Union{ Nothing, String } # spec name: topologyKey
    whenUnsatisfiable::Any # spec type: Union{ Nothing, String } # spec name: whenUnsatisfiable

    function IoK8sApiCoreV1TopologySpreadConstraint(;labelSelector=nothing, maxSkew=nothing, topologyKey=nothing, whenUnsatisfiable=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1TopologySpreadConstraint, Symbol("labelSelector"), labelSelector)
        setfield!(o, Symbol("labelSelector"), labelSelector)
        validate_property(IoK8sApiCoreV1TopologySpreadConstraint, Symbol("maxSkew"), maxSkew)
        setfield!(o, Symbol("maxSkew"), maxSkew)
        validate_property(IoK8sApiCoreV1TopologySpreadConstraint, Symbol("topologyKey"), topologyKey)
        setfield!(o, Symbol("topologyKey"), topologyKey)
        validate_property(IoK8sApiCoreV1TopologySpreadConstraint, Symbol("whenUnsatisfiable"), whenUnsatisfiable)
        setfield!(o, Symbol("whenUnsatisfiable"), whenUnsatisfiable)
        o
    end
end # type IoK8sApiCoreV1TopologySpreadConstraint

const _property_map_IoK8sApiCoreV1TopologySpreadConstraint = Dict{Symbol,Symbol}(Symbol("labelSelector")=>Symbol("labelSelector"), Symbol("maxSkew")=>Symbol("maxSkew"), Symbol("topologyKey")=>Symbol("topologyKey"), Symbol("whenUnsatisfiable")=>Symbol("whenUnsatisfiable"))
const _property_types_IoK8sApiCoreV1TopologySpreadConstraint = Dict{Symbol,String}(Symbol("labelSelector")=>"IoK8sApimachineryPkgApisMetaV1LabelSelector", Symbol("maxSkew")=>"Int32", Symbol("topologyKey")=>"String", Symbol("whenUnsatisfiable")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1TopologySpreadConstraint }) = collect(keys(_property_map_IoK8sApiCoreV1TopologySpreadConstraint))
Swagger.property_type(::Type{ IoK8sApiCoreV1TopologySpreadConstraint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1TopologySpreadConstraint[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1TopologySpreadConstraint }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1TopologySpreadConstraint[property_name]

function check_required(o::IoK8sApiCoreV1TopologySpreadConstraint)
    (getproperty(o, Symbol("maxSkew")) === nothing) && (return false)
    (getproperty(o, Symbol("topologyKey")) === nothing) && (return false)
    (getproperty(o, Symbol("whenUnsatisfiable")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1TopologySpreadConstraint }, name::Symbol, val)
end
