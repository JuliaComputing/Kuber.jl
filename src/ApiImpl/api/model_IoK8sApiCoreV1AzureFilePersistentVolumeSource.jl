# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""AzureFile represents an Azure File Service mount on the host and bind mount to the pod.

    IoK8sApiCoreV1AzureFilePersistentVolumeSource(;
        readOnly=nothing,
        secretName=nothing,
        secretNamespace=nothing,
        shareName=nothing,
    )

    - readOnly::Bool : Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - secretName::String : the name of secret that contains Azure Storage Account Name and Key
    - secretNamespace::String : the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
    - shareName::String : Share Name
"""
mutable struct IoK8sApiCoreV1AzureFilePersistentVolumeSource <: SwaggerModel
    readOnly::Any # spec type: Union{ Nothing, Bool } # spec name: readOnly
    secretName::Any # spec type: Union{ Nothing, String } # spec name: secretName
    secretNamespace::Any # spec type: Union{ Nothing, String } # spec name: secretNamespace
    shareName::Any # spec type: Union{ Nothing, String } # spec name: shareName

    function IoK8sApiCoreV1AzureFilePersistentVolumeSource(;readOnly=nothing, secretName=nothing, secretNamespace=nothing, shareName=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1AzureFilePersistentVolumeSource, Symbol("readOnly"), readOnly)
        setfield!(o, Symbol("readOnly"), readOnly)
        validate_property(IoK8sApiCoreV1AzureFilePersistentVolumeSource, Symbol("secretName"), secretName)
        setfield!(o, Symbol("secretName"), secretName)
        validate_property(IoK8sApiCoreV1AzureFilePersistentVolumeSource, Symbol("secretNamespace"), secretNamespace)
        setfield!(o, Symbol("secretNamespace"), secretNamespace)
        validate_property(IoK8sApiCoreV1AzureFilePersistentVolumeSource, Symbol("shareName"), shareName)
        setfield!(o, Symbol("shareName"), shareName)
        o
    end
end # type IoK8sApiCoreV1AzureFilePersistentVolumeSource

const _property_map_IoK8sApiCoreV1AzureFilePersistentVolumeSource = Dict{Symbol,Symbol}(Symbol("readOnly")=>Symbol("readOnly"), Symbol("secretName")=>Symbol("secretName"), Symbol("secretNamespace")=>Symbol("secretNamespace"), Symbol("shareName")=>Symbol("shareName"))
const _property_types_IoK8sApiCoreV1AzureFilePersistentVolumeSource = Dict{Symbol,String}(Symbol("readOnly")=>"Bool", Symbol("secretName")=>"String", Symbol("secretNamespace")=>"String", Symbol("shareName")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1AzureFilePersistentVolumeSource }) = collect(keys(_property_map_IoK8sApiCoreV1AzureFilePersistentVolumeSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1AzureFilePersistentVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1AzureFilePersistentVolumeSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1AzureFilePersistentVolumeSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1AzureFilePersistentVolumeSource[property_name]

function check_required(o::IoK8sApiCoreV1AzureFilePersistentVolumeSource)
    (getproperty(o, Symbol("secretName")) === nothing) && (return false)
    (getproperty(o, Symbol("shareName")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1AzureFilePersistentVolumeSource }, name::Symbol, val)
end
