# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.policy.v1beta1.Eviction
Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/&lt;pod name&gt;/evictions.

    IoK8sApiPolicyV1beta1Eviction(;
        apiVersion=nothing,
        deleteOptions=nothing,
        kind=nothing,
        metadata=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - deleteOptions::IoK8sApimachineryPkgApisMetaV1DeleteOptions
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
"""
Base.@kwdef mutable struct IoK8sApiPolicyV1beta1Eviction <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    deleteOptions = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1DeleteOptions }
    kind::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }

    function IoK8sApiPolicyV1beta1Eviction(apiVersion, deleteOptions, kind, metadata, )
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1Eviction, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1Eviction, Symbol("deleteOptions"), deleteOptions)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1Eviction, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1Eviction, Symbol("metadata"), metadata)
        return new(apiVersion, deleteOptions, kind, metadata, )
    end
end # type IoK8sApiPolicyV1beta1Eviction

const _property_types_IoK8sApiPolicyV1beta1Eviction = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("deleteOptions")=>"IoK8sApimachineryPkgApisMetaV1DeleteOptions", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", )
OpenAPI.property_type(::Type{ IoK8sApiPolicyV1beta1Eviction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiPolicyV1beta1Eviction[name]))}

function check_required(o::IoK8sApiPolicyV1beta1Eviction)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiPolicyV1beta1Eviction }, name::Symbol, val)
end
