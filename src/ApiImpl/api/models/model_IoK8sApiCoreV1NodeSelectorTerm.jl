# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.NodeSelectorTerm
A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    IoK8sApiCoreV1NodeSelectorTerm(;
        matchExpressions=nothing,
        matchFields=nothing,
    )

    - matchExpressions::Vector{IoK8sApiCoreV1NodeSelectorRequirement} : A list of node selector requirements by node&#39;s labels.
    - matchFields::Vector{IoK8sApiCoreV1NodeSelectorRequirement} : A list of node selector requirements by node&#39;s fields.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1NodeSelectorTerm <: OpenAPI.APIModel
    matchExpressions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1NodeSelectorRequirement} }
    matchFields::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1NodeSelectorRequirement} }

    function IoK8sApiCoreV1NodeSelectorTerm(matchExpressions, matchFields, )
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSelectorTerm, Symbol("matchExpressions"), matchExpressions)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSelectorTerm, Symbol("matchFields"), matchFields)
        return new(matchExpressions, matchFields, )
    end
end # type IoK8sApiCoreV1NodeSelectorTerm

const _property_types_IoK8sApiCoreV1NodeSelectorTerm = Dict{Symbol,String}(Symbol("matchExpressions")=>"Vector{IoK8sApiCoreV1NodeSelectorRequirement}", Symbol("matchFields")=>"Vector{IoK8sApiCoreV1NodeSelectorRequirement}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1NodeSelectorTerm }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1NodeSelectorTerm[name]))}

function check_required(o::IoK8sApiCoreV1NodeSelectorTerm)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1NodeSelectorTerm }, name::Symbol, val)
end
