# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.EndpointPort
EndpointPort is a tuple that describes a single port.

    IoK8sApiCoreV1EndpointPort(;
        name=nothing,
        port=nothing,
        protocol=nothing,
    )

    - name::String : The name of this port.  This must match the &#39;name&#39; field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
    - port::Int64 : The port number of the endpoint.
    - protocol::String : The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1EndpointPort <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    port::Union{Nothing, Int64} = nothing
    protocol::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1EndpointPort(name, port, protocol, )
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointPort, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointPort, Symbol("port"), port)
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointPort, Symbol("protocol"), protocol)
        return new(name, port, protocol, )
    end
end # type IoK8sApiCoreV1EndpointPort

const _property_types_IoK8sApiCoreV1EndpointPort = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("port")=>"Int64", Symbol("protocol")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1EndpointPort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1EndpointPort[name]))}

function check_required(o::IoK8sApiCoreV1EndpointPort)
    o.port === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1EndpointPort }, name::Symbol, val)
    if name === Symbol("port")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1EndpointPort", :format, val, "int32")
    end
end
