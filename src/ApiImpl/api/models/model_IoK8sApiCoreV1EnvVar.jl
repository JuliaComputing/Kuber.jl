# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.EnvVar
EnvVar represents an environment variable present in a Container.

    IoK8sApiCoreV1EnvVar(;
        name=nothing,
        value=nothing,
        valueFrom=nothing,
    )

    - name::String : Name of the environment variable. Must be a C_IDENTIFIER.
    - value::String : Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \&quot;\&quot;.
    - valueFrom::IoK8sApiCoreV1EnvVarSource
"""
Base.@kwdef mutable struct IoK8sApiCoreV1EnvVar <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    valueFrom = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1EnvVarSource }

    function IoK8sApiCoreV1EnvVar(name, value, valueFrom, )
        OpenAPI.validate_property(IoK8sApiCoreV1EnvVar, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1EnvVar, Symbol("value"), value)
        OpenAPI.validate_property(IoK8sApiCoreV1EnvVar, Symbol("valueFrom"), valueFrom)
        return new(name, value, valueFrom, )
    end
end # type IoK8sApiCoreV1EnvVar

const _property_types_IoK8sApiCoreV1EnvVar = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("value")=>"String", Symbol("valueFrom")=>"IoK8sApiCoreV1EnvVarSource", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1EnvVar }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1EnvVar[name]))}

function check_required(o::IoK8sApiCoreV1EnvVar)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1EnvVar }, name::Symbol, val)
end
