# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.discovery.v1beta1.EndpointPort
EndpointPort represents a Port used by an EndpointSlice

    IoK8sApiDiscoveryV1beta1EndpointPort(;
        appProtocol=nothing,
        name=nothing,
        port=nothing,
        protocol=nothing,
    )

    - appProtocol::String : The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names. Default is empty string.
    - name::String : The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or &#39;-&#39;. * must start and end with an alphanumeric character. Default is empty string.
    - port::Int64 : The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
    - protocol::String : The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
"""
Base.@kwdef mutable struct IoK8sApiDiscoveryV1beta1EndpointPort <: OpenAPI.APIModel
    appProtocol::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    port::Union{Nothing, Int64} = nothing
    protocol::Union{Nothing, String} = nothing

    function IoK8sApiDiscoveryV1beta1EndpointPort(appProtocol, name, port, protocol, )
        OpenAPI.validate_property(IoK8sApiDiscoveryV1beta1EndpointPort, Symbol("appProtocol"), appProtocol)
        OpenAPI.validate_property(IoK8sApiDiscoveryV1beta1EndpointPort, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiDiscoveryV1beta1EndpointPort, Symbol("port"), port)
        OpenAPI.validate_property(IoK8sApiDiscoveryV1beta1EndpointPort, Symbol("protocol"), protocol)
        return new(appProtocol, name, port, protocol, )
    end
end # type IoK8sApiDiscoveryV1beta1EndpointPort

const _property_types_IoK8sApiDiscoveryV1beta1EndpointPort = Dict{Symbol,String}(Symbol("appProtocol")=>"String", Symbol("name")=>"String", Symbol("port")=>"Int64", Symbol("protocol")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiDiscoveryV1beta1EndpointPort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiDiscoveryV1beta1EndpointPort[name]))}

function check_required(o::IoK8sApiDiscoveryV1beta1EndpointPort)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiDiscoveryV1beta1EndpointPort }, name::Symbol, val)
    if name === Symbol("port")
        OpenAPI.validate_param(name, "IoK8sApiDiscoveryV1beta1EndpointPort", :format, val, "int32")
    end
end
