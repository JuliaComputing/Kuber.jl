# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions
RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.

    IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions(;
        allowedRuntimeClassNames=nothing,
        defaultRuntimeClassName=nothing,
    )

    - allowedRuntimeClassNames::Vector{String} : allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of \&quot;*\&quot; means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
    - defaultRuntimeClassName::String : defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
"""
Base.@kwdef mutable struct IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions <: OpenAPI.APIModel
    allowedRuntimeClassNames::Union{Nothing, Vector{String}} = nothing
    defaultRuntimeClassName::Union{Nothing, String} = nothing

    function IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions(allowedRuntimeClassNames, defaultRuntimeClassName, )
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions, Symbol("allowedRuntimeClassNames"), allowedRuntimeClassNames)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions, Symbol("defaultRuntimeClassName"), defaultRuntimeClassName)
        return new(allowedRuntimeClassNames, defaultRuntimeClassName, )
    end
end # type IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions

const _property_types_IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions = Dict{Symbol,String}(Symbol("allowedRuntimeClassNames")=>"Vector{String}", Symbol("defaultRuntimeClassName")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions[name]))}

function check_required(o::IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions)
    o.allowedRuntimeClassNames === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions }, name::Symbol, val)
end
