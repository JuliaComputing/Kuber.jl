# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PersistentVolumeStatus
PersistentVolumeStatus is the current status of a persistent volume.

    IoK8sApiCoreV1PersistentVolumeStatus(;
        message=nothing,
        phase=nothing,
        reason=nothing,
    )

    - message::String : A human-readable message indicating details about why the volume is in this state.
    - phase::String : Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
    - reason::String : Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PersistentVolumeStatus <: OpenAPI.APIModel
    message::Union{Nothing, String} = nothing
    phase::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1PersistentVolumeStatus(message, phase, reason, )
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeStatus, Symbol("message"), message)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeStatus, Symbol("phase"), phase)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeStatus, Symbol("reason"), reason)
        return new(message, phase, reason, )
    end
end # type IoK8sApiCoreV1PersistentVolumeStatus

const _property_types_IoK8sApiCoreV1PersistentVolumeStatus = Dict{Symbol,String}(Symbol("message")=>"String", Symbol("phase")=>"String", Symbol("reason")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PersistentVolumeStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PersistentVolumeStatus[name]))}

function check_required(o::IoK8sApiCoreV1PersistentVolumeStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PersistentVolumeStatus }, name::Symbol, val)
end
