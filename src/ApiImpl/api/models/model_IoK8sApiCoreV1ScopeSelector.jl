# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ScopeSelector
A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.

    IoK8sApiCoreV1ScopeSelector(;
        matchExpressions=nothing,
    )

    - matchExpressions::Vector{IoK8sApiCoreV1ScopedResourceSelectorRequirement} : A list of scope selector requirements by scope of the resources.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ScopeSelector <: OpenAPI.APIModel
    matchExpressions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1ScopedResourceSelectorRequirement} }

    function IoK8sApiCoreV1ScopeSelector(matchExpressions, )
        OpenAPI.validate_property(IoK8sApiCoreV1ScopeSelector, Symbol("matchExpressions"), matchExpressions)
        return new(matchExpressions, )
    end
end # type IoK8sApiCoreV1ScopeSelector

const _property_types_IoK8sApiCoreV1ScopeSelector = Dict{Symbol,String}(Symbol("matchExpressions")=>"Vector{IoK8sApiCoreV1ScopedResourceSelectorRequirement}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ScopeSelector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ScopeSelector[name]))}

function check_required(o::IoK8sApiCoreV1ScopeSelector)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ScopeSelector }, name::Symbol, val)
end
