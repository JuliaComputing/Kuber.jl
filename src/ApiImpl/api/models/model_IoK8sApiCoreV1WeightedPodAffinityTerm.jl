# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.WeightedPodAffinityTerm
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    IoK8sApiCoreV1WeightedPodAffinityTerm(;
        podAffinityTerm=nothing,
        weight=nothing,
    )

    - podAffinityTerm::IoK8sApiCoreV1PodAffinityTerm
    - weight::Int64 : weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1WeightedPodAffinityTerm <: OpenAPI.APIModel
    podAffinityTerm = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1PodAffinityTerm }
    weight::Union{Nothing, Int64} = nothing

    function IoK8sApiCoreV1WeightedPodAffinityTerm(podAffinityTerm, weight, )
        OpenAPI.validate_property(IoK8sApiCoreV1WeightedPodAffinityTerm, Symbol("podAffinityTerm"), podAffinityTerm)
        OpenAPI.validate_property(IoK8sApiCoreV1WeightedPodAffinityTerm, Symbol("weight"), weight)
        return new(podAffinityTerm, weight, )
    end
end # type IoK8sApiCoreV1WeightedPodAffinityTerm

const _property_types_IoK8sApiCoreV1WeightedPodAffinityTerm = Dict{Symbol,String}(Symbol("podAffinityTerm")=>"IoK8sApiCoreV1PodAffinityTerm", Symbol("weight")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1WeightedPodAffinityTerm }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1WeightedPodAffinityTerm[name]))}

function check_required(o::IoK8sApiCoreV1WeightedPodAffinityTerm)
    o.podAffinityTerm === nothing && (return false)
    o.weight === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1WeightedPodAffinityTerm }, name::Symbol, val)
    if name === Symbol("weight")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1WeightedPodAffinityTerm", :format, val, "int32")
    end
end
