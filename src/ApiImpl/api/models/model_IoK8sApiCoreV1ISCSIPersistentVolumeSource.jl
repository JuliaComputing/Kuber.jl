# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ISCSIPersistentVolumeSource
ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.

    IoK8sApiCoreV1ISCSIPersistentVolumeSource(;
        chapAuthDiscovery=nothing,
        chapAuthSession=nothing,
        fsType=nothing,
        initiatorName=nothing,
        iqn=nothing,
        iscsiInterface=nothing,
        lun=nothing,
        portals=nothing,
        readOnly=nothing,
        secretRef=nothing,
        targetPortal=nothing,
    )

    - chapAuthDiscovery::Bool : whether support iSCSI Discovery CHAP authentication
    - chapAuthSession::Bool : whether support iSCSI Session CHAP authentication
    - fsType::String : Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    - initiatorName::String : Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.
    - iqn::String : Target iSCSI Qualified Name.
    - iscsiInterface::String : iSCSI Interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp).
    - lun::Int64 : iSCSI Target Lun number.
    - portals::Vector{String} : iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    - readOnly::Bool : ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    - secretRef::IoK8sApiCoreV1SecretReference
    - targetPortal::String : iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ISCSIPersistentVolumeSource <: OpenAPI.APIModel
    chapAuthDiscovery::Union{Nothing, Bool} = nothing
    chapAuthSession::Union{Nothing, Bool} = nothing
    fsType::Union{Nothing, String} = nothing
    initiatorName::Union{Nothing, String} = nothing
    iqn::Union{Nothing, String} = nothing
    iscsiInterface::Union{Nothing, String} = nothing
    lun::Union{Nothing, Int64} = nothing
    portals::Union{Nothing, Vector{String}} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }
    targetPortal::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ISCSIPersistentVolumeSource(chapAuthDiscovery, chapAuthSession, fsType, initiatorName, iqn, iscsiInterface, lun, portals, readOnly, secretRef, targetPortal, )
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("chapAuthDiscovery"), chapAuthDiscovery)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("chapAuthSession"), chapAuthSession)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("initiatorName"), initiatorName)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("iqn"), iqn)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("iscsiInterface"), iscsiInterface)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("lun"), lun)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("portals"), portals)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("secretRef"), secretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1ISCSIPersistentVolumeSource, Symbol("targetPortal"), targetPortal)
        return new(chapAuthDiscovery, chapAuthSession, fsType, initiatorName, iqn, iscsiInterface, lun, portals, readOnly, secretRef, targetPortal, )
    end
end # type IoK8sApiCoreV1ISCSIPersistentVolumeSource

const _property_types_IoK8sApiCoreV1ISCSIPersistentVolumeSource = Dict{Symbol,String}(Symbol("chapAuthDiscovery")=>"Bool", Symbol("chapAuthSession")=>"Bool", Symbol("fsType")=>"String", Symbol("initiatorName")=>"String", Symbol("iqn")=>"String", Symbol("iscsiInterface")=>"String", Symbol("lun")=>"Int64", Symbol("portals")=>"Vector{String}", Symbol("readOnly")=>"Bool", Symbol("secretRef")=>"IoK8sApiCoreV1SecretReference", Symbol("targetPortal")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ISCSIPersistentVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ISCSIPersistentVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1ISCSIPersistentVolumeSource)
    o.iqn === nothing && (return false)
    o.lun === nothing && (return false)
    o.targetPortal === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ISCSIPersistentVolumeSource }, name::Symbol, val)
    if name === Symbol("lun")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ISCSIPersistentVolumeSource", :format, val, "int32")
    end
end
