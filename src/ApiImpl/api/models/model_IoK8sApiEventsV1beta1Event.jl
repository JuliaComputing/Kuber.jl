# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.events.v1beta1.Event
Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.

    IoK8sApiEventsV1beta1Event(;
        action=nothing,
        apiVersion=nothing,
        deprecatedCount=nothing,
        deprecatedFirstTimestamp=nothing,
        deprecatedLastTimestamp=nothing,
        deprecatedSource=nothing,
        eventTime=nothing,
        kind=nothing,
        metadata=nothing,
        note=nothing,
        reason=nothing,
        regarding=nothing,
        related=nothing,
        reportingController=nothing,
        reportingInstance=nothing,
        series=nothing,
        type=nothing,
    )

    - action::String : What action was taken/failed regarding to the regarding object.
    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - deprecatedCount::Int64 : Deprecated field assuring backward compatibility with core.v1 Event type
    - deprecatedFirstTimestamp::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - deprecatedLastTimestamp::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - deprecatedSource::IoK8sApiCoreV1EventSource
    - eventTime::ZonedDateTime : MicroTime is version of Time with microsecond level precision.
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - note::String : Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
    - reason::String : Why the action was taken.
    - regarding::IoK8sApiCoreV1ObjectReference
    - related::IoK8sApiCoreV1ObjectReference
    - reportingController::String : Name of the controller that emitted this Event, e.g. &#x60;kubernetes.io/kubelet&#x60;.
    - reportingInstance::String : ID of the controller instance, e.g. &#x60;kubelet-xyzf&#x60;.
    - series::IoK8sApiEventsV1beta1EventSeries
    - type::String : Type of this event (Normal, Warning), new types could be added in the future.
"""
Base.@kwdef mutable struct IoK8sApiEventsV1beta1Event <: OpenAPI.APIModel
    action::Union{Nothing, String} = nothing
    apiVersion::Union{Nothing, String} = nothing
    deprecatedCount::Union{Nothing, Int64} = nothing
    deprecatedFirstTimestamp::Union{Nothing, ZonedDateTime} = nothing
    deprecatedLastTimestamp::Union{Nothing, ZonedDateTime} = nothing
    deprecatedSource = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1EventSource }
    eventTime::Union{Nothing, ZonedDateTime} = nothing
    kind::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    note::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing
    regarding = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ObjectReference }
    related = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ObjectReference }
    reportingController::Union{Nothing, String} = nothing
    reportingInstance::Union{Nothing, String} = nothing
    series = nothing # spec type: Union{ Nothing, IoK8sApiEventsV1beta1EventSeries }
    type::Union{Nothing, String} = nothing

    function IoK8sApiEventsV1beta1Event(action, apiVersion, deprecatedCount, deprecatedFirstTimestamp, deprecatedLastTimestamp, deprecatedSource, eventTime, kind, metadata, note, reason, regarding, related, reportingController, reportingInstance, series, type, )
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("action"), action)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("deprecatedCount"), deprecatedCount)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("deprecatedFirstTimestamp"), deprecatedFirstTimestamp)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("deprecatedLastTimestamp"), deprecatedLastTimestamp)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("deprecatedSource"), deprecatedSource)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("eventTime"), eventTime)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("note"), note)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("reason"), reason)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("regarding"), regarding)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("related"), related)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("reportingController"), reportingController)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("reportingInstance"), reportingInstance)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("series"), series)
        OpenAPI.validate_property(IoK8sApiEventsV1beta1Event, Symbol("type"), type)
        return new(action, apiVersion, deprecatedCount, deprecatedFirstTimestamp, deprecatedLastTimestamp, deprecatedSource, eventTime, kind, metadata, note, reason, regarding, related, reportingController, reportingInstance, series, type, )
    end
end # type IoK8sApiEventsV1beta1Event

const _property_types_IoK8sApiEventsV1beta1Event = Dict{Symbol,String}(Symbol("action")=>"String", Symbol("apiVersion")=>"String", Symbol("deprecatedCount")=>"Int64", Symbol("deprecatedFirstTimestamp")=>"ZonedDateTime", Symbol("deprecatedLastTimestamp")=>"ZonedDateTime", Symbol("deprecatedSource")=>"IoK8sApiCoreV1EventSource", Symbol("eventTime")=>"ZonedDateTime", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("note")=>"String", Symbol("reason")=>"String", Symbol("regarding")=>"IoK8sApiCoreV1ObjectReference", Symbol("related")=>"IoK8sApiCoreV1ObjectReference", Symbol("reportingController")=>"String", Symbol("reportingInstance")=>"String", Symbol("series")=>"IoK8sApiEventsV1beta1EventSeries", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiEventsV1beta1Event }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiEventsV1beta1Event[name]))}

function check_required(o::IoK8sApiEventsV1beta1Event)
    o.eventTime === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiEventsV1beta1Event }, name::Symbol, val)
    if name === Symbol("deprecatedCount")
        OpenAPI.validate_param(name, "IoK8sApiEventsV1beta1Event", :format, val, "int32")
    end
    if name === Symbol("deprecatedFirstTimestamp")
        OpenAPI.validate_param(name, "IoK8sApiEventsV1beta1Event", :format, val, "date-time")
    end
    if name === Symbol("deprecatedLastTimestamp")
        OpenAPI.validate_param(name, "IoK8sApiEventsV1beta1Event", :format, val, "date-time")
    end
    if name === Symbol("eventTime")
        OpenAPI.validate_param(name, "IoK8sApiEventsV1beta1Event", :format, val, "date-time")
    end
end
