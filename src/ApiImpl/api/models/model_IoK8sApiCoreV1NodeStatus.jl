# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.NodeStatus
NodeStatus is information about the current status of a node.

    IoK8sApiCoreV1NodeStatus(;
        addresses=nothing,
        allocatable=nothing,
        capacity=nothing,
        conditions=nothing,
        config=nothing,
        daemonEndpoints=nothing,
        images=nothing,
        nodeInfo=nothing,
        phase=nothing,
        volumesAttached=nothing,
        volumesInUse=nothing,
    )

    - addresses::Vector{IoK8sApiCoreV1NodeAddress} : List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
    - allocatable::Dict{String, String} : Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    - capacity::Dict{String, String} : Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    - conditions::Vector{IoK8sApiCoreV1NodeCondition} : Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    - config::IoK8sApiCoreV1NodeConfigStatus
    - daemonEndpoints::IoK8sApiCoreV1NodeDaemonEndpoints
    - images::Vector{IoK8sApiCoreV1ContainerImage} : List of container images on this node
    - nodeInfo::IoK8sApiCoreV1NodeSystemInfo
    - phase::String : NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    - volumesAttached::Vector{IoK8sApiCoreV1AttachedVolume} : List of volumes that are attached to the node.
    - volumesInUse::Vector{String} : List of attachable volumes in use (mounted) by the node.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1NodeStatus <: OpenAPI.APIModel
    addresses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1NodeAddress} }
    allocatable::Union{Nothing, Dict{String, String}} = nothing
    capacity::Union{Nothing, Dict{String, String}} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1NodeCondition} }
    config = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1NodeConfigStatus }
    daemonEndpoints = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1NodeDaemonEndpoints }
    images::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1ContainerImage} }
    nodeInfo = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1NodeSystemInfo }
    phase::Union{Nothing, String} = nothing
    volumesAttached::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1AttachedVolume} }
    volumesInUse::Union{Nothing, Vector{String}} = nothing

    function IoK8sApiCoreV1NodeStatus(addresses, allocatable, capacity, conditions, config, daemonEndpoints, images, nodeInfo, phase, volumesAttached, volumesInUse, )
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("addresses"), addresses)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("allocatable"), allocatable)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("capacity"), capacity)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("config"), config)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("daemonEndpoints"), daemonEndpoints)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("images"), images)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("nodeInfo"), nodeInfo)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("phase"), phase)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("volumesAttached"), volumesAttached)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeStatus, Symbol("volumesInUse"), volumesInUse)
        return new(addresses, allocatable, capacity, conditions, config, daemonEndpoints, images, nodeInfo, phase, volumesAttached, volumesInUse, )
    end
end # type IoK8sApiCoreV1NodeStatus

const _property_types_IoK8sApiCoreV1NodeStatus = Dict{Symbol,String}(Symbol("addresses")=>"Vector{IoK8sApiCoreV1NodeAddress}", Symbol("allocatable")=>"Dict{String, String}", Symbol("capacity")=>"Dict{String, String}", Symbol("conditions")=>"Vector{IoK8sApiCoreV1NodeCondition}", Symbol("config")=>"IoK8sApiCoreV1NodeConfigStatus", Symbol("daemonEndpoints")=>"IoK8sApiCoreV1NodeDaemonEndpoints", Symbol("images")=>"Vector{IoK8sApiCoreV1ContainerImage}", Symbol("nodeInfo")=>"IoK8sApiCoreV1NodeSystemInfo", Symbol("phase")=>"String", Symbol("volumesAttached")=>"Vector{IoK8sApiCoreV1AttachedVolume}", Symbol("volumesInUse")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1NodeStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1NodeStatus[name]))}

function check_required(o::IoK8sApiCoreV1NodeStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1NodeStatus }, name::Symbol, val)
end
