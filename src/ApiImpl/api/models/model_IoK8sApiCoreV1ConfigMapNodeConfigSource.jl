# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ConfigMapNodeConfigSource
ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.

    IoK8sApiCoreV1ConfigMapNodeConfigSource(;
        kubeletConfigKey=nothing,
        name=nothing,
        namespace=nothing,
        resourceVersion=nothing,
        uid=nothing,
    )

    - kubeletConfigKey::String : KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
    - name::String : Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
    - namespace::String : Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
    - resourceVersion::String : ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    - uid::String : UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ConfigMapNodeConfigSource <: OpenAPI.APIModel
    kubeletConfigKey::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    resourceVersion::Union{Nothing, String} = nothing
    uid::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ConfigMapNodeConfigSource(kubeletConfigKey, name, namespace, resourceVersion, uid, )
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("kubeletConfigKey"), kubeletConfigKey)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("namespace"), namespace)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("resourceVersion"), resourceVersion)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("uid"), uid)
        return new(kubeletConfigKey, name, namespace, resourceVersion, uid, )
    end
end # type IoK8sApiCoreV1ConfigMapNodeConfigSource

const _property_types_IoK8sApiCoreV1ConfigMapNodeConfigSource = Dict{Symbol,String}(Symbol("kubeletConfigKey")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", Symbol("resourceVersion")=>"String", Symbol("uid")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ConfigMapNodeConfigSource[name]))}

function check_required(o::IoK8sApiCoreV1ConfigMapNodeConfigSource)
    o.kubeletConfigKey === nothing && (return false)
    o.name === nothing && (return false)
    o.namespace === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }, name::Symbol, val)
end
