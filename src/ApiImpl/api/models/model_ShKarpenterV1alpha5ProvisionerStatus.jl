# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""sh_karpenter_v1alpha5_Provisioner_status
ProvisionerStatus defines the observed state of Provisioner

    ShKarpenterV1alpha5ProvisionerStatus(;
        conditions=nothing,
        lastScaleTime=nothing,
        resources=nothing,
    )

    - conditions::Vector{ShKarpenterV1alpha5ProvisionerStatusConditionsInner} : Conditions is the set of conditions required for this provisioner to scale its target, and indicates whether or not those conditions are met.
    - lastScaleTime::ZonedDateTime : LastScaleTime is the last time the Provisioner scaled the number of nodes
    - resources::Dict{String, Any} : Resources is the list of resources that have been provisioned.
"""
Base.@kwdef mutable struct ShKarpenterV1alpha5ProvisionerStatus <: OpenAPI.APIModel
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ShKarpenterV1alpha5ProvisionerStatusConditionsInner} }
    lastScaleTime::Union{Nothing, ZonedDateTime} = nothing
    resources::Union{Nothing, Dict{String, Any}} = nothing

    function ShKarpenterV1alpha5ProvisionerStatus(conditions, lastScaleTime, resources, )
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerStatus, Symbol("lastScaleTime"), lastScaleTime)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerStatus, Symbol("resources"), resources)
        return new(conditions, lastScaleTime, resources, )
    end
end # type ShKarpenterV1alpha5ProvisionerStatus

const _property_types_ShKarpenterV1alpha5ProvisionerStatus = Dict{Symbol,String}(Symbol("conditions")=>"Vector{ShKarpenterV1alpha5ProvisionerStatusConditionsInner}", Symbol("lastScaleTime")=>"ZonedDateTime", Symbol("resources")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ ShKarpenterV1alpha5ProvisionerStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerStatus[name]))}

function check_required(o::ShKarpenterV1alpha5ProvisionerStatus)
    true
end

function OpenAPI.validate_property(::Type{ ShKarpenterV1alpha5ProvisionerStatus }, name::Symbol, val)
    if name === Symbol("lastScaleTime")
        OpenAPI.validate_param(name, "ShKarpenterV1alpha5ProvisionerStatus", :format, val, "date-time")
    end
end
