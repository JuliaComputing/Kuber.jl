# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.authentication.v1beta1.UserInfo
UserInfo holds the information about the user needed to implement the user.Info interface.

    IoK8sApiAuthenticationV1beta1UserInfo(;
        extra=nothing,
        groups=nothing,
        uid=nothing,
        username=nothing,
    )

    - extra::Dict{String, Vector{String}} : Any additional information provided by the authenticator.
    - groups::Vector{String} : The names of groups this user is a part of.
    - uid::String : A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    - username::String : The name that uniquely identifies this user among all active users.
"""
Base.@kwdef mutable struct IoK8sApiAuthenticationV1beta1UserInfo <: OpenAPI.APIModel
    extra::Union{Nothing, Dict{String, Vector{String}}} = nothing
    groups::Union{Nothing, Vector{String}} = nothing
    uid::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing

    function IoK8sApiAuthenticationV1beta1UserInfo(extra, groups, uid, username, )
        OpenAPI.validate_property(IoK8sApiAuthenticationV1beta1UserInfo, Symbol("extra"), extra)
        OpenAPI.validate_property(IoK8sApiAuthenticationV1beta1UserInfo, Symbol("groups"), groups)
        OpenAPI.validate_property(IoK8sApiAuthenticationV1beta1UserInfo, Symbol("uid"), uid)
        OpenAPI.validate_property(IoK8sApiAuthenticationV1beta1UserInfo, Symbol("username"), username)
        return new(extra, groups, uid, username, )
    end
end # type IoK8sApiAuthenticationV1beta1UserInfo

const _property_types_IoK8sApiAuthenticationV1beta1UserInfo = Dict{Symbol,String}(Symbol("extra")=>"Dict{String, Vector{String}}", Symbol("groups")=>"Vector{String}", Symbol("uid")=>"String", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiAuthenticationV1beta1UserInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthenticationV1beta1UserInfo[name]))}

function check_required(o::IoK8sApiAuthenticationV1beta1UserInfo)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuthenticationV1beta1UserInfo }, name::Symbol, val)
end
