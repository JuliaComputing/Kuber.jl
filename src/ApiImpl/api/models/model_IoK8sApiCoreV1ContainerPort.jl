# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ContainerPort
ContainerPort represents a network port in a single container.

    IoK8sApiCoreV1ContainerPort(;
        containerPort=nothing,
        hostIP=nothing,
        hostPort=nothing,
        name=nothing,
        protocol=nothing,
    )

    - containerPort::Int64 : Number of port to expose on the pod&#39;s IP address. This must be a valid port number, 0 &lt; x &lt; 65536.
    - hostIP::String : What host IP to bind the external port to.
    - hostPort::Int64 : Number of port to expose on the host. If specified, this must be a valid port number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    - name::String : If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    - protocol::String : Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \&quot;TCP\&quot;.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ContainerPort <: OpenAPI.APIModel
    containerPort::Union{Nothing, Int64} = nothing
    hostIP::Union{Nothing, String} = nothing
    hostPort::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    protocol::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ContainerPort(containerPort, hostIP, hostPort, name, protocol, )
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerPort, Symbol("containerPort"), containerPort)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerPort, Symbol("hostIP"), hostIP)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerPort, Symbol("hostPort"), hostPort)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerPort, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerPort, Symbol("protocol"), protocol)
        return new(containerPort, hostIP, hostPort, name, protocol, )
    end
end # type IoK8sApiCoreV1ContainerPort

const _property_types_IoK8sApiCoreV1ContainerPort = Dict{Symbol,String}(Symbol("containerPort")=>"Int64", Symbol("hostIP")=>"String", Symbol("hostPort")=>"Int64", Symbol("name")=>"String", Symbol("protocol")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ContainerPort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ContainerPort[name]))}

function check_required(o::IoK8sApiCoreV1ContainerPort)
    o.containerPort === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ContainerPort }, name::Symbol, val)
    if name === Symbol("containerPort")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerPort", :format, val, "int32")
    end
    if name === Symbol("hostPort")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerPort", :format, val, "int32")
    end
end
