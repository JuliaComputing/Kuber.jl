# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.apimachinery.pkg.version.Info
Info contains versioning information. how we&#39;ll want to distribute that information.

    IoK8sApimachineryPkgVersionInfo(;
        buildDate=nothing,
        compiler=nothing,
        gitCommit=nothing,
        gitTreeState=nothing,
        gitVersion=nothing,
        goVersion=nothing,
        major=nothing,
        minor=nothing,
        platform=nothing,
    )

    - buildDate::String
    - compiler::String
    - gitCommit::String
    - gitTreeState::String
    - gitVersion::String
    - goVersion::String
    - major::String
    - minor::String
    - platform::String
"""
Base.@kwdef mutable struct IoK8sApimachineryPkgVersionInfo <: OpenAPI.APIModel
    buildDate::Union{Nothing, String} = nothing
    compiler::Union{Nothing, String} = nothing
    gitCommit::Union{Nothing, String} = nothing
    gitTreeState::Union{Nothing, String} = nothing
    gitVersion::Union{Nothing, String} = nothing
    goVersion::Union{Nothing, String} = nothing
    major::Union{Nothing, String} = nothing
    minor::Union{Nothing, String} = nothing
    platform::Union{Nothing, String} = nothing

    function IoK8sApimachineryPkgVersionInfo(buildDate, compiler, gitCommit, gitTreeState, gitVersion, goVersion, major, minor, platform, )
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("buildDate"), buildDate)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("compiler"), compiler)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("gitCommit"), gitCommit)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("gitTreeState"), gitTreeState)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("gitVersion"), gitVersion)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("goVersion"), goVersion)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("major"), major)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("minor"), minor)
        OpenAPI.validate_property(IoK8sApimachineryPkgVersionInfo, Symbol("platform"), platform)
        return new(buildDate, compiler, gitCommit, gitTreeState, gitVersion, goVersion, major, minor, platform, )
    end
end # type IoK8sApimachineryPkgVersionInfo

const _property_types_IoK8sApimachineryPkgVersionInfo = Dict{Symbol,String}(Symbol("buildDate")=>"String", Symbol("compiler")=>"String", Symbol("gitCommit")=>"String", Symbol("gitTreeState")=>"String", Symbol("gitVersion")=>"String", Symbol("goVersion")=>"String", Symbol("major")=>"String", Symbol("minor")=>"String", Symbol("platform")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApimachineryPkgVersionInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgVersionInfo[name]))}

function check_required(o::IoK8sApimachineryPkgVersionInfo)
    o.buildDate === nothing && (return false)
    o.compiler === nothing && (return false)
    o.gitCommit === nothing && (return false)
    o.gitTreeState === nothing && (return false)
    o.gitVersion === nothing && (return false)
    o.goVersion === nothing && (return false)
    o.major === nothing && (return false)
    o.minor === nothing && (return false)
    o.platform === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApimachineryPkgVersionInfo }, name::Symbol, val)
end
