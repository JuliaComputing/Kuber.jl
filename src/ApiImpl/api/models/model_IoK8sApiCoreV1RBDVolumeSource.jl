# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.RBDVolumeSource
Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.

    IoK8sApiCoreV1RBDVolumeSource(;
        fsType=nothing,
        image=nothing,
        keyring=nothing,
        monitors=nothing,
        pool=nothing,
        readOnly=nothing,
        secretRef=nothing,
        user=nothing,
    )

    - fsType::String : Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    - image::String : The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    - keyring::String : Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    - monitors::Vector{String} : A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    - pool::String : The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    - readOnly::Bool : ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    - secretRef::IoK8sApiCoreV1LocalObjectReference
    - user::String : The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
"""
Base.@kwdef mutable struct IoK8sApiCoreV1RBDVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    image::Union{Nothing, String} = nothing
    keyring::Union{Nothing, String} = nothing
    monitors::Union{Nothing, Vector{String}} = nothing
    pool::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1LocalObjectReference }
    user::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1RBDVolumeSource(fsType, image, keyring, monitors, pool, readOnly, secretRef, user, )
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("image"), image)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("keyring"), keyring)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("monitors"), monitors)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("pool"), pool)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("secretRef"), secretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1RBDVolumeSource, Symbol("user"), user)
        return new(fsType, image, keyring, monitors, pool, readOnly, secretRef, user, )
    end
end # type IoK8sApiCoreV1RBDVolumeSource

const _property_types_IoK8sApiCoreV1RBDVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("image")=>"String", Symbol("keyring")=>"String", Symbol("monitors")=>"Vector{String}", Symbol("pool")=>"String", Symbol("readOnly")=>"Bool", Symbol("secretRef")=>"IoK8sApiCoreV1LocalObjectReference", Symbol("user")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1RBDVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1RBDVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1RBDVolumeSource)
    o.image === nothing && (return false)
    o.monitors === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1RBDVolumeSource }, name::Symbol, val)
end
