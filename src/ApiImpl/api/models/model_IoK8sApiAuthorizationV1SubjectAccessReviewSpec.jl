# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.authorization.v1.SubjectAccessReviewSpec
SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set

    IoK8sApiAuthorizationV1SubjectAccessReviewSpec(;
        extra=nothing,
        groups=nothing,
        nonResourceAttributes=nothing,
        resourceAttributes=nothing,
        uid=nothing,
        user=nothing,
    )

    - extra::Dict{String, Vector{String}} : Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    - groups::Vector{String} : Groups is the groups you&#39;re testing for.
    - nonResourceAttributes::IoK8sApiAuthorizationV1NonResourceAttributes
    - resourceAttributes::IoK8sApiAuthorizationV1ResourceAttributes
    - uid::String : UID information about the requesting user.
    - user::String : User is the user you&#39;re testing for. If you specify \&quot;User\&quot; but not \&quot;Groups\&quot;, then is it interpreted as \&quot;What if User were not a member of any groups
"""
Base.@kwdef mutable struct IoK8sApiAuthorizationV1SubjectAccessReviewSpec <: OpenAPI.APIModel
    extra::Union{Nothing, Dict{String, Vector{String}}} = nothing
    groups::Union{Nothing, Vector{String}} = nothing
    nonResourceAttributes = nothing # spec type: Union{ Nothing, IoK8sApiAuthorizationV1NonResourceAttributes }
    resourceAttributes = nothing # spec type: Union{ Nothing, IoK8sApiAuthorizationV1ResourceAttributes }
    uid::Union{Nothing, String} = nothing
    user::Union{Nothing, String} = nothing

    function IoK8sApiAuthorizationV1SubjectAccessReviewSpec(extra, groups, nonResourceAttributes, resourceAttributes, uid, user, )
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("extra"), extra)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("groups"), groups)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("nonResourceAttributes"), nonResourceAttributes)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("resourceAttributes"), resourceAttributes)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("uid"), uid)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewSpec, Symbol("user"), user)
        return new(extra, groups, nonResourceAttributes, resourceAttributes, uid, user, )
    end
end # type IoK8sApiAuthorizationV1SubjectAccessReviewSpec

const _property_types_IoK8sApiAuthorizationV1SubjectAccessReviewSpec = Dict{Symbol,String}(Symbol("extra")=>"Dict{String, Vector{String}}", Symbol("groups")=>"Vector{String}", Symbol("nonResourceAttributes")=>"IoK8sApiAuthorizationV1NonResourceAttributes", Symbol("resourceAttributes")=>"IoK8sApiAuthorizationV1ResourceAttributes", Symbol("uid")=>"String", Symbol("user")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiAuthorizationV1SubjectAccessReviewSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthorizationV1SubjectAccessReviewSpec[name]))}

function check_required(o::IoK8sApiAuthorizationV1SubjectAccessReviewSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuthorizationV1SubjectAccessReviewSpec }, name::Symbol, val)
end
