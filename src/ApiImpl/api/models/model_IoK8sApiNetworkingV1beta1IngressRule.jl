# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.networking.v1beta1.IngressRule
IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.

    IoK8sApiNetworkingV1beta1IngressRule(;
        host=nothing,
        http=nothing,
    )

    - host::String : Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \&quot;host\&quot; part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the    IP in the Spec of the parent Ingress. 2. The &#x60;:&#x60; delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
    - http::IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
"""
Base.@kwdef mutable struct IoK8sApiNetworkingV1beta1IngressRule <: OpenAPI.APIModel
    host::Union{Nothing, String} = nothing
    http = nothing # spec type: Union{ Nothing, IoK8sApiNetworkingV1beta1HTTPIngressRuleValue }

    function IoK8sApiNetworkingV1beta1IngressRule(host, http, )
        OpenAPI.validate_property(IoK8sApiNetworkingV1beta1IngressRule, Symbol("host"), host)
        OpenAPI.validate_property(IoK8sApiNetworkingV1beta1IngressRule, Symbol("http"), http)
        return new(host, http, )
    end
end # type IoK8sApiNetworkingV1beta1IngressRule

const _property_types_IoK8sApiNetworkingV1beta1IngressRule = Dict{Symbol,String}(Symbol("host")=>"String", Symbol("http")=>"IoK8sApiNetworkingV1beta1HTTPIngressRuleValue", )
OpenAPI.property_type(::Type{ IoK8sApiNetworkingV1beta1IngressRule }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiNetworkingV1beta1IngressRule[name]))}

function check_required(o::IoK8sApiNetworkingV1beta1IngressRule)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiNetworkingV1beta1IngressRule }, name::Symbol, val)
end
