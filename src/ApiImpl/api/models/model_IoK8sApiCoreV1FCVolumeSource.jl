# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.FCVolumeSource
Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.

    IoK8sApiCoreV1FCVolumeSource(;
        fsType=nothing,
        lun=nothing,
        readOnly=nothing,
        targetWWNs=nothing,
        wwids=nothing,
    )

    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - lun::Int64 : Optional: FC target lun number
    - readOnly::Bool : Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - targetWWNs::Vector{String} : Optional: FC target worldwide names (WWNs)
    - wwids::Vector{String} : Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1FCVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    lun::Union{Nothing, Int64} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    targetWWNs::Union{Nothing, Vector{String}} = nothing
    wwids::Union{Nothing, Vector{String}} = nothing

    function IoK8sApiCoreV1FCVolumeSource(fsType, lun, readOnly, targetWWNs, wwids, )
        OpenAPI.validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("lun"), lun)
        OpenAPI.validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("targetWWNs"), targetWWNs)
        OpenAPI.validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("wwids"), wwids)
        return new(fsType, lun, readOnly, targetWWNs, wwids, )
    end
end # type IoK8sApiCoreV1FCVolumeSource

const _property_types_IoK8sApiCoreV1FCVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("lun")=>"Int64", Symbol("readOnly")=>"Bool", Symbol("targetWWNs")=>"Vector{String}", Symbol("wwids")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1FCVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1FCVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1FCVolumeSource)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1FCVolumeSource }, name::Symbol, val)
    if name === Symbol("lun")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1FCVolumeSource", :format, val, "int32")
    end
end
