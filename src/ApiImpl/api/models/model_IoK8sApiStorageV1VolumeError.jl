# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.storage.v1.VolumeError
VolumeError captures an error encountered during a volume operation.

    IoK8sApiStorageV1VolumeError(;
        message=nothing,
        time=nothing,
    )

    - message::String : String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
    - time::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
"""
Base.@kwdef mutable struct IoK8sApiStorageV1VolumeError <: OpenAPI.APIModel
    message::Union{Nothing, String} = nothing
    time::Union{Nothing, ZonedDateTime} = nothing

    function IoK8sApiStorageV1VolumeError(message, time, )
        OpenAPI.validate_property(IoK8sApiStorageV1VolumeError, Symbol("message"), message)
        OpenAPI.validate_property(IoK8sApiStorageV1VolumeError, Symbol("time"), time)
        return new(message, time, )
    end
end # type IoK8sApiStorageV1VolumeError

const _property_types_IoK8sApiStorageV1VolumeError = Dict{Symbol,String}(Symbol("message")=>"String", Symbol("time")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ IoK8sApiStorageV1VolumeError }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiStorageV1VolumeError[name]))}

function check_required(o::IoK8sApiStorageV1VolumeError)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiStorageV1VolumeError }, name::Symbol, val)
    if name === Symbol("time")
        OpenAPI.validate_param(name, "IoK8sApiStorageV1VolumeError", :format, val, "date-time")
    end
end
