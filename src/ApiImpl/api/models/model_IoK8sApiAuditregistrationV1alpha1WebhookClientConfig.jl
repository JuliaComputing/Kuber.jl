# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.auditregistration.v1alpha1.WebhookClientConfig
WebhookClientConfig contains the information to make a connection with the webhook

    IoK8sApiAuditregistrationV1alpha1WebhookClientConfig(;
        caBundle=nothing,
        service=nothing,
        url=nothing,
    )

    - caBundle::Vector{UInt8} : &#x60;caBundle&#x60; is a PEM encoded CA bundle which will be used to validate the webhook&#39;s server certificate. If unspecified, system trust roots on the apiserver are used.
    - service::IoK8sApiAuditregistrationV1alpha1ServiceReference
    - url::String : &#x60;url&#x60; gives the location of the webhook, in standard URL form (&#x60;scheme://host:port/path&#x60;). Exactly one of &#x60;url&#x60; or &#x60;service&#x60; must be specified.  The &#x60;host&#x60; should not refer to a service running in the cluster; use the &#x60;service&#x60; field instead. The host might be resolved via external DNS in some apiservers (e.g., &#x60;kube-apiserver&#x60; cannot resolve in-cluster DNS as that would be a layering violation). &#x60;host&#x60; may also be an IP address.  Please note that using &#x60;localhost&#x60; or &#x60;127.0.0.1&#x60; as a &#x60;host&#x60; is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.  The scheme must be \&quot;https\&quot;; the URL must begin with \&quot;https://\&quot;.  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.  Attempting to use a user or basic auth e.g. \&quot;user:password@\&quot; is not allowed. Fragments (\&quot;#...\&quot;) and query parameters (\&quot;?...\&quot;) are not allowed, either.
"""
Base.@kwdef mutable struct IoK8sApiAuditregistrationV1alpha1WebhookClientConfig <: OpenAPI.APIModel
    caBundle::Union{Nothing, Vector{UInt8}} = nothing
    service = nothing # spec type: Union{ Nothing, IoK8sApiAuditregistrationV1alpha1ServiceReference }
    url::Union{Nothing, String} = nothing

    function IoK8sApiAuditregistrationV1alpha1WebhookClientConfig(caBundle, service, url, )
        OpenAPI.validate_property(IoK8sApiAuditregistrationV1alpha1WebhookClientConfig, Symbol("caBundle"), caBundle)
        OpenAPI.validate_property(IoK8sApiAuditregistrationV1alpha1WebhookClientConfig, Symbol("service"), service)
        OpenAPI.validate_property(IoK8sApiAuditregistrationV1alpha1WebhookClientConfig, Symbol("url"), url)
        return new(caBundle, service, url, )
    end
end # type IoK8sApiAuditregistrationV1alpha1WebhookClientConfig

const _property_types_IoK8sApiAuditregistrationV1alpha1WebhookClientConfig = Dict{Symbol,String}(Symbol("caBundle")=>"Vector{UInt8}", Symbol("service")=>"IoK8sApiAuditregistrationV1alpha1ServiceReference", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiAuditregistrationV1alpha1WebhookClientConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuditregistrationV1alpha1WebhookClientConfig[name]))}

function check_required(o::IoK8sApiAuditregistrationV1alpha1WebhookClientConfig)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuditregistrationV1alpha1WebhookClientConfig }, name::Symbol, val)
    if name === Symbol("caBundle")
        OpenAPI.validate_param(name, "IoK8sApiAuditregistrationV1alpha1WebhookClientConfig", :format, val, "byte")
    end
    if name === Symbol("caBundle")
        OpenAPI.validate_param(name, "IoK8sApiAuditregistrationV1alpha1WebhookClientConfig", :pattern, val, r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$")
    end
end
