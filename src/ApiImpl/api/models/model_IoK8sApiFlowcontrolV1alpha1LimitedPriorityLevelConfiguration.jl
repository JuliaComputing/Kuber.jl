# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration
LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  * How are requests for this priority level limited?  * What should be done with requests that exceed the limit?

    IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(;
        assuredConcurrencyShares=nothing,
        limitResponse=nothing,
    )

    - assuredConcurrencyShares::Int64 : &#x60;assuredConcurrencyShares&#x60; (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server&#39;s concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) &#x3D; ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
    - limitResponse::IoK8sApiFlowcontrolV1alpha1LimitResponse
"""
Base.@kwdef mutable struct IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration <: OpenAPI.APIModel
    assuredConcurrencyShares::Union{Nothing, Int64} = nothing
    limitResponse = nothing # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1LimitResponse }

    function IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(assuredConcurrencyShares, limitResponse, )
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration, Symbol("assuredConcurrencyShares"), assuredConcurrencyShares)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration, Symbol("limitResponse"), limitResponse)
        return new(assuredConcurrencyShares, limitResponse, )
    end
end # type IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration

const _property_types_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration = Dict{Symbol,String}(Symbol("assuredConcurrencyShares")=>"Int64", Symbol("limitResponse")=>"IoK8sApiFlowcontrolV1alpha1LimitResponse", )
OpenAPI.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration[name]))}

function check_required(o::IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration }, name::Symbol, val)
    if name === Symbol("assuredConcurrencyShares")
        OpenAPI.validate_param(name, "IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration", :format, val, "int32")
    end
end
