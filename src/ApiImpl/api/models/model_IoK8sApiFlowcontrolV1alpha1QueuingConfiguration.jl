# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration
QueuingConfiguration holds the configuration parameters for queuing

    IoK8sApiFlowcontrolV1alpha1QueuingConfiguration(;
        handSize=nothing,
        queueLengthLimit=nothing,
        queues=nothing,
    )

    - handSize::Int64 : &#x60;handSize&#x60; is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request&#39;s flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. &#x60;handSize&#x60; must be no larger than &#x60;queues&#x60;, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
    - queueLengthLimit::Int64 : &#x60;queueLengthLimit&#x60; is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
    - queues::Int64 : &#x60;queues&#x60; is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
"""
Base.@kwdef mutable struct IoK8sApiFlowcontrolV1alpha1QueuingConfiguration <: OpenAPI.APIModel
    handSize::Union{Nothing, Int64} = nothing
    queueLengthLimit::Union{Nothing, Int64} = nothing
    queues::Union{Nothing, Int64} = nothing

    function IoK8sApiFlowcontrolV1alpha1QueuingConfiguration(handSize, queueLengthLimit, queues, )
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1QueuingConfiguration, Symbol("handSize"), handSize)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1QueuingConfiguration, Symbol("queueLengthLimit"), queueLengthLimit)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1QueuingConfiguration, Symbol("queues"), queues)
        return new(handSize, queueLengthLimit, queues, )
    end
end # type IoK8sApiFlowcontrolV1alpha1QueuingConfiguration

const _property_types_IoK8sApiFlowcontrolV1alpha1QueuingConfiguration = Dict{Symbol,String}(Symbol("handSize")=>"Int64", Symbol("queueLengthLimit")=>"Int64", Symbol("queues")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1QueuingConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1QueuingConfiguration[name]))}

function check_required(o::IoK8sApiFlowcontrolV1alpha1QueuingConfiguration)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1QueuingConfiguration }, name::Symbol, val)
    if name === Symbol("handSize")
        OpenAPI.validate_param(name, "IoK8sApiFlowcontrolV1alpha1QueuingConfiguration", :format, val, "int32")
    end
    if name === Symbol("queueLengthLimit")
        OpenAPI.validate_param(name, "IoK8sApiFlowcontrolV1alpha1QueuingConfiguration", :format, val, "int32")
    end
    if name === Symbol("queues")
        OpenAPI.validate_param(name, "IoK8sApiFlowcontrolV1alpha1QueuingConfiguration", :format, val, "int32")
    end
end
