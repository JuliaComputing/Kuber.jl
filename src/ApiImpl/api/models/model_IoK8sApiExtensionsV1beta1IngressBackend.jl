# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.extensions.v1beta1.IngressBackend
IngressBackend describes all endpoints for a given service and port.

    IoK8sApiExtensionsV1beta1IngressBackend(;
        serviceName=nothing,
        servicePort=nothing,
    )

    - serviceName::String : Specifies the name of the referenced service.
    - servicePort::String : IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
"""
Base.@kwdef mutable struct IoK8sApiExtensionsV1beta1IngressBackend <: OpenAPI.APIModel
    serviceName::Union{Nothing, String} = nothing
    servicePort::Union{Nothing, String} = nothing

    function IoK8sApiExtensionsV1beta1IngressBackend(serviceName, servicePort, )
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressBackend, Symbol("serviceName"), serviceName)
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressBackend, Symbol("servicePort"), servicePort)
        return new(serviceName, servicePort, )
    end
end # type IoK8sApiExtensionsV1beta1IngressBackend

const _property_types_IoK8sApiExtensionsV1beta1IngressBackend = Dict{Symbol,String}(Symbol("serviceName")=>"String", Symbol("servicePort")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiExtensionsV1beta1IngressBackend }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiExtensionsV1beta1IngressBackend[name]))}

function check_required(o::IoK8sApiExtensionsV1beta1IngressBackend)
    o.serviceName === nothing && (return false)
    o.servicePort === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiExtensionsV1beta1IngressBackend }, name::Symbol, val)
    if name === Symbol("servicePort")
        OpenAPI.validate_param(name, "IoK8sApiExtensionsV1beta1IngressBackend", :format, val, "int-or-string")
    end
end
