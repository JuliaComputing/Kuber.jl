# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.KeyToPath
Maps a string key to a path within a volume.

    IoK8sApiCoreV1KeyToPath(;
        key=nothing,
        mode=nothing,
        path=nothing,
    )

    - key::String : The key to project.
    - mode::Int64 : Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    - path::String : The relative path of the file to map the key to. May not be an absolute path. May not contain the path element &#39;..&#39;. May not start with the string &#39;..&#39;.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1KeyToPath <: OpenAPI.APIModel
    key::Union{Nothing, String} = nothing
    mode::Union{Nothing, Int64} = nothing
    path::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1KeyToPath(key, mode, path, )
        OpenAPI.validate_property(IoK8sApiCoreV1KeyToPath, Symbol("key"), key)
        OpenAPI.validate_property(IoK8sApiCoreV1KeyToPath, Symbol("mode"), mode)
        OpenAPI.validate_property(IoK8sApiCoreV1KeyToPath, Symbol("path"), path)
        return new(key, mode, path, )
    end
end # type IoK8sApiCoreV1KeyToPath

const _property_types_IoK8sApiCoreV1KeyToPath = Dict{Symbol,String}(Symbol("key")=>"String", Symbol("mode")=>"Int64", Symbol("path")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1KeyToPath }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1KeyToPath[name]))}

function check_required(o::IoK8sApiCoreV1KeyToPath)
    o.key === nothing && (return false)
    o.path === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1KeyToPath }, name::Symbol, val)
    if name === Symbol("mode")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1KeyToPath", :format, val, "int32")
    end
end
