# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec
This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.

    IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec(;
        extra=nothing,
        groups=nothing,
        request=nothing,
        uid=nothing,
        usages=nothing,
        username=nothing,
    )

    - extra::Dict{String, Vector{String}} : Extra information about the requesting user. See user.Info interface for details.
    - groups::Vector{String} : Group information about the requesting user. See user.Info interface for details.
    - request::Vector{UInt8} : Base64-encoded PKCS#10 CSR data
    - uid::String : UID information about the requesting user. See user.Info interface for details.
    - usages::Vector{String} : allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    - username::String : Information about the requesting user. See user.Info interface for details.
"""
Base.@kwdef mutable struct IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec <: OpenAPI.APIModel
    extra::Union{Nothing, Dict{String, Vector{String}}} = nothing
    groups::Union{Nothing, Vector{String}} = nothing
    request::Union{Nothing, Vector{UInt8}} = nothing
    uid::Union{Nothing, String} = nothing
    usages::Union{Nothing, Vector{String}} = nothing
    username::Union{Nothing, String} = nothing

    function IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec(extra, groups, request, uid, usages, username, )
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("extra"), extra)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("groups"), groups)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("request"), request)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("uid"), uid)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("usages"), usages)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("username"), username)
        return new(extra, groups, request, uid, usages, username, )
    end
end # type IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec

const _property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec = Dict{Symbol,String}(Symbol("extra")=>"Dict{String, Vector{String}}", Symbol("groups")=>"Vector{String}", Symbol("request")=>"Vector{UInt8}", Symbol("uid")=>"String", Symbol("usages")=>"Vector{String}", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec[name]))}

function check_required(o::IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec)
    o.request === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }, name::Symbol, val)
    if name === Symbol("request")
        OpenAPI.validate_param(name, "IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec", :format, val, "byte")
    end
    if name === Symbol("request")
        OpenAPI.validate_param(name, "IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec", :pattern, val, r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$")
    end
end
