# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.extensions.v1beta1.IngressTLS
IngressTLS describes the transport layer security associated with an Ingress.

    IoK8sApiExtensionsV1beta1IngressTLS(;
        hosts=nothing,
        secretName=nothing,
    )

    - hosts::Vector{String} : Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    - secretName::String : SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \&quot;Host\&quot; header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
"""
Base.@kwdef mutable struct IoK8sApiExtensionsV1beta1IngressTLS <: OpenAPI.APIModel
    hosts::Union{Nothing, Vector{String}} = nothing
    secretName::Union{Nothing, String} = nothing

    function IoK8sApiExtensionsV1beta1IngressTLS(hosts, secretName, )
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressTLS, Symbol("hosts"), hosts)
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressTLS, Symbol("secretName"), secretName)
        return new(hosts, secretName, )
    end
end # type IoK8sApiExtensionsV1beta1IngressTLS

const _property_types_IoK8sApiExtensionsV1beta1IngressTLS = Dict{Symbol,String}(Symbol("hosts")=>"Vector{String}", Symbol("secretName")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiExtensionsV1beta1IngressTLS }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiExtensionsV1beta1IngressTLS[name]))}

function check_required(o::IoK8sApiExtensionsV1beta1IngressTLS)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiExtensionsV1beta1IngressTLS }, name::Symbol, val)
end
