# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.EnvFromSource
EnvFromSource represents the source of a set of ConfigMaps

    IoK8sApiCoreV1EnvFromSource(;
        configMapRef=nothing,
        prefix=nothing,
        secretRef=nothing,
    )

    - configMapRef::IoK8sApiCoreV1ConfigMapEnvSource
    - prefix::String : An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    - secretRef::IoK8sApiCoreV1SecretEnvSource
"""
Base.@kwdef mutable struct IoK8sApiCoreV1EnvFromSource <: OpenAPI.APIModel
    configMapRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapEnvSource }
    prefix::Union{Nothing, String} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretEnvSource }

    function IoK8sApiCoreV1EnvFromSource(configMapRef, prefix, secretRef, )
        OpenAPI.validate_property(IoK8sApiCoreV1EnvFromSource, Symbol("configMapRef"), configMapRef)
        OpenAPI.validate_property(IoK8sApiCoreV1EnvFromSource, Symbol("prefix"), prefix)
        OpenAPI.validate_property(IoK8sApiCoreV1EnvFromSource, Symbol("secretRef"), secretRef)
        return new(configMapRef, prefix, secretRef, )
    end
end # type IoK8sApiCoreV1EnvFromSource

const _property_types_IoK8sApiCoreV1EnvFromSource = Dict{Symbol,String}(Symbol("configMapRef")=>"IoK8sApiCoreV1ConfigMapEnvSource", Symbol("prefix")=>"String", Symbol("secretRef")=>"IoK8sApiCoreV1SecretEnvSource", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1EnvFromSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1EnvFromSource[name]))}

function check_required(o::IoK8sApiCoreV1EnvFromSource)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1EnvFromSource }, name::Symbol, val)
end
