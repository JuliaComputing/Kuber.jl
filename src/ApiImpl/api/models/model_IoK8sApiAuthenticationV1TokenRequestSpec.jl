# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.authentication.v1.TokenRequestSpec
TokenRequestSpec contains client provided parameters of a token request.

    IoK8sApiAuthenticationV1TokenRequestSpec(;
        audiences=nothing,
        boundObjectRef=nothing,
        expirationSeconds=nothing,
    )

    - audiences::Vector{String} : Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
    - boundObjectRef::IoK8sApiAuthenticationV1BoundObjectReference
    - expirationSeconds::Int64 : ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the &#39;expiration&#39; field in a response.
"""
Base.@kwdef mutable struct IoK8sApiAuthenticationV1TokenRequestSpec <: OpenAPI.APIModel
    audiences::Union{Nothing, Vector{String}} = nothing
    boundObjectRef = nothing # spec type: Union{ Nothing, IoK8sApiAuthenticationV1BoundObjectReference }
    expirationSeconds::Union{Nothing, Int64} = nothing

    function IoK8sApiAuthenticationV1TokenRequestSpec(audiences, boundObjectRef, expirationSeconds, )
        OpenAPI.validate_property(IoK8sApiAuthenticationV1TokenRequestSpec, Symbol("audiences"), audiences)
        OpenAPI.validate_property(IoK8sApiAuthenticationV1TokenRequestSpec, Symbol("boundObjectRef"), boundObjectRef)
        OpenAPI.validate_property(IoK8sApiAuthenticationV1TokenRequestSpec, Symbol("expirationSeconds"), expirationSeconds)
        return new(audiences, boundObjectRef, expirationSeconds, )
    end
end # type IoK8sApiAuthenticationV1TokenRequestSpec

const _property_types_IoK8sApiAuthenticationV1TokenRequestSpec = Dict{Symbol,String}(Symbol("audiences")=>"Vector{String}", Symbol("boundObjectRef")=>"IoK8sApiAuthenticationV1BoundObjectReference", Symbol("expirationSeconds")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiAuthenticationV1TokenRequestSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthenticationV1TokenRequestSpec[name]))}

function check_required(o::IoK8sApiAuthenticationV1TokenRequestSpec)
    o.audiences === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuthenticationV1TokenRequestSpec }, name::Symbol, val)
    if name === Symbol("expirationSeconds")
        OpenAPI.validate_param(name, "IoK8sApiAuthenticationV1TokenRequestSpec", :format, val, "int64")
    end
end
