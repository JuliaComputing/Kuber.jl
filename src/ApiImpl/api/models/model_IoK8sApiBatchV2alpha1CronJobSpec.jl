# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.batch.v2alpha1.CronJobSpec
CronJobSpec describes how the job execution will look like and when it will actually run.

    IoK8sApiBatchV2alpha1CronJobSpec(;
        concurrencyPolicy=nothing,
        failedJobsHistoryLimit=nothing,
        jobTemplate=nothing,
        schedule=nothing,
        startingDeadlineSeconds=nothing,
        successfulJobsHistoryLimit=nothing,
        suspend=nothing,
    )

    - concurrencyPolicy::String : Specifies how to treat concurrent executions of a Job. Valid values are: - \&quot;Allow\&quot; (default): allows CronJobs to run concurrently; - \&quot;Forbid\&quot;: forbids concurrent runs, skipping next run if previous run hasn&#39;t finished yet; - \&quot;Replace\&quot;: cancels currently running job and replaces it with a new one
    - failedJobsHistoryLimit::Int64 : The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    - jobTemplate::IoK8sApiBatchV2alpha1JobTemplateSpec
    - schedule::String : The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    - startingDeadlineSeconds::Int64 : Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    - successfulJobsHistoryLimit::Int64 : The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
    - suspend::Bool : This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
"""
Base.@kwdef mutable struct IoK8sApiBatchV2alpha1CronJobSpec <: OpenAPI.APIModel
    concurrencyPolicy::Union{Nothing, String} = nothing
    failedJobsHistoryLimit::Union{Nothing, Int64} = nothing
    jobTemplate = nothing # spec type: Union{ Nothing, IoK8sApiBatchV2alpha1JobTemplateSpec }
    schedule::Union{Nothing, String} = nothing
    startingDeadlineSeconds::Union{Nothing, Int64} = nothing
    successfulJobsHistoryLimit::Union{Nothing, Int64} = nothing
    suspend::Union{Nothing, Bool} = nothing

    function IoK8sApiBatchV2alpha1CronJobSpec(concurrencyPolicy, failedJobsHistoryLimit, jobTemplate, schedule, startingDeadlineSeconds, successfulJobsHistoryLimit, suspend, )
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("concurrencyPolicy"), concurrencyPolicy)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("failedJobsHistoryLimit"), failedJobsHistoryLimit)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("jobTemplate"), jobTemplate)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("schedule"), schedule)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("startingDeadlineSeconds"), startingDeadlineSeconds)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("successfulJobsHistoryLimit"), successfulJobsHistoryLimit)
        OpenAPI.validate_property(IoK8sApiBatchV2alpha1CronJobSpec, Symbol("suspend"), suspend)
        return new(concurrencyPolicy, failedJobsHistoryLimit, jobTemplate, schedule, startingDeadlineSeconds, successfulJobsHistoryLimit, suspend, )
    end
end # type IoK8sApiBatchV2alpha1CronJobSpec

const _property_types_IoK8sApiBatchV2alpha1CronJobSpec = Dict{Symbol,String}(Symbol("concurrencyPolicy")=>"String", Symbol("failedJobsHistoryLimit")=>"Int64", Symbol("jobTemplate")=>"IoK8sApiBatchV2alpha1JobTemplateSpec", Symbol("schedule")=>"String", Symbol("startingDeadlineSeconds")=>"Int64", Symbol("successfulJobsHistoryLimit")=>"Int64", Symbol("suspend")=>"Bool", )
OpenAPI.property_type(::Type{ IoK8sApiBatchV2alpha1CronJobSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiBatchV2alpha1CronJobSpec[name]))}

function check_required(o::IoK8sApiBatchV2alpha1CronJobSpec)
    o.jobTemplate === nothing && (return false)
    o.schedule === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiBatchV2alpha1CronJobSpec }, name::Symbol, val)
    if name === Symbol("failedJobsHistoryLimit")
        OpenAPI.validate_param(name, "IoK8sApiBatchV2alpha1CronJobSpec", :format, val, "int32")
    end
    if name === Symbol("startingDeadlineSeconds")
        OpenAPI.validate_param(name, "IoK8sApiBatchV2alpha1CronJobSpec", :format, val, "int64")
    end
    if name === Symbol("successfulJobsHistoryLimit")
        OpenAPI.validate_param(name, "IoK8sApiBatchV2alpha1CronJobSpec", :format, val, "int32")
    end
end
