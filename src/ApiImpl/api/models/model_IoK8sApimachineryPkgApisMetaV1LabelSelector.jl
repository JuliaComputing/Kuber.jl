# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    IoK8sApimachineryPkgApisMetaV1LabelSelector(;
        matchExpressions=nothing,
        matchLabels=nothing,
    )

    - matchExpressions::Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement} : matchExpressions is a list of label selector requirements. The requirements are ANDed.
    - matchLabels::Dict{String, String} : matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \&quot;key\&quot;, the operator is \&quot;In\&quot;, and the values array contains only \&quot;value\&quot;. The requirements are ANDed.
"""
Base.@kwdef mutable struct IoK8sApimachineryPkgApisMetaV1LabelSelector <: OpenAPI.APIModel
    matchExpressions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement} }
    matchLabels::Union{Nothing, Dict{String, String}} = nothing

    function IoK8sApimachineryPkgApisMetaV1LabelSelector(matchExpressions, matchLabels, )
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1LabelSelector, Symbol("matchExpressions"), matchExpressions)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1LabelSelector, Symbol("matchLabels"), matchLabels)
        return new(matchExpressions, matchLabels, )
    end
end # type IoK8sApimachineryPkgApisMetaV1LabelSelector

const _property_types_IoK8sApimachineryPkgApisMetaV1LabelSelector = Dict{Symbol,String}(Symbol("matchExpressions")=>"Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement}", Symbol("matchLabels")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1LabelSelector[name]))}

function check_required(o::IoK8sApimachineryPkgApisMetaV1LabelSelector)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }, name::Symbol, val)
end
