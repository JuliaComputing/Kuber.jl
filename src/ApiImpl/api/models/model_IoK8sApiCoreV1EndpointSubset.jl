# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.EndpointSubset
EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{\&quot;ip\&quot;: \&quot;10.10.1.1\&quot;}, {\&quot;ip\&quot;: \&quot;10.10.2.2\&quot;}],     Ports:     [{\&quot;name\&quot;: \&quot;a\&quot;, \&quot;port\&quot;: 8675}, {\&quot;name\&quot;: \&quot;b\&quot;, \&quot;port\&quot;: 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]

    IoK8sApiCoreV1EndpointSubset(;
        addresses=nothing,
        notReadyAddresses=nothing,
        ports=nothing,
    )

    - addresses::Vector{IoK8sApiCoreV1EndpointAddress} : IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
    - notReadyAddresses::Vector{IoK8sApiCoreV1EndpointAddress} : IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
    - ports::Vector{IoK8sApiCoreV1EndpointPort} : Port numbers available on the related IP addresses.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1EndpointSubset <: OpenAPI.APIModel
    addresses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1EndpointAddress} }
    notReadyAddresses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1EndpointAddress} }
    ports::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1EndpointPort} }

    function IoK8sApiCoreV1EndpointSubset(addresses, notReadyAddresses, ports, )
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointSubset, Symbol("addresses"), addresses)
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointSubset, Symbol("notReadyAddresses"), notReadyAddresses)
        OpenAPI.validate_property(IoK8sApiCoreV1EndpointSubset, Symbol("ports"), ports)
        return new(addresses, notReadyAddresses, ports, )
    end
end # type IoK8sApiCoreV1EndpointSubset

const _property_types_IoK8sApiCoreV1EndpointSubset = Dict{Symbol,String}(Symbol("addresses")=>"Vector{IoK8sApiCoreV1EndpointAddress}", Symbol("notReadyAddresses")=>"Vector{IoK8sApiCoreV1EndpointAddress}", Symbol("ports")=>"Vector{IoK8sApiCoreV1EndpointPort}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1EndpointSubset }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1EndpointSubset[name]))}

function check_required(o::IoK8sApiCoreV1EndpointSubset)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1EndpointSubset }, name::Symbol, val)
end
