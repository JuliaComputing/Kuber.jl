# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference
OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.

    IoK8sApimachineryPkgApisMetaV1OwnerReference(;
        apiVersion=nothing,
        blockOwnerDeletion=nothing,
        controller=nothing,
        kind=nothing,
        name=nothing,
        uid=nothing,
    )

    - apiVersion::String : API version of the referent.
    - blockOwnerDeletion::Bool : If true, AND if the owner has the \&quot;foregroundDeletion\&quot; finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \&quot;delete\&quot; permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    - controller::Bool : If true, this reference points to the managing controller.
    - kind::String : Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - name::String : Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    - uid::String : UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
"""
Base.@kwdef mutable struct IoK8sApimachineryPkgApisMetaV1OwnerReference <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    blockOwnerDeletion::Union{Nothing, Bool} = nothing
    controller::Union{Nothing, Bool} = nothing
    kind::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    uid::Union{Nothing, String} = nothing

    function IoK8sApimachineryPkgApisMetaV1OwnerReference(apiVersion, blockOwnerDeletion, controller, kind, name, uid, )
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("blockOwnerDeletion"), blockOwnerDeletion)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("controller"), controller)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApimachineryPkgApisMetaV1OwnerReference, Symbol("uid"), uid)
        return new(apiVersion, blockOwnerDeletion, controller, kind, name, uid, )
    end
end # type IoK8sApimachineryPkgApisMetaV1OwnerReference

const _property_types_IoK8sApimachineryPkgApisMetaV1OwnerReference = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("blockOwnerDeletion")=>"Bool", Symbol("controller")=>"Bool", Symbol("kind")=>"String", Symbol("name")=>"String", Symbol("uid")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1OwnerReference }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1OwnerReference[name]))}

function check_required(o::IoK8sApimachineryPkgApisMetaV1OwnerReference)
    o.apiVersion === nothing && (return false)
    o.kind === nothing && (return false)
    o.name === nothing && (return false)
    o.uid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1OwnerReference }, name::Symbol, val)
end
