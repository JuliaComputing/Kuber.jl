# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.metrics.v1beta1.PodMetrics
PodMetrics sets resource usage metrics of a pod.

    IoK8sApiMetricsV1beta1PodMetrics(;
        containers=nothing,
        metadata=nothing,
        timestamp=nothing,
        window=nothing,
    )

    - containers::Vector{IoK8sApiMetricsV1beta1ContainerMetrics} : Metrics for all containers are collected within the same time window.
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - timestamp::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - window::String : Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.
"""
Base.@kwdef mutable struct IoK8sApiMetricsV1beta1PodMetrics <: OpenAPI.APIModel
    containers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiMetricsV1beta1ContainerMetrics} }
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    window::Union{Nothing, String} = nothing

    function IoK8sApiMetricsV1beta1PodMetrics(containers, metadata, timestamp, window, )
        OpenAPI.validate_property(IoK8sApiMetricsV1beta1PodMetrics, Symbol("containers"), containers)
        OpenAPI.validate_property(IoK8sApiMetricsV1beta1PodMetrics, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoK8sApiMetricsV1beta1PodMetrics, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(IoK8sApiMetricsV1beta1PodMetrics, Symbol("window"), window)
        return new(containers, metadata, timestamp, window, )
    end
end # type IoK8sApiMetricsV1beta1PodMetrics

const _property_types_IoK8sApiMetricsV1beta1PodMetrics = Dict{Symbol,String}(Symbol("containers")=>"Vector{IoK8sApiMetricsV1beta1ContainerMetrics}", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("timestamp")=>"ZonedDateTime", Symbol("window")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiMetricsV1beta1PodMetrics }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiMetricsV1beta1PodMetrics[name]))}

function check_required(o::IoK8sApiMetricsV1beta1PodMetrics)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiMetricsV1beta1PodMetrics }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "IoK8sApiMetricsV1beta1PodMetrics", :format, val, "date-time")
    end
end
