# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ContainerStateTerminated
ContainerStateTerminated is a terminated state of a container.

    IoK8sApiCoreV1ContainerStateTerminated(;
        containerID=nothing,
        exitCode=nothing,
        finishedAt=nothing,
        message=nothing,
        reason=nothing,
        signal=nothing,
        startedAt=nothing,
    )

    - containerID::String : Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;
    - exitCode::Int64 : Exit status from the last termination of the container
    - finishedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - message::String : Message regarding the last termination of the container
    - reason::String : (brief) reason from the last termination of the container
    - signal::Int64 : Signal from the last termination of the container
    - startedAt::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ContainerStateTerminated <: OpenAPI.APIModel
    containerID::Union{Nothing, String} = nothing
    exitCode::Union{Nothing, Int64} = nothing
    finishedAt::Union{Nothing, ZonedDateTime} = nothing
    message::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing
    signal::Union{Nothing, Int64} = nothing
    startedAt::Union{Nothing, ZonedDateTime} = nothing

    function IoK8sApiCoreV1ContainerStateTerminated(containerID, exitCode, finishedAt, message, reason, signal, startedAt, )
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("containerID"), containerID)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("exitCode"), exitCode)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("finishedAt"), finishedAt)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("message"), message)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("reason"), reason)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("signal"), signal)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStateTerminated, Symbol("startedAt"), startedAt)
        return new(containerID, exitCode, finishedAt, message, reason, signal, startedAt, )
    end
end # type IoK8sApiCoreV1ContainerStateTerminated

const _property_types_IoK8sApiCoreV1ContainerStateTerminated = Dict{Symbol,String}(Symbol("containerID")=>"String", Symbol("exitCode")=>"Int64", Symbol("finishedAt")=>"ZonedDateTime", Symbol("message")=>"String", Symbol("reason")=>"String", Symbol("signal")=>"Int64", Symbol("startedAt")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ContainerStateTerminated }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ContainerStateTerminated[name]))}

function check_required(o::IoK8sApiCoreV1ContainerStateTerminated)
    o.exitCode === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ContainerStateTerminated }, name::Symbol, val)
    if name === Symbol("exitCode")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerStateTerminated", :format, val, "int32")
    end
    if name === Symbol("finishedAt")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerStateTerminated", :format, val, "date-time")
    end
    if name === Symbol("signal")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerStateTerminated", :format, val, "int32")
    end
    if name === Symbol("startedAt")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerStateTerminated", :format, val, "date-time")
    end
end
