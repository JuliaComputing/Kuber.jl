# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.TopologySelectorTerm
A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.

    IoK8sApiCoreV1TopologySelectorTerm(;
        matchLabelExpressions=nothing,
    )

    - matchLabelExpressions::Vector{IoK8sApiCoreV1TopologySelectorLabelRequirement} : A list of topology selector requirements by labels.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1TopologySelectorTerm <: OpenAPI.APIModel
    matchLabelExpressions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1TopologySelectorLabelRequirement} }

    function IoK8sApiCoreV1TopologySelectorTerm(matchLabelExpressions, )
        OpenAPI.validate_property(IoK8sApiCoreV1TopologySelectorTerm, Symbol("matchLabelExpressions"), matchLabelExpressions)
        return new(matchLabelExpressions, )
    end
end # type IoK8sApiCoreV1TopologySelectorTerm

const _property_types_IoK8sApiCoreV1TopologySelectorTerm = Dict{Symbol,String}(Symbol("matchLabelExpressions")=>"Vector{IoK8sApiCoreV1TopologySelectorLabelRequirement}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1TopologySelectorTerm }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1TopologySelectorTerm[name]))}

function check_required(o::IoK8sApiCoreV1TopologySelectorTerm)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1TopologySelectorTerm }, name::Symbol, val)
end
