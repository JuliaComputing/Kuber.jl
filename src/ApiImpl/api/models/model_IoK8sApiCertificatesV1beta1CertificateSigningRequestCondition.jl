# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition

    IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition(;
        lastUpdateTime=nothing,
        message=nothing,
        reason=nothing,
        type=nothing,
    )

    - lastUpdateTime::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - message::String : human readable message with details about the request state
    - reason::String : brief reason for the request state
    - type::String : request approval state, currently Approved or Denied.
"""
Base.@kwdef mutable struct IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition <: OpenAPI.APIModel
    lastUpdateTime::Union{Nothing, ZonedDateTime} = nothing
    message::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition(lastUpdateTime, message, reason, type, )
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition, Symbol("lastUpdateTime"), lastUpdateTime)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition, Symbol("message"), message)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition, Symbol("reason"), reason)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition, Symbol("type"), type)
        return new(lastUpdateTime, message, reason, type, )
    end
end # type IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition

const _property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition = Dict{Symbol,String}(Symbol("lastUpdateTime")=>"ZonedDateTime", Symbol("message")=>"String", Symbol("reason")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition[name]))}

function check_required(o::IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition }, name::Symbol, val)
    if name === Symbol("lastUpdateTime")
        OpenAPI.validate_param(name, "IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition", :format, val, "date-time")
    end
end
