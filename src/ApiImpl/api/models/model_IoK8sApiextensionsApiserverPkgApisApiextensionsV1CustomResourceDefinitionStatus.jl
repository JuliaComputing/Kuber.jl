# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus
CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition

    IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus(;
        acceptedNames=nothing,
        conditions=nothing,
        storedVersions=nothing,
    )

    - acceptedNames::IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
    - conditions::Vector{IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition} : conditions indicate state for particular aspects of a CustomResourceDefinition
    - storedVersions::Vector{String} : storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from &#x60;spec.versions&#x60; while they exist in this list.
"""
Base.@kwdef mutable struct IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus <: OpenAPI.APIModel
    acceptedNames = nothing # spec type: Union{ Nothing, IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames }
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition} }
    storedVersions::Union{Nothing, Vector{String}} = nothing

    function IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus(acceptedNames, conditions, storedVersions, )
        OpenAPI.validate_property(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus, Symbol("acceptedNames"), acceptedNames)
        OpenAPI.validate_property(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus, Symbol("storedVersions"), storedVersions)
        return new(acceptedNames, conditions, storedVersions, )
    end
end # type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus

const _property_types_IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus = Dict{Symbol,String}(Symbol("acceptedNames")=>"IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames", Symbol("conditions")=>"Vector{IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition}", Symbol("storedVersions")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus[name]))}

function check_required(o::IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus)
    o.acceptedNames === nothing && (return false)
    o.storedVersions === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus }, name::Symbol, val)
end
