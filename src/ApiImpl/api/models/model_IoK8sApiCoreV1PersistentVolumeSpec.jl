# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PersistentVolumeSpec
PersistentVolumeSpec is the specification of a persistent volume.

    IoK8sApiCoreV1PersistentVolumeSpec(;
        accessModes=nothing,
        awsElasticBlockStore=nothing,
        azureDisk=nothing,
        azureFile=nothing,
        capacity=nothing,
        cephfs=nothing,
        cinder=nothing,
        claimRef=nothing,
        csi=nothing,
        fc=nothing,
        flexVolume=nothing,
        flocker=nothing,
        gcePersistentDisk=nothing,
        glusterfs=nothing,
        hostPath=nothing,
        iscsi=nothing,
        var"local"=nothing,
        mountOptions=nothing,
        nfs=nothing,
        nodeAffinity=nothing,
        persistentVolumeReclaimPolicy=nothing,
        photonPersistentDisk=nothing,
        portworxVolume=nothing,
        quobyte=nothing,
        rbd=nothing,
        scaleIO=nothing,
        storageClassName=nothing,
        storageos=nothing,
        volumeMode=nothing,
        vsphereVolume=nothing,
    )

    - accessModes::Vector{String} : AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
    - awsElasticBlockStore::IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
    - azureDisk::IoK8sApiCoreV1AzureDiskVolumeSource
    - azureFile::IoK8sApiCoreV1AzureFilePersistentVolumeSource
    - capacity::Dict{String, String} : A description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    - cephfs::IoK8sApiCoreV1CephFSPersistentVolumeSource
    - cinder::IoK8sApiCoreV1CinderPersistentVolumeSource
    - claimRef::IoK8sApiCoreV1ObjectReference
    - csi::IoK8sApiCoreV1CSIPersistentVolumeSource
    - fc::IoK8sApiCoreV1FCVolumeSource
    - flexVolume::IoK8sApiCoreV1FlexPersistentVolumeSource
    - flocker::IoK8sApiCoreV1FlockerVolumeSource
    - gcePersistentDisk::IoK8sApiCoreV1GCEPersistentDiskVolumeSource
    - glusterfs::IoK8sApiCoreV1GlusterfsPersistentVolumeSource
    - hostPath::IoK8sApiCoreV1HostPathVolumeSource
    - iscsi::IoK8sApiCoreV1ISCSIPersistentVolumeSource
    - var"local"::IoK8sApiCoreV1LocalVolumeSource
    - mountOptions::Vector{String} : A list of mount options, e.g. [\&quot;ro\&quot;, \&quot;soft\&quot;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
    - nfs::IoK8sApiCoreV1NFSVolumeSource
    - nodeAffinity::IoK8sApiCoreV1VolumeNodeAffinity
    - persistentVolumeReclaimPolicy::String : What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
    - photonPersistentDisk::IoK8sApiCoreV1PhotonPersistentDiskVolumeSource
    - portworxVolume::IoK8sApiCoreV1PortworxVolumeSource
    - quobyte::IoK8sApiCoreV1QuobyteVolumeSource
    - rbd::IoK8sApiCoreV1RBDPersistentVolumeSource
    - scaleIO::IoK8sApiCoreV1ScaleIOPersistentVolumeSource
    - storageClassName::String : Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
    - storageos::IoK8sApiCoreV1StorageOSPersistentVolumeSource
    - volumeMode::String : volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is a beta feature.
    - vsphereVolume::IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PersistentVolumeSpec <: OpenAPI.APIModel
    accessModes::Union{Nothing, Vector{String}} = nothing
    awsElasticBlockStore = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource }
    azureDisk = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1AzureDiskVolumeSource }
    azureFile = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1AzureFilePersistentVolumeSource }
    capacity::Union{Nothing, Dict{String, String}} = nothing
    cephfs = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1CephFSPersistentVolumeSource }
    cinder = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1CinderPersistentVolumeSource }
    claimRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ObjectReference }
    csi = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1CSIPersistentVolumeSource }
    fc = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1FCVolumeSource }
    flexVolume = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1FlexPersistentVolumeSource }
    flocker = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1FlockerVolumeSource }
    gcePersistentDisk = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1GCEPersistentDiskVolumeSource }
    glusterfs = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1GlusterfsPersistentVolumeSource }
    hostPath = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1HostPathVolumeSource }
    iscsi = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ISCSIPersistentVolumeSource }
    var"local" = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1LocalVolumeSource }
    mountOptions::Union{Nothing, Vector{String}} = nothing
    nfs = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1NFSVolumeSource }
    nodeAffinity = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1VolumeNodeAffinity }
    persistentVolumeReclaimPolicy::Union{Nothing, String} = nothing
    photonPersistentDisk = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1PhotonPersistentDiskVolumeSource }
    portworxVolume = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1PortworxVolumeSource }
    quobyte = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1QuobyteVolumeSource }
    rbd = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1RBDPersistentVolumeSource }
    scaleIO = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ScaleIOPersistentVolumeSource }
    storageClassName::Union{Nothing, String} = nothing
    storageos = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1StorageOSPersistentVolumeSource }
    volumeMode::Union{Nothing, String} = nothing
    vsphereVolume = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1VsphereVirtualDiskVolumeSource }

    function IoK8sApiCoreV1PersistentVolumeSpec(accessModes, awsElasticBlockStore, azureDisk, azureFile, capacity, cephfs, cinder, claimRef, csi, fc, flexVolume, flocker, gcePersistentDisk, glusterfs, hostPath, iscsi, var"local", mountOptions, nfs, nodeAffinity, persistentVolumeReclaimPolicy, photonPersistentDisk, portworxVolume, quobyte, rbd, scaleIO, storageClassName, storageos, volumeMode, vsphereVolume, )
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("accessModes"), accessModes)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("awsElasticBlockStore"), awsElasticBlockStore)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("azureDisk"), azureDisk)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("azureFile"), azureFile)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("capacity"), capacity)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("cephfs"), cephfs)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("cinder"), cinder)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("claimRef"), claimRef)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("csi"), csi)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("fc"), fc)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("flexVolume"), flexVolume)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("flocker"), flocker)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("gcePersistentDisk"), gcePersistentDisk)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("glusterfs"), glusterfs)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("hostPath"), hostPath)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("iscsi"), iscsi)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("local"), var"local")
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("mountOptions"), mountOptions)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("nfs"), nfs)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("nodeAffinity"), nodeAffinity)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("persistentVolumeReclaimPolicy"), persistentVolumeReclaimPolicy)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("photonPersistentDisk"), photonPersistentDisk)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("portworxVolume"), portworxVolume)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("quobyte"), quobyte)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("rbd"), rbd)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("scaleIO"), scaleIO)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("storageClassName"), storageClassName)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("storageos"), storageos)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("volumeMode"), volumeMode)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeSpec, Symbol("vsphereVolume"), vsphereVolume)
        return new(accessModes, awsElasticBlockStore, azureDisk, azureFile, capacity, cephfs, cinder, claimRef, csi, fc, flexVolume, flocker, gcePersistentDisk, glusterfs, hostPath, iscsi, var"local", mountOptions, nfs, nodeAffinity, persistentVolumeReclaimPolicy, photonPersistentDisk, portworxVolume, quobyte, rbd, scaleIO, storageClassName, storageos, volumeMode, vsphereVolume, )
    end
end # type IoK8sApiCoreV1PersistentVolumeSpec

const _property_types_IoK8sApiCoreV1PersistentVolumeSpec = Dict{Symbol,String}(Symbol("accessModes")=>"Vector{String}", Symbol("awsElasticBlockStore")=>"IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource", Symbol("azureDisk")=>"IoK8sApiCoreV1AzureDiskVolumeSource", Symbol("azureFile")=>"IoK8sApiCoreV1AzureFilePersistentVolumeSource", Symbol("capacity")=>"Dict{String, String}", Symbol("cephfs")=>"IoK8sApiCoreV1CephFSPersistentVolumeSource", Symbol("cinder")=>"IoK8sApiCoreV1CinderPersistentVolumeSource", Symbol("claimRef")=>"IoK8sApiCoreV1ObjectReference", Symbol("csi")=>"IoK8sApiCoreV1CSIPersistentVolumeSource", Symbol("fc")=>"IoK8sApiCoreV1FCVolumeSource", Symbol("flexVolume")=>"IoK8sApiCoreV1FlexPersistentVolumeSource", Symbol("flocker")=>"IoK8sApiCoreV1FlockerVolumeSource", Symbol("gcePersistentDisk")=>"IoK8sApiCoreV1GCEPersistentDiskVolumeSource", Symbol("glusterfs")=>"IoK8sApiCoreV1GlusterfsPersistentVolumeSource", Symbol("hostPath")=>"IoK8sApiCoreV1HostPathVolumeSource", Symbol("iscsi")=>"IoK8sApiCoreV1ISCSIPersistentVolumeSource", Symbol("local")=>"IoK8sApiCoreV1LocalVolumeSource", Symbol("mountOptions")=>"Vector{String}", Symbol("nfs")=>"IoK8sApiCoreV1NFSVolumeSource", Symbol("nodeAffinity")=>"IoK8sApiCoreV1VolumeNodeAffinity", Symbol("persistentVolumeReclaimPolicy")=>"String", Symbol("photonPersistentDisk")=>"IoK8sApiCoreV1PhotonPersistentDiskVolumeSource", Symbol("portworxVolume")=>"IoK8sApiCoreV1PortworxVolumeSource", Symbol("quobyte")=>"IoK8sApiCoreV1QuobyteVolumeSource", Symbol("rbd")=>"IoK8sApiCoreV1RBDPersistentVolumeSource", Symbol("scaleIO")=>"IoK8sApiCoreV1ScaleIOPersistentVolumeSource", Symbol("storageClassName")=>"String", Symbol("storageos")=>"IoK8sApiCoreV1StorageOSPersistentVolumeSource", Symbol("volumeMode")=>"String", Symbol("vsphereVolume")=>"IoK8sApiCoreV1VsphereVirtualDiskVolumeSource", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PersistentVolumeSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PersistentVolumeSpec[name]))}

function check_required(o::IoK8sApiCoreV1PersistentVolumeSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PersistentVolumeSpec }, name::Symbol, val)
end
