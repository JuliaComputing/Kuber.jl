# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.extensions.v1beta1.IngressSpec
IngressSpec describes the Ingress the user wishes to exist.

    IoK8sApiExtensionsV1beta1IngressSpec(;
        backend=nothing,
        rules=nothing,
        tls=nothing,
    )

    - backend::IoK8sApiExtensionsV1beta1IngressBackend
    - rules::Vector{IoK8sApiExtensionsV1beta1IngressRule} : A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    - tls::Vector{IoK8sApiExtensionsV1beta1IngressTLS} : TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
"""
Base.@kwdef mutable struct IoK8sApiExtensionsV1beta1IngressSpec <: OpenAPI.APIModel
    backend = nothing # spec type: Union{ Nothing, IoK8sApiExtensionsV1beta1IngressBackend }
    rules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiExtensionsV1beta1IngressRule} }
    tls::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiExtensionsV1beta1IngressTLS} }

    function IoK8sApiExtensionsV1beta1IngressSpec(backend, rules, tls, )
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressSpec, Symbol("backend"), backend)
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressSpec, Symbol("rules"), rules)
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1IngressSpec, Symbol("tls"), tls)
        return new(backend, rules, tls, )
    end
end # type IoK8sApiExtensionsV1beta1IngressSpec

const _property_types_IoK8sApiExtensionsV1beta1IngressSpec = Dict{Symbol,String}(Symbol("backend")=>"IoK8sApiExtensionsV1beta1IngressBackend", Symbol("rules")=>"Vector{IoK8sApiExtensionsV1beta1IngressRule}", Symbol("tls")=>"Vector{IoK8sApiExtensionsV1beta1IngressTLS}", )
OpenAPI.property_type(::Type{ IoK8sApiExtensionsV1beta1IngressSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiExtensionsV1beta1IngressSpec[name]))}

function check_required(o::IoK8sApiExtensionsV1beta1IngressSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiExtensionsV1beta1IngressSpec }, name::Symbol, val)
end
