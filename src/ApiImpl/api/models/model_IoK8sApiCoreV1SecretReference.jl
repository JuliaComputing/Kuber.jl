# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.SecretReference
SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace

    IoK8sApiCoreV1SecretReference(;
        name=nothing,
        namespace=nothing,
    )

    - name::String : Name is unique within a namespace to reference a secret resource.
    - namespace::String : Namespace defines the space within which the secret name must be unique.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1SecretReference <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1SecretReference(name, namespace, )
        OpenAPI.validate_property(IoK8sApiCoreV1SecretReference, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1SecretReference, Symbol("namespace"), namespace)
        return new(name, namespace, )
    end
end # type IoK8sApiCoreV1SecretReference

const _property_types_IoK8sApiCoreV1SecretReference = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("namespace")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1SecretReference }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1SecretReference[name]))}

function check_required(o::IoK8sApiCoreV1SecretReference)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1SecretReference }, name::Symbol, val)
end
