# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec
FlowSchemaSpec describes how the FlowSchema&#39;s specification looks like.

    IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec(;
        distinguisherMethod=nothing,
        matchingPrecedence=nothing,
        priorityLevelConfiguration=nothing,
        rules=nothing,
    )

    - distinguisherMethod::IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod
    - matchingPrecedence::Int64 : &#x60;matchingPrecedence&#x60; is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be non-negative. Note that if the precedence is not specified or zero, it will be set to 1000 as default.
    - priorityLevelConfiguration::IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference
    - rules::Vector{IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects} : &#x60;rules&#x60; describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
"""
Base.@kwdef mutable struct IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec <: OpenAPI.APIModel
    distinguisherMethod = nothing # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod }
    matchingPrecedence::Union{Nothing, Int64} = nothing
    priorityLevelConfiguration = nothing # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference }
    rules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects} }

    function IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec(distinguisherMethod, matchingPrecedence, priorityLevelConfiguration, rules, )
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec, Symbol("distinguisherMethod"), distinguisherMethod)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec, Symbol("matchingPrecedence"), matchingPrecedence)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec, Symbol("priorityLevelConfiguration"), priorityLevelConfiguration)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec, Symbol("rules"), rules)
        return new(distinguisherMethod, matchingPrecedence, priorityLevelConfiguration, rules, )
    end
end # type IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec

const _property_types_IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec = Dict{Symbol,String}(Symbol("distinguisherMethod")=>"IoK8sApiFlowcontrolV1alpha1FlowDistinguisherMethod", Symbol("matchingPrecedence")=>"Int64", Symbol("priorityLevelConfiguration")=>"IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationReference", Symbol("rules")=>"Vector{IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects}", )
OpenAPI.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec[name]))}

function check_required(o::IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec)
    o.priorityLevelConfiguration === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec }, name::Symbol, val)
    if name === Symbol("matchingPrecedence")
        OpenAPI.validate_param(name, "IoK8sApiFlowcontrolV1alpha1FlowSchemaSpec", :format, val, "int32")
    end
end
