# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.NodeSpec
NodeSpec describes the attributes that a node is created with.

    IoK8sApiCoreV1NodeSpec(;
        configSource=nothing,
        externalID=nothing,
        podCIDR=nothing,
        podCIDRs=nothing,
        providerID=nothing,
        taints=nothing,
        unschedulable=nothing,
    )

    - configSource::IoK8sApiCoreV1NodeConfigSource
    - externalID::String : Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
    - podCIDR::String : PodCIDR represents the pod IP range assigned to the node.
    - podCIDRs::Vector{String} : podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
    - providerID::String : ID of the node assigned by the cloud provider in the format: &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;
    - taints::Vector{IoK8sApiCoreV1Taint} : If specified, the node&#39;s taints.
    - unschedulable::Bool : Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
"""
Base.@kwdef mutable struct IoK8sApiCoreV1NodeSpec <: OpenAPI.APIModel
    configSource = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1NodeConfigSource }
    externalID::Union{Nothing, String} = nothing
    podCIDR::Union{Nothing, String} = nothing
    podCIDRs::Union{Nothing, Vector{String}} = nothing
    providerID::Union{Nothing, String} = nothing
    taints::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1Taint} }
    unschedulable::Union{Nothing, Bool} = nothing

    function IoK8sApiCoreV1NodeSpec(configSource, externalID, podCIDR, podCIDRs, providerID, taints, unschedulable, )
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("configSource"), configSource)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("externalID"), externalID)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("podCIDR"), podCIDR)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("podCIDRs"), podCIDRs)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("providerID"), providerID)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("taints"), taints)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSpec, Symbol("unschedulable"), unschedulable)
        return new(configSource, externalID, podCIDR, podCIDRs, providerID, taints, unschedulable, )
    end
end # type IoK8sApiCoreV1NodeSpec

const _property_types_IoK8sApiCoreV1NodeSpec = Dict{Symbol,String}(Symbol("configSource")=>"IoK8sApiCoreV1NodeConfigSource", Symbol("externalID")=>"String", Symbol("podCIDR")=>"String", Symbol("podCIDRs")=>"Vector{String}", Symbol("providerID")=>"String", Symbol("taints")=>"Vector{IoK8sApiCoreV1Taint}", Symbol("unschedulable")=>"Bool", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1NodeSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1NodeSpec[name]))}

function check_required(o::IoK8sApiCoreV1NodeSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1NodeSpec }, name::Symbol, val)
end
