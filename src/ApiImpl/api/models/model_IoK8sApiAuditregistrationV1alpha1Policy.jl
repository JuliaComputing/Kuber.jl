# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.auditregistration.v1alpha1.Policy
Policy defines the configuration of how audit events are logged

    IoK8sApiAuditregistrationV1alpha1Policy(;
        level=nothing,
        stages=nothing,
    )

    - level::String : The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required
    - stages::Vector{String} : Stages is a list of stages for which events are created.
"""
Base.@kwdef mutable struct IoK8sApiAuditregistrationV1alpha1Policy <: OpenAPI.APIModel
    level::Union{Nothing, String} = nothing
    stages::Union{Nothing, Vector{String}} = nothing

    function IoK8sApiAuditregistrationV1alpha1Policy(level, stages, )
        OpenAPI.validate_property(IoK8sApiAuditregistrationV1alpha1Policy, Symbol("level"), level)
        OpenAPI.validate_property(IoK8sApiAuditregistrationV1alpha1Policy, Symbol("stages"), stages)
        return new(level, stages, )
    end
end # type IoK8sApiAuditregistrationV1alpha1Policy

const _property_types_IoK8sApiAuditregistrationV1alpha1Policy = Dict{Symbol,String}(Symbol("level")=>"String", Symbol("stages")=>"Vector{String}", )
OpenAPI.property_type(::Type{ IoK8sApiAuditregistrationV1alpha1Policy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuditregistrationV1alpha1Policy[name]))}

function check_required(o::IoK8sApiAuditregistrationV1alpha1Policy)
    o.level === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuditregistrationV1alpha1Policy }, name::Symbol, val)
end
