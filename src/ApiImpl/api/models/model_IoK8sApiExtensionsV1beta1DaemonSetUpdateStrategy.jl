# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.extensions.v1beta1.DaemonSetUpdateStrategy

    IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy(;
        rollingUpdate=nothing,
        type=nothing,
    )

    - rollingUpdate::IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet
    - type::String : Type of daemon set update. Can be \&quot;RollingUpdate\&quot; or \&quot;OnDelete\&quot;. Default is OnDelete.
"""
Base.@kwdef mutable struct IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy <: OpenAPI.APIModel
    rollingUpdate = nothing # spec type: Union{ Nothing, IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet }
    type::Union{Nothing, String} = nothing

    function IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy(rollingUpdate, type, )
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy, Symbol("rollingUpdate"), rollingUpdate)
        OpenAPI.validate_property(IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy, Symbol("type"), type)
        return new(rollingUpdate, type, )
    end
end # type IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy

const _property_types_IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy = Dict{Symbol,String}(Symbol("rollingUpdate")=>"IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy[name]))}

function check_required(o::IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy }, name::Symbol, val)
end
