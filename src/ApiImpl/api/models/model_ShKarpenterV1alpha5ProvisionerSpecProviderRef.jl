# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""sh_karpenter_v1alpha5_Provisioner_spec_providerRef
ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options

    ShKarpenterV1alpha5ProvisionerSpecProviderRef(;
        apiVersion=nothing,
        kind=nothing,
        name=nothing,
    )

    - apiVersion::String : API version of the referent
    - kind::String : Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\&quot;
    - name::String : Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
"""
Base.@kwdef mutable struct ShKarpenterV1alpha5ProvisionerSpecProviderRef <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    kind::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function ShKarpenterV1alpha5ProvisionerSpecProviderRef(apiVersion, kind, name, )
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecProviderRef, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecProviderRef, Symbol("kind"), kind)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecProviderRef, Symbol("name"), name)
        return new(apiVersion, kind, name, )
    end
end # type ShKarpenterV1alpha5ProvisionerSpecProviderRef

const _property_types_ShKarpenterV1alpha5ProvisionerSpecProviderRef = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("kind")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ ShKarpenterV1alpha5ProvisionerSpecProviderRef }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerSpecProviderRef[name]))}

function check_required(o::ShKarpenterV1alpha5ProvisionerSpecProviderRef)
    true
end

function OpenAPI.validate_property(::Type{ ShKarpenterV1alpha5ProvisionerSpecProviderRef }, name::Symbol, val)
end
