# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ConfigMap
ConfigMap holds configuration data for pods to consume.

    IoK8sApiCoreV1ConfigMap(;
        apiVersion=nothing,
        binaryData=nothing,
        data=nothing,
        kind=nothing,
        metadata=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - binaryData::Dict{String, Vector{UInt8}} : BinaryData contains the binary data. Each key must consist of alphanumeric characters, &#39;-&#39;, &#39;_&#39; or &#39;.&#39;. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
    - data::Dict{String, String} : Data contains the configuration data. Each key must consist of alphanumeric characters, &#39;-&#39;, &#39;_&#39; or &#39;.&#39;. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ConfigMap <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    binaryData::Union{Nothing, Dict{String, Vector{UInt8}}} = nothing
    data::Union{Nothing, Dict{String, String}} = nothing
    kind::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }

    function IoK8sApiCoreV1ConfigMap(apiVersion, binaryData, data, kind, metadata, )
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMap, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMap, Symbol("binaryData"), binaryData)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMap, Symbol("data"), data)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMap, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiCoreV1ConfigMap, Symbol("metadata"), metadata)
        return new(apiVersion, binaryData, data, kind, metadata, )
    end
end # type IoK8sApiCoreV1ConfigMap

const _property_types_IoK8sApiCoreV1ConfigMap = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("binaryData")=>"Dict{String, Vector{UInt8}}", Symbol("data")=>"Dict{String, String}", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ConfigMap }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ConfigMap[name]))}

function check_required(o::IoK8sApiCoreV1ConfigMap)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ConfigMap }, name::Symbol, val)
end
