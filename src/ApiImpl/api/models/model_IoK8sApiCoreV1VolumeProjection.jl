# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.VolumeProjection
Projection that may be projected along with other supported volume types

    IoK8sApiCoreV1VolumeProjection(;
        configMap=nothing,
        downwardAPI=nothing,
        secret=nothing,
        serviceAccountToken=nothing,
    )

    - configMap::IoK8sApiCoreV1ConfigMapProjection
    - downwardAPI::IoK8sApiCoreV1DownwardAPIProjection
    - secret::IoK8sApiCoreV1SecretProjection
    - serviceAccountToken::IoK8sApiCoreV1ServiceAccountTokenProjection
"""
Base.@kwdef mutable struct IoK8sApiCoreV1VolumeProjection <: OpenAPI.APIModel
    configMap = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapProjection }
    downwardAPI = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1DownwardAPIProjection }
    secret = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretProjection }
    serviceAccountToken = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ServiceAccountTokenProjection }

    function IoK8sApiCoreV1VolumeProjection(configMap, downwardAPI, secret, serviceAccountToken, )
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("configMap"), configMap)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("downwardAPI"), downwardAPI)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("secret"), secret)
        OpenAPI.validate_property(IoK8sApiCoreV1VolumeProjection, Symbol("serviceAccountToken"), serviceAccountToken)
        return new(configMap, downwardAPI, secret, serviceAccountToken, )
    end
end # type IoK8sApiCoreV1VolumeProjection

const _property_types_IoK8sApiCoreV1VolumeProjection = Dict{Symbol,String}(Symbol("configMap")=>"IoK8sApiCoreV1ConfigMapProjection", Symbol("downwardAPI")=>"IoK8sApiCoreV1DownwardAPIProjection", Symbol("secret")=>"IoK8sApiCoreV1SecretProjection", Symbol("serviceAccountToken")=>"IoK8sApiCoreV1ServiceAccountTokenProjection", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1VolumeProjection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1VolumeProjection[name]))}

function check_required(o::IoK8sApiCoreV1VolumeProjection)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1VolumeProjection }, name::Symbol, val)
end
