# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus
PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.

    IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus(;
        currentHealthy=nothing,
        desiredHealthy=nothing,
        disruptedPods=nothing,
        disruptionsAllowed=nothing,
        expectedPods=nothing,
        observedGeneration=nothing,
    )

    - currentHealthy::Int64 : current number of healthy pods
    - desiredHealthy::Int64 : minimum desired number of healthy pods
    - disruptedPods::Dict{String, ZonedDateTime} : DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn&#39;t occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
    - disruptionsAllowed::Int64 : Number of pod disruptions that are currently allowed.
    - expectedPods::Int64 : total number of pods counted by this disruption budget
    - observedGeneration::Int64 : Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB&#39;s object generation.
"""
Base.@kwdef mutable struct IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus <: OpenAPI.APIModel
    currentHealthy::Union{Nothing, Int64} = nothing
    desiredHealthy::Union{Nothing, Int64} = nothing
    disruptedPods::Union{Nothing, Dict{String, ZonedDateTime}} = nothing
    disruptionsAllowed::Union{Nothing, Int64} = nothing
    expectedPods::Union{Nothing, Int64} = nothing
    observedGeneration::Union{Nothing, Int64} = nothing

    function IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus(currentHealthy, desiredHealthy, disruptedPods, disruptionsAllowed, expectedPods, observedGeneration, )
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("currentHealthy"), currentHealthy)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("desiredHealthy"), desiredHealthy)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("disruptedPods"), disruptedPods)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("disruptionsAllowed"), disruptionsAllowed)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("expectedPods"), expectedPods)
        OpenAPI.validate_property(IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus, Symbol("observedGeneration"), observedGeneration)
        return new(currentHealthy, desiredHealthy, disruptedPods, disruptionsAllowed, expectedPods, observedGeneration, )
    end
end # type IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus

const _property_types_IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus = Dict{Symbol,String}(Symbol("currentHealthy")=>"Int64", Symbol("desiredHealthy")=>"Int64", Symbol("disruptedPods")=>"Dict{String, ZonedDateTime}", Symbol("disruptionsAllowed")=>"Int64", Symbol("expectedPods")=>"Int64", Symbol("observedGeneration")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus[name]))}

function check_required(o::IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus)
    o.currentHealthy === nothing && (return false)
    o.desiredHealthy === nothing && (return false)
    o.disruptionsAllowed === nothing && (return false)
    o.expectedPods === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus }, name::Symbol, val)
    if name === Symbol("currentHealthy")
        OpenAPI.validate_param(name, "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus", :format, val, "int32")
    end
    if name === Symbol("desiredHealthy")
        OpenAPI.validate_param(name, "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus", :format, val, "int32")
    end
    if name === Symbol("disruptionsAllowed")
        OpenAPI.validate_param(name, "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus", :format, val, "int32")
    end
    if name === Symbol("expectedPods")
        OpenAPI.validate_param(name, "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus", :format, val, "int32")
    end
    if name === Symbol("observedGeneration")
        OpenAPI.validate_param(name, "IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus", :format, val, "int64")
    end
end
