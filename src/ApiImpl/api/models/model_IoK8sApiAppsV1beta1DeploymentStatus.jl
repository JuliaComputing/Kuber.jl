# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.apps.v1beta1.DeploymentStatus
DeploymentStatus is the most recently observed status of the Deployment.

    IoK8sApiAppsV1beta1DeploymentStatus(;
        availableReplicas=nothing,
        collisionCount=nothing,
        conditions=nothing,
        observedGeneration=nothing,
        readyReplicas=nothing,
        replicas=nothing,
        unavailableReplicas=nothing,
        updatedReplicas=nothing,
    )

    - availableReplicas::Int64 : Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    - collisionCount::Int64 : Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    - conditions::Vector{IoK8sApiAppsV1beta1DeploymentCondition} : Represents the latest available observations of a deployment&#39;s current state.
    - observedGeneration::Int64 : The generation observed by the deployment controller.
    - readyReplicas::Int64 : Total number of ready pods targeted by this deployment.
    - replicas::Int64 : Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    - unavailableReplicas::Int64 : Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    - updatedReplicas::Int64 : Total number of non-terminated pods targeted by this deployment that have the desired template spec.
"""
Base.@kwdef mutable struct IoK8sApiAppsV1beta1DeploymentStatus <: OpenAPI.APIModel
    availableReplicas::Union{Nothing, Int64} = nothing
    collisionCount::Union{Nothing, Int64} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiAppsV1beta1DeploymentCondition} }
    observedGeneration::Union{Nothing, Int64} = nothing
    readyReplicas::Union{Nothing, Int64} = nothing
    replicas::Union{Nothing, Int64} = nothing
    unavailableReplicas::Union{Nothing, Int64} = nothing
    updatedReplicas::Union{Nothing, Int64} = nothing

    function IoK8sApiAppsV1beta1DeploymentStatus(availableReplicas, collisionCount, conditions, observedGeneration, readyReplicas, replicas, unavailableReplicas, updatedReplicas, )
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("availableReplicas"), availableReplicas)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("collisionCount"), collisionCount)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("observedGeneration"), observedGeneration)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("readyReplicas"), readyReplicas)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("replicas"), replicas)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("unavailableReplicas"), unavailableReplicas)
        OpenAPI.validate_property(IoK8sApiAppsV1beta1DeploymentStatus, Symbol("updatedReplicas"), updatedReplicas)
        return new(availableReplicas, collisionCount, conditions, observedGeneration, readyReplicas, replicas, unavailableReplicas, updatedReplicas, )
    end
end # type IoK8sApiAppsV1beta1DeploymentStatus

const _property_types_IoK8sApiAppsV1beta1DeploymentStatus = Dict{Symbol,String}(Symbol("availableReplicas")=>"Int64", Symbol("collisionCount")=>"Int64", Symbol("conditions")=>"Vector{IoK8sApiAppsV1beta1DeploymentCondition}", Symbol("observedGeneration")=>"Int64", Symbol("readyReplicas")=>"Int64", Symbol("replicas")=>"Int64", Symbol("unavailableReplicas")=>"Int64", Symbol("updatedReplicas")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAppsV1beta1DeploymentStatus[name]))}

function check_required(o::IoK8sApiAppsV1beta1DeploymentStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAppsV1beta1DeploymentStatus }, name::Symbol, val)
    if name === Symbol("availableReplicas")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
    if name === Symbol("collisionCount")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
    if name === Symbol("observedGeneration")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int64")
    end
    if name === Symbol("readyReplicas")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
    if name === Symbol("replicas")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
    if name === Symbol("unavailableReplicas")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
    if name === Symbol("updatedReplicas")
        OpenAPI.validate_param(name, "IoK8sApiAppsV1beta1DeploymentStatus", :format, val, "int32")
    end
end
