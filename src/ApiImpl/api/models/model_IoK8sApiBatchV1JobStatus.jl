# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.batch.v1.JobStatus
JobStatus represents the current state of a Job.

    IoK8sApiBatchV1JobStatus(;
        active=nothing,
        completionTime=nothing,
        conditions=nothing,
        failed=nothing,
        startTime=nothing,
        succeeded=nothing,
    )

    - active::Int64 : The number of actively running pods.
    - completionTime::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - conditions::Vector{IoK8sApiBatchV1JobCondition} : The latest available observations of an object&#39;s current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    - failed::Int64 : The number of pods which reached phase Failed.
    - startTime::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - succeeded::Int64 : The number of pods which reached phase Succeeded.
"""
Base.@kwdef mutable struct IoK8sApiBatchV1JobStatus <: OpenAPI.APIModel
    active::Union{Nothing, Int64} = nothing
    completionTime::Union{Nothing, ZonedDateTime} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiBatchV1JobCondition} }
    failed::Union{Nothing, Int64} = nothing
    startTime::Union{Nothing, ZonedDateTime} = nothing
    succeeded::Union{Nothing, Int64} = nothing

    function IoK8sApiBatchV1JobStatus(active, completionTime, conditions, failed, startTime, succeeded, )
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("active"), active)
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("completionTime"), completionTime)
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("conditions"), conditions)
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("failed"), failed)
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("startTime"), startTime)
        OpenAPI.validate_property(IoK8sApiBatchV1JobStatus, Symbol("succeeded"), succeeded)
        return new(active, completionTime, conditions, failed, startTime, succeeded, )
    end
end # type IoK8sApiBatchV1JobStatus

const _property_types_IoK8sApiBatchV1JobStatus = Dict{Symbol,String}(Symbol("active")=>"Int64", Symbol("completionTime")=>"ZonedDateTime", Symbol("conditions")=>"Vector{IoK8sApiBatchV1JobCondition}", Symbol("failed")=>"Int64", Symbol("startTime")=>"ZonedDateTime", Symbol("succeeded")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiBatchV1JobStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiBatchV1JobStatus[name]))}

function check_required(o::IoK8sApiBatchV1JobStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiBatchV1JobStatus }, name::Symbol, val)
    if name === Symbol("active")
        OpenAPI.validate_param(name, "IoK8sApiBatchV1JobStatus", :format, val, "int32")
    end
    if name === Symbol("completionTime")
        OpenAPI.validate_param(name, "IoK8sApiBatchV1JobStatus", :format, val, "date-time")
    end
    if name === Symbol("failed")
        OpenAPI.validate_param(name, "IoK8sApiBatchV1JobStatus", :format, val, "int32")
    end
    if name === Symbol("startTime")
        OpenAPI.validate_param(name, "IoK8sApiBatchV1JobStatus", :format, val, "date-time")
    end
    if name === Symbol("succeeded")
        OpenAPI.validate_param(name, "IoK8sApiBatchV1JobStatus", :format, val, "int32")
    end
end
