# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus

    IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus(;
        certificate=nothing,
        conditions=nothing,
    )

    - certificate::Vector{UInt8} : If request was approved, the controller will place the issued certificate here.
    - conditions::Vector{IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition} : Conditions applied to the request, such as approval or denial.
"""
Base.@kwdef mutable struct IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus <: OpenAPI.APIModel
    certificate::Union{Nothing, Vector{UInt8}} = nothing
    conditions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition} }

    function IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus(certificate, conditions, )
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus, Symbol("certificate"), certificate)
        OpenAPI.validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus, Symbol("conditions"), conditions)
        return new(certificate, conditions, )
    end
end # type IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus

const _property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus = Dict{Symbol,String}(Symbol("certificate")=>"Vector{UInt8}", Symbol("conditions")=>"Vector{IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition}", )
OpenAPI.property_type(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus[name]))}

function check_required(o::IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus }, name::Symbol, val)
    if name === Symbol("certificate")
        OpenAPI.validate_param(name, "IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus", :format, val, "byte")
    end
    if name === Symbol("certificate")
        OpenAPI.validate_param(name, "IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus", :pattern, val, r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$")
    end
end
