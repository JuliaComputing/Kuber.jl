# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.CSIPersistentVolumeSource
Represents storage that is managed by an external CSI volume driver (Beta feature)

    IoK8sApiCoreV1CSIPersistentVolumeSource(;
        controllerExpandSecretRef=nothing,
        controllerPublishSecretRef=nothing,
        driver=nothing,
        fsType=nothing,
        nodePublishSecretRef=nothing,
        nodeStageSecretRef=nothing,
        readOnly=nothing,
        volumeAttributes=nothing,
        volumeHandle=nothing,
    )

    - controllerExpandSecretRef::IoK8sApiCoreV1SecretReference
    - controllerPublishSecretRef::IoK8sApiCoreV1SecretReference
    - driver::String : Driver is the name of the driver to use for this volume. Required.
    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;.
    - nodePublishSecretRef::IoK8sApiCoreV1SecretReference
    - nodeStageSecretRef::IoK8sApiCoreV1SecretReference
    - readOnly::Bool : Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
    - volumeAttributes::Dict{String, String} : Attributes of the volume to publish.
    - volumeHandle::String : VolumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1CSIPersistentVolumeSource <: OpenAPI.APIModel
    controllerExpandSecretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }
    controllerPublishSecretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }
    driver::Union{Nothing, String} = nothing
    fsType::Union{Nothing, String} = nothing
    nodePublishSecretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }
    nodeStageSecretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }
    readOnly::Union{Nothing, Bool} = nothing
    volumeAttributes::Union{Nothing, Dict{String, String}} = nothing
    volumeHandle::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1CSIPersistentVolumeSource(controllerExpandSecretRef, controllerPublishSecretRef, driver, fsType, nodePublishSecretRef, nodeStageSecretRef, readOnly, volumeAttributes, volumeHandle, )
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("controllerExpandSecretRef"), controllerExpandSecretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("controllerPublishSecretRef"), controllerPublishSecretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("driver"), driver)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("nodePublishSecretRef"), nodePublishSecretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("nodeStageSecretRef"), nodeStageSecretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("volumeAttributes"), volumeAttributes)
        OpenAPI.validate_property(IoK8sApiCoreV1CSIPersistentVolumeSource, Symbol("volumeHandle"), volumeHandle)
        return new(controllerExpandSecretRef, controllerPublishSecretRef, driver, fsType, nodePublishSecretRef, nodeStageSecretRef, readOnly, volumeAttributes, volumeHandle, )
    end
end # type IoK8sApiCoreV1CSIPersistentVolumeSource

const _property_types_IoK8sApiCoreV1CSIPersistentVolumeSource = Dict{Symbol,String}(Symbol("controllerExpandSecretRef")=>"IoK8sApiCoreV1SecretReference", Symbol("controllerPublishSecretRef")=>"IoK8sApiCoreV1SecretReference", Symbol("driver")=>"String", Symbol("fsType")=>"String", Symbol("nodePublishSecretRef")=>"IoK8sApiCoreV1SecretReference", Symbol("nodeStageSecretRef")=>"IoK8sApiCoreV1SecretReference", Symbol("readOnly")=>"Bool", Symbol("volumeAttributes")=>"Dict{String, String}", Symbol("volumeHandle")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1CSIPersistentVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1CSIPersistentVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1CSIPersistentVolumeSource)
    o.driver === nothing && (return false)
    o.volumeHandle === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1CSIPersistentVolumeSource }, name::Symbol, val)
end
