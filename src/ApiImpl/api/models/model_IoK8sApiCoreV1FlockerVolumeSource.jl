# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.FlockerVolumeSource
Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.

    IoK8sApiCoreV1FlockerVolumeSource(;
        datasetName=nothing,
        datasetUUID=nothing,
    )

    - datasetName::String : Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated
    - datasetUUID::String : UUID of the dataset. This is unique identifier of a Flocker dataset
"""
Base.@kwdef mutable struct IoK8sApiCoreV1FlockerVolumeSource <: OpenAPI.APIModel
    datasetName::Union{Nothing, String} = nothing
    datasetUUID::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1FlockerVolumeSource(datasetName, datasetUUID, )
        OpenAPI.validate_property(IoK8sApiCoreV1FlockerVolumeSource, Symbol("datasetName"), datasetName)
        OpenAPI.validate_property(IoK8sApiCoreV1FlockerVolumeSource, Symbol("datasetUUID"), datasetUUID)
        return new(datasetName, datasetUUID, )
    end
end # type IoK8sApiCoreV1FlockerVolumeSource

const _property_types_IoK8sApiCoreV1FlockerVolumeSource = Dict{Symbol,String}(Symbol("datasetName")=>"String", Symbol("datasetUUID")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1FlockerVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1FlockerVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1FlockerVolumeSource)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1FlockerVolumeSource }, name::Symbol, val)
end
