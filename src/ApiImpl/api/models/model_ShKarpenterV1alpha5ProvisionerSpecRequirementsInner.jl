# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""sh_karpenter_v1alpha5_Provisioner_spec_requirements_inner
A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    ShKarpenterV1alpha5ProvisionerSpecRequirementsInner(;
        key=nothing,
        operator=nothing,
        values=nothing,
    )

    - key::String : The label key that the selector applies to.
    - operator::String : Represents a key&#39;s relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    - values::Vector{String} : An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
"""
Base.@kwdef mutable struct ShKarpenterV1alpha5ProvisionerSpecRequirementsInner <: OpenAPI.APIModel
    key::Union{Nothing, String} = nothing
    operator::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector{String}} = nothing

    function ShKarpenterV1alpha5ProvisionerSpecRequirementsInner(key, operator, values, )
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecRequirementsInner, Symbol("key"), key)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecRequirementsInner, Symbol("operator"), operator)
        OpenAPI.validate_property(ShKarpenterV1alpha5ProvisionerSpecRequirementsInner, Symbol("values"), values)
        return new(key, operator, values, )
    end
end # type ShKarpenterV1alpha5ProvisionerSpecRequirementsInner

const _property_types_ShKarpenterV1alpha5ProvisionerSpecRequirementsInner = Dict{Symbol,String}(Symbol("key")=>"String", Symbol("operator")=>"String", Symbol("values")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ShKarpenterV1alpha5ProvisionerSpecRequirementsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerSpecRequirementsInner[name]))}

function check_required(o::ShKarpenterV1alpha5ProvisionerSpecRequirementsInner)
    o.key === nothing && (return false)
    o.operator === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ShKarpenterV1alpha5ProvisionerSpecRequirementsInner }, name::Symbol, val)
end
