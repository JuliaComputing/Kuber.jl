# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects
PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.

    IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects(;
        nonResourceRules=nothing,
        resourceRules=nothing,
        subjects=nothing,
    )

    - nonResourceRules::Vector{IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule} : &#x60;nonResourceRules&#x60; is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
    - resourceRules::Vector{IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule} : &#x60;resourceRules&#x60; is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of &#x60;resourceRules&#x60; and &#x60;nonResourceRules&#x60; has to be non-empty.
    - subjects::Vector{IoK8sApiFlowcontrolV1alpha1Subject} : subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
"""
Base.@kwdef mutable struct IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects <: OpenAPI.APIModel
    nonResourceRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule} }
    resourceRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule} }
    subjects::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiFlowcontrolV1alpha1Subject} }

    function IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects(nonResourceRules, resourceRules, subjects, )
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects, Symbol("nonResourceRules"), nonResourceRules)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects, Symbol("resourceRules"), resourceRules)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects, Symbol("subjects"), subjects)
        return new(nonResourceRules, resourceRules, subjects, )
    end
end # type IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects

const _property_types_IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects = Dict{Symbol,String}(Symbol("nonResourceRules")=>"Vector{IoK8sApiFlowcontrolV1alpha1NonResourcePolicyRule}", Symbol("resourceRules")=>"Vector{IoK8sApiFlowcontrolV1alpha1ResourcePolicyRule}", Symbol("subjects")=>"Vector{IoK8sApiFlowcontrolV1alpha1Subject}", )
OpenAPI.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects[name]))}

function check_required(o::IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects)
    o.subjects === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1PolicyRulesWithSubjects }, name::Symbol, val)
end
