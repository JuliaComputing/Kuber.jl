# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ServicePort
ServicePort contains information on service&#39;s port.

    IoK8sApiCoreV1ServicePort(;
        name=nothing,
        nodePort=nothing,
        port=nothing,
        protocol=nothing,
        targetPort=nothing,
    )

    - name::String : The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the &#39;name&#39; field in the EndpointPort. Optional if only one ServicePort is defined on this service.
    - nodePort::Int64 : The port on each node on which this service is exposed when type&#x3D;NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    - port::Int64 : The port that will be exposed by this service.
    - protocol::String : The IP protocol for this port. Supports \&quot;TCP\&quot;, \&quot;UDP\&quot;, and \&quot;SCTP\&quot;. Default is TCP.
    - targetPort::String : IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ServicePort <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    nodePort::Union{Nothing, Int64} = nothing
    port::Union{Nothing, Int64} = nothing
    protocol::Union{Nothing, String} = nothing
    targetPort::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1ServicePort(name, nodePort, port, protocol, targetPort, )
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("nodePort"), nodePort)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("port"), port)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("protocol"), protocol)
        OpenAPI.validate_property(IoK8sApiCoreV1ServicePort, Symbol("targetPort"), targetPort)
        return new(name, nodePort, port, protocol, targetPort, )
    end
end # type IoK8sApiCoreV1ServicePort

const _property_types_IoK8sApiCoreV1ServicePort = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("nodePort")=>"Int64", Symbol("port")=>"Int64", Symbol("protocol")=>"String", Symbol("targetPort")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ServicePort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ServicePort[name]))}

function check_required(o::IoK8sApiCoreV1ServicePort)
    o.port === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ServicePort }, name::Symbol, val)
    if name === Symbol("nodePort")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ServicePort", :format, val, "int32")
    end
    if name === Symbol("port")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ServicePort", :format, val, "int32")
    end
    if name === Symbol("targetPort")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ServicePort", :format, val, "int-or-string")
    end
end
