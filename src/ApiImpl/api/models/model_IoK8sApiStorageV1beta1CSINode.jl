# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.storage.v1beta1.CSINode
DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn&#39;t create this object. CSINode has an OwnerReference that points to the corresponding node object.

    IoK8sApiStorageV1beta1CSINode(;
        apiVersion=nothing,
        kind=nothing,
        metadata=nothing,
        spec=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - spec::IoK8sApiStorageV1beta1CSINodeSpec
"""
Base.@kwdef mutable struct IoK8sApiStorageV1beta1CSINode <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    kind::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    spec = nothing # spec type: Union{ Nothing, IoK8sApiStorageV1beta1CSINodeSpec }

    function IoK8sApiStorageV1beta1CSINode(apiVersion, kind, metadata, spec, )
        OpenAPI.validate_property(IoK8sApiStorageV1beta1CSINode, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiStorageV1beta1CSINode, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiStorageV1beta1CSINode, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoK8sApiStorageV1beta1CSINode, Symbol("spec"), spec)
        return new(apiVersion, kind, metadata, spec, )
    end
end # type IoK8sApiStorageV1beta1CSINode

const _property_types_IoK8sApiStorageV1beta1CSINode = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("spec")=>"IoK8sApiStorageV1beta1CSINodeSpec", )
OpenAPI.property_type(::Type{ IoK8sApiStorageV1beta1CSINode }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiStorageV1beta1CSINode[name]))}

function check_required(o::IoK8sApiStorageV1beta1CSINode)
    o.spec === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiStorageV1beta1CSINode }, name::Symbol, val)
end
