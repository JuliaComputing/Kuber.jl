# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.GitRepoVolumeSource
Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&#39;s container.

    IoK8sApiCoreV1GitRepoVolumeSource(;
        directory=nothing,
        repository=nothing,
        revision=nothing,
    )

    - directory::String : Target directory name. Must not contain or start with &#39;..&#39;.  If &#39;.&#39; is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    - repository::String : Repository URL
    - revision::String : Commit hash for the specified revision.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1GitRepoVolumeSource <: OpenAPI.APIModel
    directory::Union{Nothing, String} = nothing
    repository::Union{Nothing, String} = nothing
    revision::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1GitRepoVolumeSource(directory, repository, revision, )
        OpenAPI.validate_property(IoK8sApiCoreV1GitRepoVolumeSource, Symbol("directory"), directory)
        OpenAPI.validate_property(IoK8sApiCoreV1GitRepoVolumeSource, Symbol("repository"), repository)
        OpenAPI.validate_property(IoK8sApiCoreV1GitRepoVolumeSource, Symbol("revision"), revision)
        return new(directory, repository, revision, )
    end
end # type IoK8sApiCoreV1GitRepoVolumeSource

const _property_types_IoK8sApiCoreV1GitRepoVolumeSource = Dict{Symbol,String}(Symbol("directory")=>"String", Symbol("repository")=>"String", Symbol("revision")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1GitRepoVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1GitRepoVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1GitRepoVolumeSource)
    o.repository === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1GitRepoVolumeSource }, name::Symbol, val)
end
