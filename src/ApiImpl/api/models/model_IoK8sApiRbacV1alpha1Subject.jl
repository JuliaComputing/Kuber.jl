# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.rbac.v1alpha1.Subject
Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.

    IoK8sApiRbacV1alpha1Subject(;
        apiVersion=nothing,
        kind=nothing,
        name=nothing,
        namespace=nothing,
    )

    - apiVersion::String : APIVersion holds the API group and version of the referenced subject. Defaults to \&quot;v1\&quot; for ServiceAccount subjects. Defaults to \&quot;rbac.authorization.k8s.io/v1alpha1\&quot; for User and Group subjects.
    - kind::String : Kind of object being referenced. Values defined by this API group are \&quot;User\&quot;, \&quot;Group\&quot;, and \&quot;ServiceAccount\&quot;. If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    - name::String : Name of the object being referenced.
    - namespace::String : Namespace of the referenced object.  If the object kind is non-namespace, such as \&quot;User\&quot; or \&quot;Group\&quot;, and this value is not empty the Authorizer should report an error.
"""
Base.@kwdef mutable struct IoK8sApiRbacV1alpha1Subject <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    kind::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing

    function IoK8sApiRbacV1alpha1Subject(apiVersion, kind, name, namespace, )
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1Subject, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1Subject, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1Subject, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1Subject, Symbol("namespace"), namespace)
        return new(apiVersion, kind, name, namespace, )
    end
end # type IoK8sApiRbacV1alpha1Subject

const _property_types_IoK8sApiRbacV1alpha1Subject = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("kind")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiRbacV1alpha1Subject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiRbacV1alpha1Subject[name]))}

function check_required(o::IoK8sApiRbacV1alpha1Subject)
    o.kind === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiRbacV1alpha1Subject }, name::Symbol, val)
end
