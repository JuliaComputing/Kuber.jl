# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.flowcontrol.v1alpha1.LimitResponse
LimitResponse defines how to handle requests that can not be executed right now.

    IoK8sApiFlowcontrolV1alpha1LimitResponse(;
        queuing=nothing,
        type=nothing,
    )

    - queuing::IoK8sApiFlowcontrolV1alpha1QueuingConfiguration
    - type::String : &#x60;type&#x60; is \&quot;Queue\&quot; or \&quot;Reject\&quot;. \&quot;Queue\&quot; means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \&quot;Reject\&quot; means that requests that can not be executed upon arrival are rejected. Required.
"""
Base.@kwdef mutable struct IoK8sApiFlowcontrolV1alpha1LimitResponse <: OpenAPI.APIModel
    queuing = nothing # spec type: Union{ Nothing, IoK8sApiFlowcontrolV1alpha1QueuingConfiguration }
    type::Union{Nothing, String} = nothing

    function IoK8sApiFlowcontrolV1alpha1LimitResponse(queuing, type, )
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1LimitResponse, Symbol("queuing"), queuing)
        OpenAPI.validate_property(IoK8sApiFlowcontrolV1alpha1LimitResponse, Symbol("type"), type)
        return new(queuing, type, )
    end
end # type IoK8sApiFlowcontrolV1alpha1LimitResponse

const _property_types_IoK8sApiFlowcontrolV1alpha1LimitResponse = Dict{Symbol,String}(Symbol("queuing")=>"IoK8sApiFlowcontrolV1alpha1QueuingConfiguration", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiFlowcontrolV1alpha1LimitResponse[name]))}

function check_required(o::IoK8sApiFlowcontrolV1alpha1LimitResponse)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiFlowcontrolV1alpha1LimitResponse }, name::Symbol, val)
end
