# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PortworxVolumeSource
PortworxVolumeSource represents a Portworx volume resource.

    IoK8sApiCoreV1PortworxVolumeSource(;
        fsType=nothing,
        readOnly=nothing,
        volumeID=nothing,
    )

    - fsType::String : FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - readOnly::Bool : Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - volumeID::String : VolumeID uniquely identifies a Portworx volume
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PortworxVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    volumeID::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1PortworxVolumeSource(fsType, readOnly, volumeID, )
        OpenAPI.validate_property(IoK8sApiCoreV1PortworxVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1PortworxVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1PortworxVolumeSource, Symbol("volumeID"), volumeID)
        return new(fsType, readOnly, volumeID, )
    end
end # type IoK8sApiCoreV1PortworxVolumeSource

const _property_types_IoK8sApiCoreV1PortworxVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("readOnly")=>"Bool", Symbol("volumeID")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PortworxVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PortworxVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1PortworxVolumeSource)
    o.volumeID === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PortworxVolumeSource }, name::Symbol, val)
end
