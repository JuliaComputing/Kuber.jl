# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PersistentVolumeClaimSpec
PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes

    IoK8sApiCoreV1PersistentVolumeClaimSpec(;
        accessModes=nothing,
        dataSource=nothing,
        resources=nothing,
        selector=nothing,
        storageClassName=nothing,
        volumeMode=nothing,
        volumeName=nothing,
    )

    - accessModes::Vector{String} : AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    - dataSource::IoK8sApiCoreV1TypedLocalObjectReference
    - resources::IoK8sApiCoreV1ResourceRequirements
    - selector::IoK8sApimachineryPkgApisMetaV1LabelSelector
    - storageClassName::String : Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    - volumeMode::String : volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.
    - volumeName::String : VolumeName is the binding reference to the PersistentVolume backing this claim.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PersistentVolumeClaimSpec <: OpenAPI.APIModel
    accessModes::Union{Nothing, Vector{String}} = nothing
    dataSource = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1TypedLocalObjectReference }
    resources = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ResourceRequirements }
    selector = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1LabelSelector }
    storageClassName::Union{Nothing, String} = nothing
    volumeMode::Union{Nothing, String} = nothing
    volumeName::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1PersistentVolumeClaimSpec(accessModes, dataSource, resources, selector, storageClassName, volumeMode, volumeName, )
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("accessModes"), accessModes)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("dataSource"), dataSource)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("resources"), resources)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("selector"), selector)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("storageClassName"), storageClassName)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("volumeMode"), volumeMode)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimSpec, Symbol("volumeName"), volumeName)
        return new(accessModes, dataSource, resources, selector, storageClassName, volumeMode, volumeName, )
    end
end # type IoK8sApiCoreV1PersistentVolumeClaimSpec

const _property_types_IoK8sApiCoreV1PersistentVolumeClaimSpec = Dict{Symbol,String}(Symbol("accessModes")=>"Vector{String}", Symbol("dataSource")=>"IoK8sApiCoreV1TypedLocalObjectReference", Symbol("resources")=>"IoK8sApiCoreV1ResourceRequirements", Symbol("selector")=>"IoK8sApimachineryPkgApisMetaV1LabelSelector", Symbol("storageClassName")=>"String", Symbol("volumeMode")=>"String", Symbol("volumeName")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PersistentVolumeClaimSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PersistentVolumeClaimSpec[name]))}

function check_required(o::IoK8sApiCoreV1PersistentVolumeClaimSpec)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PersistentVolumeClaimSpec }, name::Symbol, val)
end
