# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.rbac.v1alpha1.ClusterRole
ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20.

    IoK8sApiRbacV1alpha1ClusterRole(;
        aggregationRule=nothing,
        apiVersion=nothing,
        kind=nothing,
        metadata=nothing,
        rules=nothing,
    )

    - aggregationRule::IoK8sApiRbacV1alpha1AggregationRule
    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - rules::Vector{IoK8sApiRbacV1alpha1PolicyRule} : Rules holds all the PolicyRules for this ClusterRole
"""
Base.@kwdef mutable struct IoK8sApiRbacV1alpha1ClusterRole <: OpenAPI.APIModel
    aggregationRule = nothing # spec type: Union{ Nothing, IoK8sApiRbacV1alpha1AggregationRule }
    apiVersion::Union{Nothing, String} = nothing
    kind::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta }
    rules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiRbacV1alpha1PolicyRule} }

    function IoK8sApiRbacV1alpha1ClusterRole(aggregationRule, apiVersion, kind, metadata, rules, )
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1ClusterRole, Symbol("aggregationRule"), aggregationRule)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1ClusterRole, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1ClusterRole, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1ClusterRole, Symbol("metadata"), metadata)
        OpenAPI.validate_property(IoK8sApiRbacV1alpha1ClusterRole, Symbol("rules"), rules)
        return new(aggregationRule, apiVersion, kind, metadata, rules, )
    end
end # type IoK8sApiRbacV1alpha1ClusterRole

const _property_types_IoK8sApiRbacV1alpha1ClusterRole = Dict{Symbol,String}(Symbol("aggregationRule")=>"IoK8sApiRbacV1alpha1AggregationRule", Symbol("apiVersion")=>"String", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("rules")=>"Vector{IoK8sApiRbacV1alpha1PolicyRule}", )
OpenAPI.property_type(::Type{ IoK8sApiRbacV1alpha1ClusterRole }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiRbacV1alpha1ClusterRole[name]))}

function check_required(o::IoK8sApiRbacV1alpha1ClusterRole)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiRbacV1alpha1ClusterRole }, name::Symbol, val)
end
