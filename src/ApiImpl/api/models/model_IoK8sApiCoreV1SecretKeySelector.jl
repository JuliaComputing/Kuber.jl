# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.SecretKeySelector
SecretKeySelector selects a key of a Secret.

    IoK8sApiCoreV1SecretKeySelector(;
        key=nothing,
        name=nothing,
        optional=nothing,
    )

    - key::String : The key of the secret to select from.  Must be a valid secret key.
    - name::String : Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    - optional::Bool : Specify whether the Secret or its key must be defined
"""
Base.@kwdef mutable struct IoK8sApiCoreV1SecretKeySelector <: OpenAPI.APIModel
    key::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    optional::Union{Nothing, Bool} = nothing

    function IoK8sApiCoreV1SecretKeySelector(key, name, optional, )
        OpenAPI.validate_property(IoK8sApiCoreV1SecretKeySelector, Symbol("key"), key)
        OpenAPI.validate_property(IoK8sApiCoreV1SecretKeySelector, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1SecretKeySelector, Symbol("optional"), optional)
        return new(key, name, optional, )
    end
end # type IoK8sApiCoreV1SecretKeySelector

const _property_types_IoK8sApiCoreV1SecretKeySelector = Dict{Symbol,String}(Symbol("key")=>"String", Symbol("name")=>"String", Symbol("optional")=>"Bool", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1SecretKeySelector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1SecretKeySelector[name]))}

function check_required(o::IoK8sApiCoreV1SecretKeySelector)
    o.key === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1SecretKeySelector }, name::Symbol, val)
end
