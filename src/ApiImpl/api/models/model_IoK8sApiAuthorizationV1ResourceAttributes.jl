# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.authorization.v1.ResourceAttributes
ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface

    IoK8sApiAuthorizationV1ResourceAttributes(;
        group=nothing,
        name=nothing,
        namespace=nothing,
        resource=nothing,
        subresource=nothing,
        verb=nothing,
        version=nothing,
    )

    - group::String : Group is the API Group of the Resource.  \&quot;*\&quot; means all.
    - name::String : Name is the name of the resource being requested for a \&quot;get\&quot; or deleted for a \&quot;delete\&quot;. \&quot;\&quot; (empty) means all.
    - namespace::String : Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \&quot;\&quot; (empty) is defaulted for LocalSubjectAccessReviews \&quot;\&quot; (empty) is empty for cluster-scoped resources \&quot;\&quot; (empty) means \&quot;all\&quot; for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    - resource::String : Resource is one of the existing resource types.  \&quot;*\&quot; means all.
    - subresource::String : Subresource is one of the existing resource types.  \&quot;\&quot; means none.
    - verb::String : Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \&quot;*\&quot; means all.
    - version::String : Version is the API Version of the Resource.  \&quot;*\&quot; means all.
"""
Base.@kwdef mutable struct IoK8sApiAuthorizationV1ResourceAttributes <: OpenAPI.APIModel
    group::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    resource::Union{Nothing, String} = nothing
    subresource::Union{Nothing, String} = nothing
    verb::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function IoK8sApiAuthorizationV1ResourceAttributes(group, name, namespace, resource, subresource, verb, version, )
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("group"), group)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("namespace"), namespace)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("resource"), resource)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("subresource"), subresource)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("verb"), verb)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1ResourceAttributes, Symbol("version"), version)
        return new(group, name, namespace, resource, subresource, verb, version, )
    end
end # type IoK8sApiAuthorizationV1ResourceAttributes

const _property_types_IoK8sApiAuthorizationV1ResourceAttributes = Dict{Symbol,String}(Symbol("group")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", Symbol("resource")=>"String", Symbol("subresource")=>"String", Symbol("verb")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthorizationV1ResourceAttributes[name]))}

function check_required(o::IoK8sApiAuthorizationV1ResourceAttributes)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuthorizationV1ResourceAttributes }, name::Symbol, val)
end
