# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.FlexPersistentVolumeSource
FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.

    IoK8sApiCoreV1FlexPersistentVolumeSource(;
        driver=nothing,
        fsType=nothing,
        options=nothing,
        readOnly=nothing,
        secretRef=nothing,
    )

    - driver::String : Driver is the name of the driver to use for this volume.
    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script.
    - options::Dict{String, String} : Optional: Extra command options if any.
    - readOnly::Bool : Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - secretRef::IoK8sApiCoreV1SecretReference
"""
Base.@kwdef mutable struct IoK8sApiCoreV1FlexPersistentVolumeSource <: OpenAPI.APIModel
    driver::Union{Nothing, String} = nothing
    fsType::Union{Nothing, String} = nothing
    options::Union{Nothing, Dict{String, String}} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1SecretReference }

    function IoK8sApiCoreV1FlexPersistentVolumeSource(driver, fsType, options, readOnly, secretRef, )
        OpenAPI.validate_property(IoK8sApiCoreV1FlexPersistentVolumeSource, Symbol("driver"), driver)
        OpenAPI.validate_property(IoK8sApiCoreV1FlexPersistentVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1FlexPersistentVolumeSource, Symbol("options"), options)
        OpenAPI.validate_property(IoK8sApiCoreV1FlexPersistentVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1FlexPersistentVolumeSource, Symbol("secretRef"), secretRef)
        return new(driver, fsType, options, readOnly, secretRef, )
    end
end # type IoK8sApiCoreV1FlexPersistentVolumeSource

const _property_types_IoK8sApiCoreV1FlexPersistentVolumeSource = Dict{Symbol,String}(Symbol("driver")=>"String", Symbol("fsType")=>"String", Symbol("options")=>"Dict{String, String}", Symbol("readOnly")=>"Bool", Symbol("secretRef")=>"IoK8sApiCoreV1SecretReference", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1FlexPersistentVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1FlexPersistentVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1FlexPersistentVolumeSource)
    o.driver === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1FlexPersistentVolumeSource }, name::Symbol, val)
end
