# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.NodeAddress
NodeAddress contains information for the node&#39;s address.

    IoK8sApiCoreV1NodeAddress(;
        address=nothing,
        type=nothing,
    )

    - address::String : The node address.
    - type::String : Node address type, one of Hostname, ExternalIP or InternalIP.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1NodeAddress <: OpenAPI.APIModel
    address::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1NodeAddress(address, type, )
        OpenAPI.validate_property(IoK8sApiCoreV1NodeAddress, Symbol("address"), address)
        OpenAPI.validate_property(IoK8sApiCoreV1NodeAddress, Symbol("type"), type)
        return new(address, type, )
    end
end # type IoK8sApiCoreV1NodeAddress

const _property_types_IoK8sApiCoreV1NodeAddress = Dict{Symbol,String}(Symbol("address")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1NodeAddress }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1NodeAddress[name]))}

function check_required(o::IoK8sApiCoreV1NodeAddress)
    o.address === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1NodeAddress }, name::Symbol, val)
end
