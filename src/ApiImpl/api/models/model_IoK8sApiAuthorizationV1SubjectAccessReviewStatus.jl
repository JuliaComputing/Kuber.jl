# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.authorization.v1.SubjectAccessReviewStatus
SubjectAccessReviewStatus

    IoK8sApiAuthorizationV1SubjectAccessReviewStatus(;
        allowed=nothing,
        denied=nothing,
        evaluationError=nothing,
        reason=nothing,
    )

    - allowed::Bool : Allowed is required. True if the action would be allowed, false otherwise.
    - denied::Bool : Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
    - evaluationError::String : EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    - reason::String : Reason is optional.  It indicates why a request was allowed or denied.
"""
Base.@kwdef mutable struct IoK8sApiAuthorizationV1SubjectAccessReviewStatus <: OpenAPI.APIModel
    allowed::Union{Nothing, Bool} = nothing
    denied::Union{Nothing, Bool} = nothing
    evaluationError::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing

    function IoK8sApiAuthorizationV1SubjectAccessReviewStatus(allowed, denied, evaluationError, reason, )
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewStatus, Symbol("allowed"), allowed)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewStatus, Symbol("denied"), denied)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewStatus, Symbol("evaluationError"), evaluationError)
        OpenAPI.validate_property(IoK8sApiAuthorizationV1SubjectAccessReviewStatus, Symbol("reason"), reason)
        return new(allowed, denied, evaluationError, reason, )
    end
end # type IoK8sApiAuthorizationV1SubjectAccessReviewStatus

const _property_types_IoK8sApiAuthorizationV1SubjectAccessReviewStatus = Dict{Symbol,String}(Symbol("allowed")=>"Bool", Symbol("denied")=>"Bool", Symbol("evaluationError")=>"String", Symbol("reason")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiAuthorizationV1SubjectAccessReviewStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAuthorizationV1SubjectAccessReviewStatus[name]))}

function check_required(o::IoK8sApiAuthorizationV1SubjectAccessReviewStatus)
    o.allowed === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiAuthorizationV1SubjectAccessReviewStatus }, name::Symbol, val)
end
