# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.StorageOSVolumeSource
Represents a StorageOS persistent volume resource.

    IoK8sApiCoreV1StorageOSVolumeSource(;
        fsType=nothing,
        readOnly=nothing,
        secretRef=nothing,
        volumeName=nothing,
        volumeNamespace=nothing,
    )

    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - readOnly::Bool : Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - secretRef::IoK8sApiCoreV1LocalObjectReference
    - volumeName::String : VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    - volumeNamespace::String : VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod&#39;s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \&quot;default\&quot; if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1StorageOSVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing
    secretRef = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1LocalObjectReference }
    volumeName::Union{Nothing, String} = nothing
    volumeNamespace::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1StorageOSVolumeSource(fsType, readOnly, secretRef, volumeName, volumeNamespace, )
        OpenAPI.validate_property(IoK8sApiCoreV1StorageOSVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1StorageOSVolumeSource, Symbol("readOnly"), readOnly)
        OpenAPI.validate_property(IoK8sApiCoreV1StorageOSVolumeSource, Symbol("secretRef"), secretRef)
        OpenAPI.validate_property(IoK8sApiCoreV1StorageOSVolumeSource, Symbol("volumeName"), volumeName)
        OpenAPI.validate_property(IoK8sApiCoreV1StorageOSVolumeSource, Symbol("volumeNamespace"), volumeNamespace)
        return new(fsType, readOnly, secretRef, volumeName, volumeNamespace, )
    end
end # type IoK8sApiCoreV1StorageOSVolumeSource

const _property_types_IoK8sApiCoreV1StorageOSVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("readOnly")=>"Bool", Symbol("secretRef")=>"IoK8sApiCoreV1LocalObjectReference", Symbol("volumeName")=>"String", Symbol("volumeNamespace")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1StorageOSVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1StorageOSVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1StorageOSVolumeSource)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1StorageOSVolumeSource }, name::Symbol, val)
end
