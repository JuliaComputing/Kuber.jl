# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.ContainerStatus
ContainerStatus contains details for the current status of this container.

    IoK8sApiCoreV1ContainerStatus(;
        containerID=nothing,
        image=nothing,
        imageID=nothing,
        lastState=nothing,
        name=nothing,
        ready=nothing,
        restartCount=nothing,
        started=nothing,
        state=nothing,
    )

    - containerID::String : Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;.
    - image::String : The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
    - imageID::String : ImageID of the container&#39;s image.
    - lastState::IoK8sApiCoreV1ContainerState
    - name::String : This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    - ready::Bool : Specifies whether the container has passed its readiness probe.
    - restartCount::Int64 : The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    - started::Bool : Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
    - state::IoK8sApiCoreV1ContainerState
"""
Base.@kwdef mutable struct IoK8sApiCoreV1ContainerStatus <: OpenAPI.APIModel
    containerID::Union{Nothing, String} = nothing
    image::Union{Nothing, String} = nothing
    imageID::Union{Nothing, String} = nothing
    lastState = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ContainerState }
    name::Union{Nothing, String} = nothing
    ready::Union{Nothing, Bool} = nothing
    restartCount::Union{Nothing, Int64} = nothing
    started::Union{Nothing, Bool} = nothing
    state = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ContainerState }

    function IoK8sApiCoreV1ContainerStatus(containerID, image, imageID, lastState, name, ready, restartCount, started, state, )
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("containerID"), containerID)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("image"), image)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("imageID"), imageID)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("lastState"), lastState)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("name"), name)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("ready"), ready)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("restartCount"), restartCount)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("started"), started)
        OpenAPI.validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("state"), state)
        return new(containerID, image, imageID, lastState, name, ready, restartCount, started, state, )
    end
end # type IoK8sApiCoreV1ContainerStatus

const _property_types_IoK8sApiCoreV1ContainerStatus = Dict{Symbol,String}(Symbol("containerID")=>"String", Symbol("image")=>"String", Symbol("imageID")=>"String", Symbol("lastState")=>"IoK8sApiCoreV1ContainerState", Symbol("name")=>"String", Symbol("ready")=>"Bool", Symbol("restartCount")=>"Int64", Symbol("started")=>"Bool", Symbol("state")=>"IoK8sApiCoreV1ContainerState", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1ContainerStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ContainerStatus[name]))}

function check_required(o::IoK8sApiCoreV1ContainerStatus)
    o.image === nothing && (return false)
    o.imageID === nothing && (return false)
    o.name === nothing && (return false)
    o.ready === nothing && (return false)
    o.restartCount === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1ContainerStatus }, name::Symbol, val)
    if name === Symbol("restartCount")
        OpenAPI.validate_param(name, "IoK8sApiCoreV1ContainerStatus", :format, val, "int32")
    end
end
