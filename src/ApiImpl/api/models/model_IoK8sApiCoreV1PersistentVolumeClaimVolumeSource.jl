# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource
PersistentVolumeClaimVolumeSource references the user&#39;s PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).

    IoK8sApiCoreV1PersistentVolumeClaimVolumeSource(;
        claimName=nothing,
        readOnly=nothing,
    )

    - claimName::String : ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    - readOnly::Bool : Will force the ReadOnly setting in VolumeMounts. Default false.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PersistentVolumeClaimVolumeSource <: OpenAPI.APIModel
    claimName::Union{Nothing, String} = nothing
    readOnly::Union{Nothing, Bool} = nothing

    function IoK8sApiCoreV1PersistentVolumeClaimVolumeSource(claimName, readOnly, )
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimVolumeSource, Symbol("claimName"), claimName)
        OpenAPI.validate_property(IoK8sApiCoreV1PersistentVolumeClaimVolumeSource, Symbol("readOnly"), readOnly)
        return new(claimName, readOnly, )
    end
end # type IoK8sApiCoreV1PersistentVolumeClaimVolumeSource

const _property_types_IoK8sApiCoreV1PersistentVolumeClaimVolumeSource = Dict{Symbol,String}(Symbol("claimName")=>"String", Symbol("readOnly")=>"Bool", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PersistentVolumeClaimVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PersistentVolumeClaimVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1PersistentVolumeClaimVolumeSource)
    o.claimName === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PersistentVolumeClaimVolumeSource }, name::Symbol, val)
end
