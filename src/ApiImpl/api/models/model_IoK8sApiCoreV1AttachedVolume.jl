# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.AttachedVolume
AttachedVolume describes a volume attached to a node

    IoK8sApiCoreV1AttachedVolume(;
        devicePath=nothing,
        name=nothing,
    )

    - devicePath::String : DevicePath represents the device path where the volume should be available
    - name::String : Name of the attached volume
"""
Base.@kwdef mutable struct IoK8sApiCoreV1AttachedVolume <: OpenAPI.APIModel
    devicePath::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1AttachedVolume(devicePath, name, )
        OpenAPI.validate_property(IoK8sApiCoreV1AttachedVolume, Symbol("devicePath"), devicePath)
        OpenAPI.validate_property(IoK8sApiCoreV1AttachedVolume, Symbol("name"), name)
        return new(devicePath, name, )
    end
end # type IoK8sApiCoreV1AttachedVolume

const _property_types_IoK8sApiCoreV1AttachedVolume = Dict{Symbol,String}(Symbol("devicePath")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1AttachedVolume }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1AttachedVolume[name]))}

function check_required(o::IoK8sApiCoreV1AttachedVolume)
    o.devicePath === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1AttachedVolume }, name::Symbol, val)
end
