# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource
Represents a Photon Controller persistent disk resource.

    IoK8sApiCoreV1PhotonPersistentDiskVolumeSource(;
        fsType=nothing,
        pdID=nothing,
    )

    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - pdID::String : ID that identifies Photon Controller persistent disk
"""
Base.@kwdef mutable struct IoK8sApiCoreV1PhotonPersistentDiskVolumeSource <: OpenAPI.APIModel
    fsType::Union{Nothing, String} = nothing
    pdID::Union{Nothing, String} = nothing

    function IoK8sApiCoreV1PhotonPersistentDiskVolumeSource(fsType, pdID, )
        OpenAPI.validate_property(IoK8sApiCoreV1PhotonPersistentDiskVolumeSource, Symbol("fsType"), fsType)
        OpenAPI.validate_property(IoK8sApiCoreV1PhotonPersistentDiskVolumeSource, Symbol("pdID"), pdID)
        return new(fsType, pdID, )
    end
end # type IoK8sApiCoreV1PhotonPersistentDiskVolumeSource

const _property_types_IoK8sApiCoreV1PhotonPersistentDiskVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("pdID")=>"String", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1PhotonPersistentDiskVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1PhotonPersistentDiskVolumeSource[name]))}

function check_required(o::IoK8sApiCoreV1PhotonPersistentDiskVolumeSource)
    o.pdID === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1PhotonPersistentDiskVolumeSource }, name::Symbol, val)
end
