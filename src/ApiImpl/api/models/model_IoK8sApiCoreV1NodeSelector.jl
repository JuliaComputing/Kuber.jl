# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.core.v1.NodeSelector
A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.

    IoK8sApiCoreV1NodeSelector(;
        nodeSelectorTerms=nothing,
    )

    - nodeSelectorTerms::Vector{IoK8sApiCoreV1NodeSelectorTerm} : Required. A list of node selector terms. The terms are ORed.
"""
Base.@kwdef mutable struct IoK8sApiCoreV1NodeSelector <: OpenAPI.APIModel
    nodeSelectorTerms::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IoK8sApiCoreV1NodeSelectorTerm} }

    function IoK8sApiCoreV1NodeSelector(nodeSelectorTerms, )
        OpenAPI.validate_property(IoK8sApiCoreV1NodeSelector, Symbol("nodeSelectorTerms"), nodeSelectorTerms)
        return new(nodeSelectorTerms, )
    end
end # type IoK8sApiCoreV1NodeSelector

const _property_types_IoK8sApiCoreV1NodeSelector = Dict{Symbol,String}(Symbol("nodeSelectorTerms")=>"Vector{IoK8sApiCoreV1NodeSelectorTerm}", )
OpenAPI.property_type(::Type{ IoK8sApiCoreV1NodeSelector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1NodeSelector[name]))}

function check_required(o::IoK8sApiCoreV1NodeSelector)
    o.nodeSelectorTerms === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCoreV1NodeSelector }, name::Symbol, val)
end
