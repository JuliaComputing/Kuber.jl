# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""io.k8s.api.custom.metrics.v1beta1.MetricValue
a metric value for some object

    IoK8sApiCustomMetricsV1beta1MetricValue(;
        apiVersion=nothing,
        describedObject=nothing,
        kind=nothing,
        metricName=nothing,
        timestamp=nothing,
        value=nothing,
        windowSeconds=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - describedObject::IoK8sApiCoreV1ObjectReference
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metricName::String : the name of the metric
    - timestamp::ZonedDateTime : Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    - value::String : Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  &lt;quantity&gt;        ::&#x3D; &lt;signedNumber&gt;&lt;suffix&gt;   (Note that &lt;suffix&gt; may be empty, from the \&quot;\&quot; case in &lt;decimalSI&gt;.) &lt;digit&gt;           ::&#x3D; 0 | 1 | ... | 9 &lt;digits&gt;          ::&#x3D; &lt;digit&gt; | &lt;digit&gt;&lt;digits&gt; &lt;number&gt;          ::&#x3D; &lt;digits&gt; | &lt;digits&gt;.&lt;digits&gt; | &lt;digits&gt;. | .&lt;digits&gt; &lt;sign&gt;            ::&#x3D; \&quot;+\&quot; | \&quot;-\&quot; &lt;signedNumber&gt;    ::&#x3D; &lt;number&gt; | &lt;sign&gt;&lt;number&gt; &lt;suffix&gt;          ::&#x3D; &lt;binarySI&gt; | &lt;decimalExponent&gt; | &lt;decimalSI&gt; &lt;binarySI&gt;        ::&#x3D; Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html) &lt;decimalSI&gt;       ::&#x3D; m | \&quot;\&quot; | k | M | G | T | P | E   (Note that 1024 &#x3D; 1Ki but 1000 &#x3D; 1k; I didn&#39;t choose the capitalization.) &lt;decimalExponent&gt; ::&#x3D; \&quot;e\&quot; &lt;signedNumber&gt; | \&quot;E\&quot; &lt;signedNumber&gt;  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \&quot;canonical form\&quot;. This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:   a. No precision is lost   b. No fractional digits will be emitted   c. The exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative.  Examples:   1.5 will be serialized as \&quot;1500m\&quot;   1.5Gi will be serialized as \&quot;1536Mi\&quot;  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don&#39;t diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    - windowSeconds::Int64 : indicates the window ([Timestamp-Window, Timestamp]) from which these metrics were calculated, when returning rate metrics calculated from cumulative metrics (or zero for non-calculated instantaneous metrics).
"""
Base.@kwdef mutable struct IoK8sApiCustomMetricsV1beta1MetricValue <: OpenAPI.APIModel
    apiVersion::Union{Nothing, String} = nothing
    describedObject = nothing # spec type: Union{ Nothing, IoK8sApiCoreV1ObjectReference }
    kind::Union{Nothing, String} = nothing
    metricName::Union{Nothing, String} = nothing
    timestamp::Union{Nothing, ZonedDateTime} = nothing
    value::Union{Nothing, String} = nothing
    windowSeconds::Union{Nothing, Int64} = nothing

    function IoK8sApiCustomMetricsV1beta1MetricValue(apiVersion, describedObject, kind, metricName, timestamp, value, windowSeconds, )
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("apiVersion"), apiVersion)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("describedObject"), describedObject)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("kind"), kind)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("metricName"), metricName)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("value"), value)
        OpenAPI.validate_property(IoK8sApiCustomMetricsV1beta1MetricValue, Symbol("windowSeconds"), windowSeconds)
        return new(apiVersion, describedObject, kind, metricName, timestamp, value, windowSeconds, )
    end
end # type IoK8sApiCustomMetricsV1beta1MetricValue

const _property_types_IoK8sApiCustomMetricsV1beta1MetricValue = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("describedObject")=>"IoK8sApiCoreV1ObjectReference", Symbol("kind")=>"String", Symbol("metricName")=>"String", Symbol("timestamp")=>"ZonedDateTime", Symbol("value")=>"String", Symbol("windowSeconds")=>"Int64", )
OpenAPI.property_type(::Type{ IoK8sApiCustomMetricsV1beta1MetricValue }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCustomMetricsV1beta1MetricValue[name]))}

function check_required(o::IoK8sApiCustomMetricsV1beta1MetricValue)
    true
end

function OpenAPI.validate_property(::Type{ IoK8sApiCustomMetricsV1beta1MetricValue }, name::Symbol, val)
    if name === Symbol("timestamp")
        OpenAPI.validate_param(name, "IoK8sApiCustomMetricsV1beta1MetricValue", :format, val, "date-time")
    end
    if name === Symbol("windowSeconds")
        OpenAPI.validate_param(name, "IoK8sApiCustomMetricsV1beta1MetricValue", :format, val, "int64")
    end
end
