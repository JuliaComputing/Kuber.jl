# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""NodeMetrics sets resource usage metrics of a node.

    IoK8sApiMetricsV1beta1NodeMetrics(;
        metadata=nothing,
        timestamp=nothing,
        window=nothing,
        usage=nothing,
    )

    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta : Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    - timestamp::IoK8sApimachineryPkgApisMetaV1Time : define time interval from which metrics were collected from the interval [Timestamp-Window, Timestamp]
    - window::IoK8sApimachineryPkgApisMetaV1Duration : define time interval from which metrics were collected from the interval [Timestamp-Window, Timestamp]
    - usage::Dict{String, IoK8sApimachineryPkgApiResourceQuantity} : The memory usage is the memory working set.
"""
mutable struct IoK8sApiMetricsV1beta1NodeMetrics <: SwaggerModel
    metadata::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta } # spec name: metadata
    timestamp::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1Time } # spec name: timestamp
    window::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1Duration } # spec name: window
    usage::Any # spec type: Union{ Nothing, Dict{String, IoK8sApimachineryPkgApiResourceQuantity} } # spec name: usage

    function IoK8sApiMetricsV1beta1NodeMetrics(;metadata=nothing, timestamp=nothing, window=nothing, usage=nothing)
        o = new()
        validate_property(IoK8sApiMetricsV1beta1NodeMetrics, Symbol("metadata"), metadata)
        setfield!(o, Symbol("metadata"), metadata)
        validate_property(IoK8sApiMetricsV1beta1NodeMetrics, Symbol("timestamp"), timestamp)
        setfield!(o, Symbol("timestamp"), timestamp)
        validate_property(IoK8sApiMetricsV1beta1NodeMetrics, Symbol("window"), window)
        setfield!(o, Symbol("window"), window)
        validate_property(IoK8sApiMetricsV1beta1NodeMetrics, Symbol("usage"), usage)
        setfield!(o, Symbol("usage"), usage)
        o
    end
end # type IoK8sApiMetricsV1beta1NodeMetrics

const _property_map_IoK8sApiMetricsV1beta1NodeMetrics = Dict{Symbol,Symbol}(Symbol("metadata")=>Symbol("metadata"), Symbol("timestamp")=>Symbol("timestamp"), Symbol("window")=>Symbol("window"), Symbol("usage")=>Symbol("usage"))
const _property_types_IoK8sApiMetricsV1beta1NodeMetrics = Dict{Symbol,String}(Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("timestamp")=>"IoK8sApimachineryPkgApisMetaV1Time", Symbol("window")=>"IoK8sApimachineryPkgApisMetaV1Duration", Symbol("usage")=>"Dict{String, IoK8sApimachineryPkgApiResourceQuantity}")
Base.propertynames(::Type{ IoK8sApiMetricsV1beta1NodeMetrics }) = collect(keys(_property_map_IoK8sApiMetricsV1beta1NodeMetrics))
Swagger.property_type(::Type{ IoK8sApiMetricsV1beta1NodeMetrics }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiMetricsV1beta1NodeMetrics[name]))}
Swagger.field_name(::Type{ IoK8sApiMetricsV1beta1NodeMetrics }, property_name::Symbol) =  _property_map_IoK8sApiMetricsV1beta1NodeMetrics[property_name]

function check_required(o::IoK8sApiMetricsV1beta1NodeMetrics)
    true
end

function validate_property(::Type{ IoK8sApiMetricsV1beta1NodeMetrics }, name::Symbol, val)
end
