# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    IoK8sApimachineryPkgApisMetaV1LabelSelector(;
        matchExpressions=nothing,
        matchLabels=nothing,
    )

    - matchExpressions::Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement} : matchExpressions is a list of label selector requirements. The requirements are ANDed.
    - matchLabels::Dict{String, String} : matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \&quot;key\&quot;, the operator is \&quot;In\&quot;, and the values array contains only \&quot;value\&quot;. The requirements are ANDed.
"""
mutable struct IoK8sApimachineryPkgApisMetaV1LabelSelector <: SwaggerModel
    matchExpressions::Any # spec type: Union{ Nothing, Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement} } # spec name: matchExpressions
    matchLabels::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: matchLabels

    function IoK8sApimachineryPkgApisMetaV1LabelSelector(;matchExpressions=nothing, matchLabels=nothing)
        o = new()
        validate_property(IoK8sApimachineryPkgApisMetaV1LabelSelector, Symbol("matchExpressions"), matchExpressions)
        setfield!(o, Symbol("matchExpressions"), matchExpressions)
        validate_property(IoK8sApimachineryPkgApisMetaV1LabelSelector, Symbol("matchLabels"), matchLabels)
        setfield!(o, Symbol("matchLabels"), matchLabels)
        o
    end
end # type IoK8sApimachineryPkgApisMetaV1LabelSelector

const _property_map_IoK8sApimachineryPkgApisMetaV1LabelSelector = Dict{Symbol,Symbol}(Symbol("matchExpressions")=>Symbol("matchExpressions"), Symbol("matchLabels")=>Symbol("matchLabels"))
const _property_types_IoK8sApimachineryPkgApisMetaV1LabelSelector = Dict{Symbol,String}(Symbol("matchExpressions")=>"Vector{IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement}", Symbol("matchLabels")=>"Dict{String, String}")
Base.propertynames(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }) = collect(keys(_property_map_IoK8sApimachineryPkgApisMetaV1LabelSelector))
Swagger.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1LabelSelector[name]))}
Swagger.field_name(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }, property_name::Symbol) =  _property_map_IoK8sApimachineryPkgApisMetaV1LabelSelector[property_name]

function check_required(o::IoK8sApimachineryPkgApisMetaV1LabelSelector)
    true
end

function validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1LabelSelector }, name::Symbol, val)
end
