# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.

    IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec(;
        extra=nothing,
        groups=nothing,
        request=nothing,
        uid=nothing,
        usages=nothing,
        username=nothing,
    )

    - extra::Dict{String, Vector{String}} : Extra information about the requesting user. See user.Info interface for details.
    - groups::Vector{String} : Group information about the requesting user. See user.Info interface for details.
    - request::Vector{UInt8} : Base64-encoded PKCS#10 CSR data
    - uid::String : UID information about the requesting user. See user.Info interface for details.
    - usages::Vector{String} : allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    - username::String : Information about the requesting user. See user.Info interface for details.
"""
mutable struct IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec <: SwaggerModel
    extra::Any # spec type: Union{ Nothing, Dict{String, Vector{String}} } # spec name: extra
    groups::Any # spec type: Union{ Nothing, Vector{String} } # spec name: groups
    request::Any # spec type: Union{ Nothing, Vector{UInt8} } # spec name: request
    uid::Any # spec type: Union{ Nothing, String } # spec name: uid
    usages::Any # spec type: Union{ Nothing, Vector{String} } # spec name: usages
    username::Any # spec type: Union{ Nothing, String } # spec name: username

    function IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec(;extra=nothing, groups=nothing, request=nothing, uid=nothing, usages=nothing, username=nothing)
        o = new()
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("extra"), extra)
        setfield!(o, Symbol("extra"), extra)
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("groups"), groups)
        setfield!(o, Symbol("groups"), groups)
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("request"), request)
        setfield!(o, Symbol("request"), request)
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("uid"), uid)
        setfield!(o, Symbol("uid"), uid)
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("usages"), usages)
        setfield!(o, Symbol("usages"), usages)
        validate_property(IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec, Symbol("username"), username)
        setfield!(o, Symbol("username"), username)
        o
    end
end # type IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec

const _property_map_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec = Dict{Symbol,Symbol}(Symbol("extra")=>Symbol("extra"), Symbol("groups")=>Symbol("groups"), Symbol("request")=>Symbol("request"), Symbol("uid")=>Symbol("uid"), Symbol("usages")=>Symbol("usages"), Symbol("username")=>Symbol("username"))
const _property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec = Dict{Symbol,String}(Symbol("extra")=>"Dict{String, Vector{String}}", Symbol("groups")=>"Vector{String}", Symbol("request")=>"Vector{UInt8}", Symbol("uid")=>"String", Symbol("usages")=>"Vector{String}", Symbol("username")=>"String")
Base.propertynames(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }) = collect(keys(_property_map_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec))
Swagger.property_type(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec[name]))}
Swagger.field_name(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }, property_name::Symbol) =  _property_map_IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec[property_name]

function check_required(o::IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec)
    (getproperty(o, Symbol("request")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec }, name::Symbol, val)
    if name === Symbol("request")
    end
end
