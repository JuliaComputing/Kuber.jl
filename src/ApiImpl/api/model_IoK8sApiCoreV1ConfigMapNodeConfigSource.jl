# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.

    IoK8sApiCoreV1ConfigMapNodeConfigSource(;
        kubeletConfigKey=nothing,
        name=nothing,
        namespace=nothing,
        resourceVersion=nothing,
        uid=nothing,
    )

    - kubeletConfigKey::String : KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
    - name::String : Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
    - namespace::String : Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
    - resourceVersion::String : ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    - uid::String : UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
"""
mutable struct IoK8sApiCoreV1ConfigMapNodeConfigSource <: SwaggerModel
    kubeletConfigKey::Any # spec type: Union{ Nothing, String } # spec name: kubeletConfigKey
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    namespace::Any # spec type: Union{ Nothing, String } # spec name: namespace
    resourceVersion::Any # spec type: Union{ Nothing, String } # spec name: resourceVersion
    uid::Any # spec type: Union{ Nothing, String } # spec name: uid

    function IoK8sApiCoreV1ConfigMapNodeConfigSource(;kubeletConfigKey=nothing, name=nothing, namespace=nothing, resourceVersion=nothing, uid=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("kubeletConfigKey"), kubeletConfigKey)
        setfield!(o, Symbol("kubeletConfigKey"), kubeletConfigKey)
        validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("namespace"), namespace)
        setfield!(o, Symbol("namespace"), namespace)
        validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("resourceVersion"), resourceVersion)
        setfield!(o, Symbol("resourceVersion"), resourceVersion)
        validate_property(IoK8sApiCoreV1ConfigMapNodeConfigSource, Symbol("uid"), uid)
        setfield!(o, Symbol("uid"), uid)
        o
    end
end # type IoK8sApiCoreV1ConfigMapNodeConfigSource

const _property_map_IoK8sApiCoreV1ConfigMapNodeConfigSource = Dict{Symbol,Symbol}(Symbol("kubeletConfigKey")=>Symbol("kubeletConfigKey"), Symbol("name")=>Symbol("name"), Symbol("namespace")=>Symbol("namespace"), Symbol("resourceVersion")=>Symbol("resourceVersion"), Symbol("uid")=>Symbol("uid"))
const _property_types_IoK8sApiCoreV1ConfigMapNodeConfigSource = Dict{Symbol,String}(Symbol("kubeletConfigKey")=>"String", Symbol("name")=>"String", Symbol("namespace")=>"String", Symbol("resourceVersion")=>"String", Symbol("uid")=>"String")
Base.propertynames(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }) = collect(keys(_property_map_IoK8sApiCoreV1ConfigMapNodeConfigSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ConfigMapNodeConfigSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1ConfigMapNodeConfigSource[property_name]

function check_required(o::IoK8sApiCoreV1ConfigMapNodeConfigSource)
    (getproperty(o, Symbol("kubeletConfigKey")) === nothing) && (return false)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    (getproperty(o, Symbol("namespace")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1ConfigMapNodeConfigSource }, name::Symbol, val)
end
