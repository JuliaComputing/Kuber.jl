# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.

    IoK8sApiNetworkingV1beta1IngressRule(;
        host=nothing,
        http=nothing,
    )

    - host::String : Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \&quot;host\&quot; part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the    IP in the Spec of the parent Ingress. 2. The &#x60;:&#x60; delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
    - http::IoK8sApiNetworkingV1beta1HTTPIngressRuleValue
"""
mutable struct IoK8sApiNetworkingV1beta1IngressRule <: SwaggerModel
    host::Any # spec type: Union{ Nothing, String } # spec name: host
    http::Any # spec type: Union{ Nothing, IoK8sApiNetworkingV1beta1HTTPIngressRuleValue } # spec name: http

    function IoK8sApiNetworkingV1beta1IngressRule(;host=nothing, http=nothing)
        o = new()
        validate_property(IoK8sApiNetworkingV1beta1IngressRule, Symbol("host"), host)
        setfield!(o, Symbol("host"), host)
        validate_property(IoK8sApiNetworkingV1beta1IngressRule, Symbol("http"), http)
        setfield!(o, Symbol("http"), http)
        o
    end
end # type IoK8sApiNetworkingV1beta1IngressRule

const _property_map_IoK8sApiNetworkingV1beta1IngressRule = Dict{Symbol,Symbol}(Symbol("host")=>Symbol("host"), Symbol("http")=>Symbol("http"))
const _property_types_IoK8sApiNetworkingV1beta1IngressRule = Dict{Symbol,String}(Symbol("host")=>"String", Symbol("http")=>"IoK8sApiNetworkingV1beta1HTTPIngressRuleValue")
Base.propertynames(::Type{ IoK8sApiNetworkingV1beta1IngressRule }) = collect(keys(_property_map_IoK8sApiNetworkingV1beta1IngressRule))
Swagger.property_type(::Type{ IoK8sApiNetworkingV1beta1IngressRule }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiNetworkingV1beta1IngressRule[name]))}
Swagger.field_name(::Type{ IoK8sApiNetworkingV1beta1IngressRule }, property_name::Symbol) =  _property_map_IoK8sApiNetworkingV1beta1IngressRule[property_name]

function check_required(o::IoK8sApiNetworkingV1beta1IngressRule)
    true
end

function validate_property(::Type{ IoK8sApiNetworkingV1beta1IngressRule }, name::Symbol, val)
end
