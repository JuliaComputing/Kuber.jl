# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.

    IoK8sApiCoreV1FCVolumeSource(;
        fsType=nothing,
        lun=nothing,
        readOnly=nothing,
        targetWWNs=nothing,
        wwids=nothing,
    )

    - fsType::String : Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
    - lun::Int32 : Optional: FC target lun number
    - readOnly::Bool : Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    - targetWWNs::Vector{String} : Optional: FC target worldwide names (WWNs)
    - wwids::Vector{String} : Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
"""
mutable struct IoK8sApiCoreV1FCVolumeSource <: SwaggerModel
    fsType::Any # spec type: Union{ Nothing, String } # spec name: fsType
    lun::Any # spec type: Union{ Nothing, Int32 } # spec name: lun
    readOnly::Any # spec type: Union{ Nothing, Bool } # spec name: readOnly
    targetWWNs::Any # spec type: Union{ Nothing, Vector{String} } # spec name: targetWWNs
    wwids::Any # spec type: Union{ Nothing, Vector{String} } # spec name: wwids

    function IoK8sApiCoreV1FCVolumeSource(;fsType=nothing, lun=nothing, readOnly=nothing, targetWWNs=nothing, wwids=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("fsType"), fsType)
        setfield!(o, Symbol("fsType"), fsType)
        validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("lun"), lun)
        setfield!(o, Symbol("lun"), lun)
        validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("readOnly"), readOnly)
        setfield!(o, Symbol("readOnly"), readOnly)
        validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("targetWWNs"), targetWWNs)
        setfield!(o, Symbol("targetWWNs"), targetWWNs)
        validate_property(IoK8sApiCoreV1FCVolumeSource, Symbol("wwids"), wwids)
        setfield!(o, Symbol("wwids"), wwids)
        o
    end
end # type IoK8sApiCoreV1FCVolumeSource

const _property_map_IoK8sApiCoreV1FCVolumeSource = Dict{Symbol,Symbol}(Symbol("fsType")=>Symbol("fsType"), Symbol("lun")=>Symbol("lun"), Symbol("readOnly")=>Symbol("readOnly"), Symbol("targetWWNs")=>Symbol("targetWWNs"), Symbol("wwids")=>Symbol("wwids"))
const _property_types_IoK8sApiCoreV1FCVolumeSource = Dict{Symbol,String}(Symbol("fsType")=>"String", Symbol("lun")=>"Int32", Symbol("readOnly")=>"Bool", Symbol("targetWWNs")=>"Vector{String}", Symbol("wwids")=>"Vector{String}")
Base.propertynames(::Type{ IoK8sApiCoreV1FCVolumeSource }) = collect(keys(_property_map_IoK8sApiCoreV1FCVolumeSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1FCVolumeSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1FCVolumeSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1FCVolumeSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1FCVolumeSource[property_name]

function check_required(o::IoK8sApiCoreV1FCVolumeSource)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1FCVolumeSource }, name::Symbol, val)
end
