# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""EnvVarSource represents a source for the value of an EnvVar.

    IoK8sApiCoreV1EnvVarSource(;
        configMapKeyRef=nothing,
        fieldRef=nothing,
        resourceFieldRef=nothing,
        secretKeyRef=nothing,
    )

    - configMapKeyRef::IoK8sApiCoreV1ConfigMapKeySelector : Selects a key of a ConfigMap.
    - fieldRef::IoK8sApiCoreV1ObjectFieldSelector : Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    - resourceFieldRef::IoK8sApiCoreV1ResourceFieldSelector : Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    - secretKeyRef::IoK8sApiCoreV1SecretKeySelector : Selects a key of a secret in the pod&#39;s namespace
"""
mutable struct IoK8sApiCoreV1EnvVarSource <: SwaggerModel
    configMapKeyRef::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ConfigMapKeySelector } # spec name: configMapKeyRef
    fieldRef::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ObjectFieldSelector } # spec name: fieldRef
    resourceFieldRef::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ResourceFieldSelector } # spec name: resourceFieldRef
    secretKeyRef::Any # spec type: Union{ Nothing, IoK8sApiCoreV1SecretKeySelector } # spec name: secretKeyRef

    function IoK8sApiCoreV1EnvVarSource(;configMapKeyRef=nothing, fieldRef=nothing, resourceFieldRef=nothing, secretKeyRef=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1EnvVarSource, Symbol("configMapKeyRef"), configMapKeyRef)
        setfield!(o, Symbol("configMapKeyRef"), configMapKeyRef)
        validate_property(IoK8sApiCoreV1EnvVarSource, Symbol("fieldRef"), fieldRef)
        setfield!(o, Symbol("fieldRef"), fieldRef)
        validate_property(IoK8sApiCoreV1EnvVarSource, Symbol("resourceFieldRef"), resourceFieldRef)
        setfield!(o, Symbol("resourceFieldRef"), resourceFieldRef)
        validate_property(IoK8sApiCoreV1EnvVarSource, Symbol("secretKeyRef"), secretKeyRef)
        setfield!(o, Symbol("secretKeyRef"), secretKeyRef)
        o
    end
end # type IoK8sApiCoreV1EnvVarSource

const _property_map_IoK8sApiCoreV1EnvVarSource = Dict{Symbol,Symbol}(Symbol("configMapKeyRef")=>Symbol("configMapKeyRef"), Symbol("fieldRef")=>Symbol("fieldRef"), Symbol("resourceFieldRef")=>Symbol("resourceFieldRef"), Symbol("secretKeyRef")=>Symbol("secretKeyRef"))
const _property_types_IoK8sApiCoreV1EnvVarSource = Dict{Symbol,String}(Symbol("configMapKeyRef")=>"IoK8sApiCoreV1ConfigMapKeySelector", Symbol("fieldRef")=>"IoK8sApiCoreV1ObjectFieldSelector", Symbol("resourceFieldRef")=>"IoK8sApiCoreV1ResourceFieldSelector", Symbol("secretKeyRef")=>"IoK8sApiCoreV1SecretKeySelector")
Base.propertynames(::Type{ IoK8sApiCoreV1EnvVarSource }) = collect(keys(_property_map_IoK8sApiCoreV1EnvVarSource))
Swagger.property_type(::Type{ IoK8sApiCoreV1EnvVarSource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1EnvVarSource[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1EnvVarSource }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1EnvVarSource[property_name]

function check_required(o::IoK8sApiCoreV1EnvVarSource)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1EnvVarSource }, name::Symbol, val)
end
