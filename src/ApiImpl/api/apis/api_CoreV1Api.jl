# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CoreV1Api <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CoreV1Api`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CoreV1Api }) = "http://localhost"

const _returntypes_connect_core_v1_delete_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_delete_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_delete_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_delete_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_delete_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_delete_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_delete_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_connect_core_v1_delete_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect DELETE requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_delete_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_delete_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_delete_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_pod_attach_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_pod_attach(_api::CoreV1Api, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_pod_attach_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/attach", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "container", container)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "stderr", stderr)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdin", stdin)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdout", stdout)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "tty", tty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to attach of Pod

Params:
- name::String (required)
- namespace::String (required)
- container::String
- stderr::Bool
- stdin::Bool
- stdout::Bool
- tty::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_pod_attach(_api::CoreV1Api, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_attach(_api, name, namespace; container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_pod_attach(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_attach(_api, name, namespace; container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_pod_exec_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_pod_exec(_api::CoreV1Api, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_pod_exec_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/exec", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "command", command)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "container", container)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "stderr", stderr)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdin", stdin)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdout", stdout)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "tty", tty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to exec of Pod

Params:
- name::String (required)
- namespace::String (required)
- command::String
- container::String
- stderr::Bool
- stdin::Bool
- stdout::Bool
- tty::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_pod_exec(_api::CoreV1Api, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_exec(_api, name, namespace; command=command, container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_pod_exec(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_exec(_api, name, namespace; command=command, container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_pod_portforward_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_pod_portforward(_api::CoreV1Api, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_pod_portforward_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ports", ports)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to portforward of Pod

Params:
- name::String (required)
- namespace::String (required)
- ports::Int64

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_pod_portforward(_api::CoreV1Api, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_portforward(_api, name, namespace; ports=ports, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_pod_portforward(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_portforward(_api, name, namespace; ports=ports, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_get_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_get_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_connect_core_v1_get_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect GET requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_get_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_get_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_get_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_head_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_head_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_connect_core_v1_head_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect HEAD requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_head_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_head_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_head_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_options_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_options_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "OPTIONS", _returntypes_connect_core_v1_options_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect OPTIONS requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_options_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_options_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_options_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_patch_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_patch_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_connect_core_v1_patch_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PATCH requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_patch_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_patch_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_patch_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_pod_attach_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_pod_attach(_api::CoreV1Api, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_pod_attach_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/attach", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "container", container)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "stderr", stderr)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdin", stdin)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdout", stdout)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "tty", tty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to attach of Pod

Params:
- name::String (required)
- namespace::String (required)
- container::String
- stderr::Bool
- stdin::Bool
- stdout::Bool
- tty::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_pod_attach(_api::CoreV1Api, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_attach(_api, name, namespace; container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_pod_attach(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_attach(_api, name, namespace; container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_pod_exec_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_pod_exec(_api::CoreV1Api, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_pod_exec_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/exec", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "command", command)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "container", container)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "stderr", stderr)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdin", stdin)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "stdout", stdout)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "tty", tty)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to exec of Pod

Params:
- name::String (required)
- namespace::String (required)
- command::String
- container::String
- stderr::Bool
- stdin::Bool
- stdout::Bool
- tty::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_pod_exec(_api::CoreV1Api, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_exec(_api, name, namespace; command=command, container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_pod_exec(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; command=nothing, container=nothing, stderr=nothing, stdin=nothing, stdout=nothing, tty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_exec(_api, name, namespace; command=command, container=container, stderr=stderr, stdin=stdin, stdout=stdout, tty=tty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_pod_portforward_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_pod_portforward(_api::CoreV1Api, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_pod_portforward_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/portforward", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ports", ports)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to portforward of Pod

Params:
- name::String (required)
- namespace::String (required)
- ports::Int64

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_pod_portforward(_api::CoreV1Api, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_portforward(_api, name, namespace; ports=ports, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_pod_portforward(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; ports=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_portforward(_api, name, namespace; ports=ports, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_post_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_post_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_connect_core_v1_post_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect POST requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_post_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_post_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_post_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_namespaced_pod_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_namespaced_pod_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_namespaced_pod_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_namespaced_pod_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_pod_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_namespaced_pod_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_namespaced_pod_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Pod

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_namespaced_pod_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_namespaced_pod_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_pod_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_namespaced_service_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_namespaced_service_proxy_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_namespaced_service_proxy(_api::CoreV1Api, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_namespaced_service_proxy(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_service_proxy(_api, name, namespace; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_namespaced_service_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_namespaced_service_proxy_with_path_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Service

Params:
- name::String (required)
- namespace::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_namespaced_service_proxy_with_path(_api::CoreV1Api, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_namespaced_service_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_namespaced_service_proxy_with_path(_api, name, namespace, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_node_proxy_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_node_proxy_CoreV1Api, "/api/v1/nodes/{name}/proxy", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Node

Params:
- name::String (required)
- path::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_node_proxy(_api::CoreV1Api, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_node_proxy(_api::CoreV1Api, response_stream::Channel, name::String; path=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_node_proxy(_api, name; path=path, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_connect_core_v1_put_node_proxy_with_path_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_connect_core_v1_put_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_connect_core_v1_put_node_proxy_with_path_CoreV1Api, "/api/v1/nodes/{name}/proxy/{path}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "path", path2)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["*/*", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""connect PUT requests to proxy of Node

Params:
- name::String (required)
- path::String (required)
- path2::String

Return: String, OpenAPI.Clients.ApiResponse
"""
function connect_core_v1_put_node_proxy_with_path(_api::CoreV1Api, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function connect_core_v1_put_node_proxy_with_path(_api::CoreV1Api, response_stream::Channel, name::String, path::String; path2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_connect_core_v1_put_node_proxy_with_path(_api, name, path; path2=path2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespace(_api::CoreV1Api, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespace_CoreV1Api, "/api/v1/namespaces", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Namespace

Params:
- body::IoK8sApiCoreV1Namespace (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespace(_api::CoreV1Api, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespace(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespace(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_binding_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_binding(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_binding_CoreV1Api, "/api/v1/namespaces/{namespace}/bindings", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Binding

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Binding (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApiCoreV1Binding, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_binding(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_binding(_api, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_binding(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_binding(_api, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_config_map(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a ConfigMap

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1ConfigMap (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ConfigMap, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_config_map(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_config_map(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_config_map(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_endpoints(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create Endpoints

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Endpoints (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Endpoints, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_endpoints(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_endpoints(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_endpoints(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_event(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create an Event

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Event (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Event, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_event(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_event(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_event(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_limit_range(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a LimitRange

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1LimitRange (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1LimitRange, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_limit_range(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_limit_range(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_limit_range(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a PersistentVolumeClaim

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1PersistentVolumeClaim (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_persistent_volume_claim(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_persistent_volume_claim(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_pod(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Pod

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Pod (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_pod(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_pod_binding_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Binding,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_pod_binding(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_pod_binding_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/binding", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create binding of a Pod

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Binding (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApiCoreV1Binding, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_pod_binding(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_binding(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_pod_binding(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Binding; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_binding(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_pod_eviction_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiPolicyV1beta1Eviction,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiPolicyV1beta1Eviction,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiPolicyV1beta1Eviction,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_pod_eviction(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiPolicyV1beta1Eviction; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_pod_eviction_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/eviction", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create eviction of a Pod

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiPolicyV1beta1Eviction (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApiPolicyV1beta1Eviction, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_pod_eviction(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiPolicyV1beta1Eviction; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_eviction(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_pod_eviction(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiPolicyV1beta1Eviction; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_eviction(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_pod_template(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a PodTemplate

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1PodTemplate (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PodTemplate, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_pod_template(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_template(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_pod_template(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_replication_controller(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a ReplicationController

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1ReplicationController (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_replication_controller(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_replication_controller(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_replication_controller(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_resource_quota(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a ResourceQuota

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1ResourceQuota (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_resource_quota(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_resource_quota(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_resource_quota(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_secret(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Secret

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Secret (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Secret, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_secret(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_secret(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_secret(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_service(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Service

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1Service (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_service(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_service_account(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a ServiceAccount

Params:
- namespace::String (required)
- body::IoK8sApiCoreV1ServiceAccount (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ServiceAccount, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_service_account(_api::CoreV1Api, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service_account(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service_account(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_namespaced_service_account_token_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiAuthenticationV1TokenRequest,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiAuthenticationV1TokenRequest,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiAuthenticationV1TokenRequest,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_namespaced_service_account_token(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiAuthenticationV1TokenRequest; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_namespaced_service_account_token_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create token of a ServiceAccount

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiAuthenticationV1TokenRequest (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApiAuthenticationV1TokenRequest, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_namespaced_service_account_token(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiAuthenticationV1TokenRequest; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service_account_token(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_namespaced_service_account_token(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiAuthenticationV1TokenRequest; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_namespaced_service_account_token(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_node(_api::CoreV1Api, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_node_CoreV1Api, "/api/v1/nodes", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Node

Params:
- body::IoK8sApiCoreV1Node (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_node(_api::CoreV1Api, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_node(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_node(_api::CoreV1Api, response_stream::Channel, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_node(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_core_v1_persistent_volume(_api::CoreV1Api, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a PersistentVolume

Params:
- body::IoK8sApiCoreV1PersistentVolume (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function create_core_v1_persistent_volume(_api::CoreV1Api, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_persistent_volume(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_core_v1_persistent_volume(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_config_map(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of ConfigMap

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_config_map(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_config_map(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_config_map(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_endpoints(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Endpoints

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_endpoints(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_endpoints(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_endpoints(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_event(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Event

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_event(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_event(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_event(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_event(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_limit_range(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of LimitRange

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_limit_range(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_limit_range(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_limit_range(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of PersistentVolumeClaim

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_persistent_volume_claim(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_persistent_volume_claim(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_pod(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Pod

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_pod(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_pod(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_pod(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_pod(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_pod_template(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of PodTemplate

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_pod_template(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_pod_template(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_pod_template(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_replication_controller(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of ReplicationController

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_replication_controller(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_replication_controller(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_replication_controller(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_resource_quota(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of ResourceQuota

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_resource_quota(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_resource_quota(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_resource_quota(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_secret(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Secret

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_secret(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_secret(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_secret(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_secret(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_namespaced_service_account(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of ServiceAccount

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_namespaced_service_account(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_service_account(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_namespaced_service_account(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_node(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_node_CoreV1Api, "/api/v1/nodes", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Node

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_node(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_node(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_node(_api::CoreV1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_node(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_collection_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_collection_persistent_volume(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_collection_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of PersistentVolume

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_collection_persistent_volume(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_persistent_volume(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_collection_persistent_volume(_api::CoreV1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_collection_persistent_volume(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespace(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespace_CoreV1Api, "/api/v1/namespaces/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Namespace

Params:
- name::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespace(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespace(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespace(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a ConfigMap

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_config_map(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_config_map(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete Endpoints

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_endpoints(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_endpoints(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete an Event

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_event(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_event(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a LimitRange

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_limit_range(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_limit_range(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Pod

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_pod(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_pod(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a PodTemplate

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_pod_template(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_pod_template(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_replication_controller(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_replication_controller(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_resource_quota(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_resource_quota(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Secret

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_secret(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_secret(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Service

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_service(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_service(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a ServiceAccount

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_service_account(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_namespaced_service_account(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_node(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_node_CoreV1Api, "/api/v1/nodes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Node

Params:
- name::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_node(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_node(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_node(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_node(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_core_v1_persistent_volume(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a PersistentVolume

Params:
- name::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_core_v1_persistent_volume(_api::CoreV1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_persistent_volume(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_core_v1_persistent_volume(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_core_v1_a_p_i_resources_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1APIResourceList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_core_v1_a_p_i_resources(_api::CoreV1Api; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_core_v1_a_p_i_resources_CoreV1Api, "/api/v1/", ["BearerToken", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""get available resources

Params:

Return: IoK8sApimachineryPkgApisMetaV1APIResourceList, OpenAPI.Clients.ApiResponse
"""
function get_core_v1_a_p_i_resources(_api::CoreV1Api; _mediaType=nothing)
    _ctx = _oacinternal_get_core_v1_a_p_i_resources(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_core_v1_a_p_i_resources(_api::CoreV1Api, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_core_v1_a_p_i_resources(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_component_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ComponentStatusList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_component_status(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_component_status_CoreV1Api, "/api/v1/componentstatuses", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list objects of kind ComponentStatus

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ComponentStatusList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_component_status(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_component_status(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_component_status(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_component_status(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_config_map_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMapList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_config_map_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_config_map_for_all_namespaces_CoreV1Api, "/api/v1/configmaps", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ConfigMap

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ConfigMapList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_config_map_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_config_map_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_config_map_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_config_map_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_endpoints_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1EndpointsList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_endpoints_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_endpoints_for_all_namespaces_CoreV1Api, "/api/v1/endpoints", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Endpoints

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1EndpointsList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_endpoints_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_endpoints_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_endpoints_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_endpoints_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_event_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1EventList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_event_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_event_for_all_namespaces_CoreV1Api, "/api/v1/events", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Event

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1EventList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_event_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_event_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_event_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_event_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_limit_range_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRangeList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_limit_range_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_limit_range_for_all_namespaces_CoreV1Api, "/api/v1/limitranges", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind LimitRange

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1LimitRangeList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_limit_range_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_limit_range_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_limit_range_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_limit_range_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1NamespaceList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespace(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespace_CoreV1Api, "/api/v1/namespaces", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Namespace

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1NamespaceList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespace(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespace(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespace(_api::CoreV1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespace(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMapList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_config_map(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ConfigMap

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ConfigMapList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_config_map(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_config_map(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_config_map(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1EndpointsList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_endpoints(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Endpoints

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1EndpointsList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_endpoints(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_endpoints(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_endpoints(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1EventList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_event(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Event

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1EventList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_event(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_event(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_event(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRangeList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_limit_range(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind LimitRange

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1LimitRangeList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_limit_range(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_limit_range(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_limit_range(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaimList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PersistentVolumeClaim

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PersistentVolumeClaimList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_persistent_volume_claim(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_persistent_volume_claim(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_pod(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Pod

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PodList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_pod(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_pod(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_pod(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplateList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_pod_template(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PodTemplate

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PodTemplateList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_pod_template(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_pod_template(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_pod_template(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationControllerList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_replication_controller(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ReplicationController

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ReplicationControllerList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_replication_controller(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_replication_controller(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_replication_controller(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuotaList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_resource_quota(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ResourceQuota

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ResourceQuotaList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_resource_quota(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_resource_quota(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_resource_quota(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1SecretList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_secret(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Secret

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1SecretList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_secret(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_secret(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_secret(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_service(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Service

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ServiceList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_service(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_service(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_service(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccountList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_namespaced_service_account(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ServiceAccount

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ServiceAccountList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_namespaced_service_account(_api::CoreV1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_service_account(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_namespaced_service_account(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1NodeList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_node(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_node_CoreV1Api, "/api/v1/nodes", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Node

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1NodeList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_node(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_node(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_node(_api::CoreV1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_node(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_persistent_volume(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PersistentVolume

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PersistentVolumeList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_persistent_volume(_api::CoreV1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_persistent_volume(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_persistent_volume(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_persistent_volume_claim_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaimList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_persistent_volume_claim_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_persistent_volume_claim_for_all_namespaces_CoreV1Api, "/api/v1/persistentvolumeclaims", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PersistentVolumeClaim

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PersistentVolumeClaimList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_persistent_volume_claim_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_persistent_volume_claim_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_persistent_volume_claim_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_persistent_volume_claim_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_pod_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_pod_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_pod_for_all_namespaces_CoreV1Api, "/api/v1/pods", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Pod

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PodList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_pod_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_pod_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_pod_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_pod_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_pod_template_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplateList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_pod_template_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_pod_template_for_all_namespaces_CoreV1Api, "/api/v1/podtemplates", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PodTemplate

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1PodTemplateList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_pod_template_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_pod_template_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_pod_template_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_pod_template_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_replication_controller_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationControllerList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_replication_controller_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_replication_controller_for_all_namespaces_CoreV1Api, "/api/v1/replicationcontrollers", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ReplicationController

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ReplicationControllerList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_replication_controller_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_replication_controller_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_replication_controller_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_replication_controller_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_resource_quota_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuotaList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_resource_quota_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_resource_quota_for_all_namespaces_CoreV1Api, "/api/v1/resourcequotas", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ResourceQuota

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ResourceQuotaList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_resource_quota_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_resource_quota_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_resource_quota_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_resource_quota_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_secret_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1SecretList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_secret_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_secret_for_all_namespaces_CoreV1Api, "/api/v1/secrets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Secret

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1SecretList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_secret_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_secret_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_secret_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_secret_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_service_account_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccountList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_service_account_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_service_account_for_all_namespaces_CoreV1Api, "/api/v1/serviceaccounts", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ServiceAccount

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ServiceAccountList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_service_account_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_service_account_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_service_account_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_service_account_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_core_v1_service_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_core_v1_service_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_core_v1_service_for_all_namespaces_CoreV1Api, "/api/v1/services", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Service

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiCoreV1ServiceList, OpenAPI.Clients.ApiResponse
"""
function list_core_v1_service_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_service_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_core_v1_service_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_core_v1_service_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespace(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespace_CoreV1Api, "/api/v1/namespaces/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Namespace

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespace(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespace(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespace(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespace_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespace_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespace_status_CoreV1Api, "/api/v1/namespaces/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Namespace

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespace_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespace_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespace_status(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespace_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified ConfigMap

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ConfigMap, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_config_map(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_config_map(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Endpoints

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Endpoints, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_endpoints(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_endpoints(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Event

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Event, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_event(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_event(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified LimitRange

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1LimitRange, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_limit_range(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_limit_range(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_persistent_volume_claim(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_persistent_volume_claim(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_pod_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_pod_status_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_pod_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified PodTemplate

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1PodTemplate, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod_template(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_pod_template(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_replication_controller_scale_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiAutoscalingV1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_replication_controller_scale_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update scale of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiAutoscalingV1Scale, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_replication_controller_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_replication_controller_status_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_replication_controller_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_resource_quota(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_resource_quota(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_resource_quota_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_resource_quota_status_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_resource_quota_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_resource_quota_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Secret

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Secret, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_secret(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_secret(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Service

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified ServiceAccount

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1ServiceAccount, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service_account(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service_account(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_namespaced_service_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_namespaced_service_status_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Service

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_namespaced_service_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_namespaced_service_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_node(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_node_CoreV1Api, "/api/v1/nodes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Node

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_node(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_node(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_node(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_node(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_node_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_node_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_node_status_CoreV1Api, "/api/v1/nodes/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Node

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_node_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_node_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_node_status(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_node_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_persistent_volume(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified PersistentVolume

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_persistent_volume(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_persistent_volume(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_persistent_volume(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_core_v1_persistent_volume_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_core_v1_persistent_volume_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_core_v1_persistent_volume_status_CoreV1Api, "/api/v1/persistentvolumes/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified PersistentVolume

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function patch_core_v1_persistent_volume_status(_api::CoreV1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_persistent_volume_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_core_v1_persistent_volume_status(_api::CoreV1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_core_v1_persistent_volume_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_component_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ComponentStatus,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_component_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_component_status_CoreV1Api, "/api/v1/componentstatuses/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ComponentStatus

Params:
- name::String (required)
- pretty::String

Return: IoK8sApiCoreV1ComponentStatus, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_component_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_component_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_component_status(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_component_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespace(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespace_CoreV1Api, "/api/v1/namespaces/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Namespace

Params:
- name::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespace(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespace(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespace(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespace_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespace_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespace_status_CoreV1Api, "/api/v1/namespaces/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Namespace

Params:
- name::String (required)
- pretty::String

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespace_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespace_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespace_status(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespace_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ConfigMap

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1ConfigMap, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_config_map(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_config_map(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Endpoints

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Endpoints, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_endpoints(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_endpoints(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Event

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Event, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_event(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_event(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified LimitRange

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1LimitRange, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_limit_range(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_limit_range(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_pod_log_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_pod_log(_api::CoreV1Api, name::String, namespace::String; container=nothing, follow=nothing, insecure_skip_t_l_s_verify_backend=nothing, limit_bytes=nothing, pretty=nothing, previous=nothing, since_seconds=nothing, tail_lines=nothing, timestamps=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_pod_log_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/log", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "container", container)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "follow", follow)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "insecureSkipTLSVerifyBackend", insecure_skip_t_l_s_verify_backend)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "limitBytes", limit_bytes)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "previous", previous)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "sinceSeconds", since_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "tailLines", tail_lines)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "timestamps", timestamps)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["text/plain", "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read log of the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- container::String
- follow::Bool
- insecure_skip_t_l_s_verify_backend::Bool
- limit_bytes::Int64
- pretty::String
- previous::Bool
- since_seconds::Int64
- tail_lines::Int64
- timestamps::Bool

Return: String, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_pod_log(_api::CoreV1Api, name::String, namespace::String; container=nothing, follow=nothing, insecure_skip_t_l_s_verify_backend=nothing, limit_bytes=nothing, pretty=nothing, previous=nothing, since_seconds=nothing, tail_lines=nothing, timestamps=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_log(_api, name, namespace; container=container, follow=follow, insecure_skip_t_l_s_verify_backend=insecure_skip_t_l_s_verify_backend, limit_bytes=limit_bytes, pretty=pretty, previous=previous, since_seconds=since_seconds, tail_lines=tail_lines, timestamps=timestamps, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_pod_log(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; container=nothing, follow=nothing, insecure_skip_t_l_s_verify_backend=nothing, limit_bytes=nothing, pretty=nothing, previous=nothing, since_seconds=nothing, tail_lines=nothing, timestamps=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_log(_api, name, namespace; container=container, follow=follow, insecure_skip_t_l_s_verify_backend=insecure_skip_t_l_s_verify_backend, limit_bytes=limit_bytes, pretty=pretty, previous=previous, since_seconds=since_seconds, tail_lines=tail_lines, timestamps=timestamps, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_pod_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_pod_status_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_pod_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified PodTemplate

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1PodTemplate, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_template(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_pod_template(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_replication_controller_scale_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiAutoscalingV1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_replication_controller_scale_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read scale of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiAutoscalingV1Scale, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_replication_controller_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_replication_controller_status_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_replication_controller_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_resource_quota(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_resource_quota(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_resource_quota_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_resource_quota_status_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_resource_quota_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_resource_quota_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Secret

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Secret, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_secret(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_secret(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Service

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ServiceAccount

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1ServiceAccount, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service_account(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service_account(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_namespaced_service_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_namespaced_service_status_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Service

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_namespaced_service_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_namespaced_service_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_node(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_node_CoreV1Api, "/api/v1/nodes/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Node

Params:
- name::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_node(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_node(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_node(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_node(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_node_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_node_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_node_status_CoreV1Api, "/api/v1/nodes/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Node

Params:
- name::String (required)
- pretty::String

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_node_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_node_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_node_status(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_node_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_persistent_volume(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified PersistentVolume

Params:
- name::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_persistent_volume(_api::CoreV1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_persistent_volume(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_persistent_volume(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_core_v1_persistent_volume_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_core_v1_persistent_volume_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_core_v1_persistent_volume_status_CoreV1Api, "/api/v1/persistentvolumes/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified PersistentVolume

Params:
- name::String (required)
- pretty::String

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function read_core_v1_persistent_volume_status(_api::CoreV1Api, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_persistent_volume_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_core_v1_persistent_volume_status(_api::CoreV1Api, response_stream::Channel, name::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_core_v1_persistent_volume_status(_api, name; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespace(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespace_CoreV1Api, "/api/v1/namespaces/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Namespace

Params:
- name::String (required)
- body::IoK8sApiCoreV1Namespace (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespace(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespace_finalize_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespace_finalize(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespace_finalize_CoreV1Api, "/api/v1/namespaces/{name}/finalize", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace finalize of the specified Namespace

Params:
- name::String (required)
- body::IoK8sApiCoreV1Namespace (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespace_finalize(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace_finalize(_api, name, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespace_finalize(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1Namespace; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace_finalize(_api, name, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespace_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Namespace,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespace_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespace_status_CoreV1Api, "/api/v1/namespaces/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Namespace

Params:
- name::String (required)
- body::IoK8sApiCoreV1Namespace (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Namespace, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespace_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespace_status(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1Namespace; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespace_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ConfigMap,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/namespaces/{namespace}/configmaps/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified ConfigMap

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ConfigMap (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ConfigMap, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_config_map(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ConfigMap; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_config_map(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Endpoints,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/namespaces/{namespace}/endpoints/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Endpoints

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Endpoints (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Endpoints, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_endpoints(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Endpoints; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_endpoints(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Event,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_event_CoreV1Api, "/api/v1/namespaces/{namespace}/events/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Event

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Event (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Event, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_event(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Event; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_event(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1LimitRange,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/namespaces/{namespace}/limitranges/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified LimitRange

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1LimitRange (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1LimitRange, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_limit_range(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1LimitRange; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_limit_range(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1PersistentVolumeClaim (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_persistent_volume_claim(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_persistent_volume_claim(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolumeClaim,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_persistent_volume_claim_status_CoreV1Api, "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified PersistentVolumeClaim

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1PersistentVolumeClaim (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolumeClaim, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_persistent_volume_claim_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1PersistentVolumeClaim; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_persistent_volume_claim_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_pod_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Pod (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_pod_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Pod,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_pod_status_CoreV1Api, "/api/v1/namespaces/{namespace}/pods/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Pod

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Pod (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Pod, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_pod_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_pod_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Pod; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PodTemplate,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/namespaces/{namespace}/podtemplates/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified PodTemplate

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1PodTemplate (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PodTemplate, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod_template(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1PodTemplate; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_pod_template(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ReplicationController (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_replication_controller_scale_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiAutoscalingV1Scale,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiAutoscalingV1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiAutoscalingV1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_replication_controller_scale_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace scale of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiAutoscalingV1Scale (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiAutoscalingV1Scale, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiAutoscalingV1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_replication_controller_scale(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiAutoscalingV1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_replication_controller_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ReplicationController,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_replication_controller_status_CoreV1Api, "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified ReplicationController

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ReplicationController (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ReplicationController, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_replication_controller_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ReplicationController; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_replication_controller_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ResourceQuota (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_resource_quota(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_resource_quota(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_resource_quota_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ResourceQuota,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_resource_quota_status_CoreV1Api, "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified ResourceQuota

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ResourceQuota (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ResourceQuota, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_resource_quota_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_resource_quota_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ResourceQuota; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_resource_quota_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Secret,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_secret_CoreV1Api, "/api/v1/namespaces/{namespace}/secrets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Secret

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Secret (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Secret, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_secret(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Secret; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_secret(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_service_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Service

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Service (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1ServiceAccount,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/namespaces/{namespace}/serviceaccounts/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified ServiceAccount

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1ServiceAccount (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1ServiceAccount, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service_account(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1ServiceAccount; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service_account(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_namespaced_service_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Service,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_namespaced_service_status_CoreV1Api, "/api/v1/namespaces/{namespace}/services/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Service

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiCoreV1Service (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Service, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_namespaced_service_status(_api::CoreV1Api, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_namespaced_service_status(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiCoreV1Service; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_namespaced_service_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_node(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_node_CoreV1Api, "/api/v1/nodes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Node

Params:
- name::String (required)
- body::IoK8sApiCoreV1Node (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_node(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_node(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_node(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_node(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_node_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1Node,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_node_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_node_status_CoreV1Api, "/api/v1/nodes/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Node

Params:
- name::String (required)
- body::IoK8sApiCoreV1Node (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1Node, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_node_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_node_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_node_status(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1Node; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_node_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_persistent_volume(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_persistent_volume_CoreV1Api, "/api/v1/persistentvolumes/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified PersistentVolume

Params:
- name::String (required)
- body::IoK8sApiCoreV1PersistentVolume (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_persistent_volume(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_persistent_volume(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_persistent_volume(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_core_v1_persistent_volume_status_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiCoreV1PersistentVolume,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_core_v1_persistent_volume_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_core_v1_persistent_volume_status_CoreV1Api, "/api/v1/persistentvolumes/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified PersistentVolume

Params:
- name::String (required)
- body::IoK8sApiCoreV1PersistentVolume (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiCoreV1PersistentVolume, OpenAPI.Clients.ApiResponse
"""
function replace_core_v1_persistent_volume_status(_api::CoreV1Api, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_persistent_volume_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_core_v1_persistent_volume_status(_api::CoreV1Api, response_stream::Channel, name::String, body::IoK8sApiCoreV1PersistentVolume; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_core_v1_persistent_volume_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_config_map_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_config_map_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_config_map_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/configmaps", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_config_map_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_config_map_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_config_map_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_config_map_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_endpoints_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_endpoints_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_endpoints_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/endpoints", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_endpoints_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_endpoints_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_endpoints_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_endpoints_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_event_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_event_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_event_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/events", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_event_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_event_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_event_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_event_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_limit_range_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_limit_range_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_limit_range_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/limitranges", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_limit_range_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_limit_range_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_limit_range_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_limit_range_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespace_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespace(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespace_CoreV1Api, "/api/v1/watch/namespaces/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespace(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespace(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespace(_api::CoreV1Api, response_stream::Channel, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespace(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespace_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespace_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespace_list_CoreV1Api, "/api/v1/watch/namespaces", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespace_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespace_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespace_list(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespace_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_config_map_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_config_map_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/configmaps/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_config_map(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_config_map(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_config_map(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_config_map(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_config_map_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_config_map_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_config_map_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/configmaps", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_config_map_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_config_map_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_config_map_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_config_map_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_endpoints_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_endpoints_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/endpoints/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_endpoints(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_endpoints(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_endpoints(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_endpoints(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_endpoints_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_endpoints_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_endpoints_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/endpoints", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_endpoints_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_endpoints_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_endpoints_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_endpoints_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_event_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_event_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/events/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_event(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_event(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_event(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_event(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_event_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_event_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_event_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/events", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_event_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_event_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_event_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_event_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_limit_range_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_limit_range_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/limitranges/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_limit_range(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_limit_range(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_limit_range(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_limit_range(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_limit_range_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_limit_range_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_limit_range_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/limitranges", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_limit_range_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_limit_range_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_limit_range_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_limit_range_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_persistent_volume_claim_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_persistent_volume_claim_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_persistent_volume_claim(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_persistent_volume_claim(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_persistent_volume_claim_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_persistent_volume_claim_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_persistent_volume_claim_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_persistent_volume_claim_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_persistent_volume_claim_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_persistent_volume_claim_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_persistent_volume_claim_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_pod_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_pod_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/pods/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_pod(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_pod(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_pod_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_pod_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_pod_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/pods", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_pod_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_pod_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_pod_template_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_pod_template_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_pod_template(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_template(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_pod_template(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_template(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_pod_template_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_pod_template_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_pod_template_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/podtemplates", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_pod_template_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_template_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_pod_template_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_pod_template_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_replication_controller_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_replication_controller_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_replication_controller(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_replication_controller(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_replication_controller(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_replication_controller(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_replication_controller_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_replication_controller_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_replication_controller_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/replicationcontrollers", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_replication_controller_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_replication_controller_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_replication_controller_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_replication_controller_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_resource_quota_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_resource_quota_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_resource_quota(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_resource_quota(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_resource_quota(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_resource_quota(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_resource_quota_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_resource_quota_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_resource_quota_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/resourcequotas", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_resource_quota_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_resource_quota_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_resource_quota_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_resource_quota_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_secret_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_secret_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/secrets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_secret(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_secret(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_secret(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_secret(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_secret_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_secret_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_secret_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/secrets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_secret_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_secret_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_secret_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_secret_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_service_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_service_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/services/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_service(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_service(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_service_account_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_service_account_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_service_account(_api::CoreV1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_account(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_service_account(_api::CoreV1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_account(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_service_account_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_service_account_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_service_account_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/serviceaccounts", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_service_account_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_account_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_service_account_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_account_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_namespaced_service_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_namespaced_service_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_namespaced_service_list_CoreV1Api, "/api/v1/watch/namespaces/{namespace}/services", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_namespaced_service_list(_api::CoreV1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_namespaced_service_list(_api::CoreV1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_namespaced_service_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_node_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_node(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_node_CoreV1Api, "/api/v1/watch/nodes/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_node(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_node(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_node(_api::CoreV1Api, response_stream::Channel, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_node(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_node_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_node_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_node_list_CoreV1Api, "/api/v1/watch/nodes", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_node_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_node_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_node_list(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_node_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_persistent_volume_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_persistent_volume(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_persistent_volume_CoreV1Api, "/api/v1/watch/persistentvolumes/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_persistent_volume(_api::CoreV1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_persistent_volume(_api::CoreV1Api, response_stream::Channel, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_persistent_volume_claim_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_persistent_volume_claim_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_persistent_volume_claim_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/persistentvolumeclaims", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_persistent_volume_claim_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume_claim_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_persistent_volume_claim_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume_claim_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_persistent_volume_list_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_persistent_volume_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_persistent_volume_list_CoreV1Api, "/api/v1/watch/persistentvolumes", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_persistent_volume_list(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_persistent_volume_list(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_persistent_volume_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_pod_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_pod_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_pod_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/pods", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_pod_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_pod_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_pod_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_pod_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_pod_template_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_pod_template_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_pod_template_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/podtemplates", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_pod_template_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_pod_template_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_pod_template_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_pod_template_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_replication_controller_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_replication_controller_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_replication_controller_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/replicationcontrollers", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_replication_controller_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_replication_controller_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_replication_controller_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_replication_controller_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_resource_quota_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_resource_quota_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_resource_quota_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/resourcequotas", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_resource_quota_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_resource_quota_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_resource_quota_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_resource_quota_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_secret_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_secret_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_secret_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/secrets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_secret_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_secret_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_secret_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_secret_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_service_account_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_service_account_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_service_account_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/serviceaccounts", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_service_account_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_service_account_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_service_account_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_service_account_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_core_v1_service_list_for_all_namespaces_CoreV1Api = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_core_v1_service_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_core_v1_service_list_for_all_namespaces_CoreV1Api, "/api/v1/watch/services", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_core_v1_service_list_for_all_namespaces(_api::CoreV1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_service_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_core_v1_service_list_for_all_namespaces(_api::CoreV1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_core_v1_service_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export connect_core_v1_delete_namespaced_pod_proxy
export connect_core_v1_delete_namespaced_pod_proxy_with_path
export connect_core_v1_delete_namespaced_service_proxy
export connect_core_v1_delete_namespaced_service_proxy_with_path
export connect_core_v1_delete_node_proxy
export connect_core_v1_delete_node_proxy_with_path
export connect_core_v1_get_namespaced_pod_attach
export connect_core_v1_get_namespaced_pod_exec
export connect_core_v1_get_namespaced_pod_portforward
export connect_core_v1_get_namespaced_pod_proxy
export connect_core_v1_get_namespaced_pod_proxy_with_path
export connect_core_v1_get_namespaced_service_proxy
export connect_core_v1_get_namespaced_service_proxy_with_path
export connect_core_v1_get_node_proxy
export connect_core_v1_get_node_proxy_with_path
export connect_core_v1_head_namespaced_pod_proxy
export connect_core_v1_head_namespaced_pod_proxy_with_path
export connect_core_v1_head_namespaced_service_proxy
export connect_core_v1_head_namespaced_service_proxy_with_path
export connect_core_v1_head_node_proxy
export connect_core_v1_head_node_proxy_with_path
export connect_core_v1_options_namespaced_pod_proxy
export connect_core_v1_options_namespaced_pod_proxy_with_path
export connect_core_v1_options_namespaced_service_proxy
export connect_core_v1_options_namespaced_service_proxy_with_path
export connect_core_v1_options_node_proxy
export connect_core_v1_options_node_proxy_with_path
export connect_core_v1_patch_namespaced_pod_proxy
export connect_core_v1_patch_namespaced_pod_proxy_with_path
export connect_core_v1_patch_namespaced_service_proxy
export connect_core_v1_patch_namespaced_service_proxy_with_path
export connect_core_v1_patch_node_proxy
export connect_core_v1_patch_node_proxy_with_path
export connect_core_v1_post_namespaced_pod_attach
export connect_core_v1_post_namespaced_pod_exec
export connect_core_v1_post_namespaced_pod_portforward
export connect_core_v1_post_namespaced_pod_proxy
export connect_core_v1_post_namespaced_pod_proxy_with_path
export connect_core_v1_post_namespaced_service_proxy
export connect_core_v1_post_namespaced_service_proxy_with_path
export connect_core_v1_post_node_proxy
export connect_core_v1_post_node_proxy_with_path
export connect_core_v1_put_namespaced_pod_proxy
export connect_core_v1_put_namespaced_pod_proxy_with_path
export connect_core_v1_put_namespaced_service_proxy
export connect_core_v1_put_namespaced_service_proxy_with_path
export connect_core_v1_put_node_proxy
export connect_core_v1_put_node_proxy_with_path
export create_core_v1_namespace
export create_core_v1_namespaced_binding
export create_core_v1_namespaced_config_map
export create_core_v1_namespaced_endpoints
export create_core_v1_namespaced_event
export create_core_v1_namespaced_limit_range
export create_core_v1_namespaced_persistent_volume_claim
export create_core_v1_namespaced_pod
export create_core_v1_namespaced_pod_binding
export create_core_v1_namespaced_pod_eviction
export create_core_v1_namespaced_pod_template
export create_core_v1_namespaced_replication_controller
export create_core_v1_namespaced_resource_quota
export create_core_v1_namespaced_secret
export create_core_v1_namespaced_service
export create_core_v1_namespaced_service_account
export create_core_v1_namespaced_service_account_token
export create_core_v1_node
export create_core_v1_persistent_volume
export delete_core_v1_collection_namespaced_config_map
export delete_core_v1_collection_namespaced_endpoints
export delete_core_v1_collection_namespaced_event
export delete_core_v1_collection_namespaced_limit_range
export delete_core_v1_collection_namespaced_persistent_volume_claim
export delete_core_v1_collection_namespaced_pod
export delete_core_v1_collection_namespaced_pod_template
export delete_core_v1_collection_namespaced_replication_controller
export delete_core_v1_collection_namespaced_resource_quota
export delete_core_v1_collection_namespaced_secret
export delete_core_v1_collection_namespaced_service_account
export delete_core_v1_collection_node
export delete_core_v1_collection_persistent_volume
export delete_core_v1_namespace
export delete_core_v1_namespaced_config_map
export delete_core_v1_namespaced_endpoints
export delete_core_v1_namespaced_event
export delete_core_v1_namespaced_limit_range
export delete_core_v1_namespaced_persistent_volume_claim
export delete_core_v1_namespaced_pod
export delete_core_v1_namespaced_pod_template
export delete_core_v1_namespaced_replication_controller
export delete_core_v1_namespaced_resource_quota
export delete_core_v1_namespaced_secret
export delete_core_v1_namespaced_service
export delete_core_v1_namespaced_service_account
export delete_core_v1_node
export delete_core_v1_persistent_volume
export get_core_v1_a_p_i_resources
export list_core_v1_component_status
export list_core_v1_config_map_for_all_namespaces
export list_core_v1_endpoints_for_all_namespaces
export list_core_v1_event_for_all_namespaces
export list_core_v1_limit_range_for_all_namespaces
export list_core_v1_namespace
export list_core_v1_namespaced_config_map
export list_core_v1_namespaced_endpoints
export list_core_v1_namespaced_event
export list_core_v1_namespaced_limit_range
export list_core_v1_namespaced_persistent_volume_claim
export list_core_v1_namespaced_pod
export list_core_v1_namespaced_pod_template
export list_core_v1_namespaced_replication_controller
export list_core_v1_namespaced_resource_quota
export list_core_v1_namespaced_secret
export list_core_v1_namespaced_service
export list_core_v1_namespaced_service_account
export list_core_v1_node
export list_core_v1_persistent_volume
export list_core_v1_persistent_volume_claim_for_all_namespaces
export list_core_v1_pod_for_all_namespaces
export list_core_v1_pod_template_for_all_namespaces
export list_core_v1_replication_controller_for_all_namespaces
export list_core_v1_resource_quota_for_all_namespaces
export list_core_v1_secret_for_all_namespaces
export list_core_v1_service_account_for_all_namespaces
export list_core_v1_service_for_all_namespaces
export patch_core_v1_namespace
export patch_core_v1_namespace_status
export patch_core_v1_namespaced_config_map
export patch_core_v1_namespaced_endpoints
export patch_core_v1_namespaced_event
export patch_core_v1_namespaced_limit_range
export patch_core_v1_namespaced_persistent_volume_claim
export patch_core_v1_namespaced_persistent_volume_claim_status
export patch_core_v1_namespaced_pod
export patch_core_v1_namespaced_pod_status
export patch_core_v1_namespaced_pod_template
export patch_core_v1_namespaced_replication_controller
export patch_core_v1_namespaced_replication_controller_scale
export patch_core_v1_namespaced_replication_controller_status
export patch_core_v1_namespaced_resource_quota
export patch_core_v1_namespaced_resource_quota_status
export patch_core_v1_namespaced_secret
export patch_core_v1_namespaced_service
export patch_core_v1_namespaced_service_account
export patch_core_v1_namespaced_service_status
export patch_core_v1_node
export patch_core_v1_node_status
export patch_core_v1_persistent_volume
export patch_core_v1_persistent_volume_status
export read_core_v1_component_status
export read_core_v1_namespace
export read_core_v1_namespace_status
export read_core_v1_namespaced_config_map
export read_core_v1_namespaced_endpoints
export read_core_v1_namespaced_event
export read_core_v1_namespaced_limit_range
export read_core_v1_namespaced_persistent_volume_claim
export read_core_v1_namespaced_persistent_volume_claim_status
export read_core_v1_namespaced_pod
export read_core_v1_namespaced_pod_log
export read_core_v1_namespaced_pod_status
export read_core_v1_namespaced_pod_template
export read_core_v1_namespaced_replication_controller
export read_core_v1_namespaced_replication_controller_scale
export read_core_v1_namespaced_replication_controller_status
export read_core_v1_namespaced_resource_quota
export read_core_v1_namespaced_resource_quota_status
export read_core_v1_namespaced_secret
export read_core_v1_namespaced_service
export read_core_v1_namespaced_service_account
export read_core_v1_namespaced_service_status
export read_core_v1_node
export read_core_v1_node_status
export read_core_v1_persistent_volume
export read_core_v1_persistent_volume_status
export replace_core_v1_namespace
export replace_core_v1_namespace_finalize
export replace_core_v1_namespace_status
export replace_core_v1_namespaced_config_map
export replace_core_v1_namespaced_endpoints
export replace_core_v1_namespaced_event
export replace_core_v1_namespaced_limit_range
export replace_core_v1_namespaced_persistent_volume_claim
export replace_core_v1_namespaced_persistent_volume_claim_status
export replace_core_v1_namespaced_pod
export replace_core_v1_namespaced_pod_status
export replace_core_v1_namespaced_pod_template
export replace_core_v1_namespaced_replication_controller
export replace_core_v1_namespaced_replication_controller_scale
export replace_core_v1_namespaced_replication_controller_status
export replace_core_v1_namespaced_resource_quota
export replace_core_v1_namespaced_resource_quota_status
export replace_core_v1_namespaced_secret
export replace_core_v1_namespaced_service
export replace_core_v1_namespaced_service_account
export replace_core_v1_namespaced_service_status
export replace_core_v1_node
export replace_core_v1_node_status
export replace_core_v1_persistent_volume
export replace_core_v1_persistent_volume_status
export watch_core_v1_config_map_list_for_all_namespaces
export watch_core_v1_endpoints_list_for_all_namespaces
export watch_core_v1_event_list_for_all_namespaces
export watch_core_v1_limit_range_list_for_all_namespaces
export watch_core_v1_namespace
export watch_core_v1_namespace_list
export watch_core_v1_namespaced_config_map
export watch_core_v1_namespaced_config_map_list
export watch_core_v1_namespaced_endpoints
export watch_core_v1_namespaced_endpoints_list
export watch_core_v1_namespaced_event
export watch_core_v1_namespaced_event_list
export watch_core_v1_namespaced_limit_range
export watch_core_v1_namespaced_limit_range_list
export watch_core_v1_namespaced_persistent_volume_claim
export watch_core_v1_namespaced_persistent_volume_claim_list
export watch_core_v1_namespaced_pod
export watch_core_v1_namespaced_pod_list
export watch_core_v1_namespaced_pod_template
export watch_core_v1_namespaced_pod_template_list
export watch_core_v1_namespaced_replication_controller
export watch_core_v1_namespaced_replication_controller_list
export watch_core_v1_namespaced_resource_quota
export watch_core_v1_namespaced_resource_quota_list
export watch_core_v1_namespaced_secret
export watch_core_v1_namespaced_secret_list
export watch_core_v1_namespaced_service
export watch_core_v1_namespaced_service_account
export watch_core_v1_namespaced_service_account_list
export watch_core_v1_namespaced_service_list
export watch_core_v1_node
export watch_core_v1_node_list
export watch_core_v1_persistent_volume
export watch_core_v1_persistent_volume_claim_list_for_all_namespaces
export watch_core_v1_persistent_volume_list
export watch_core_v1_pod_list_for_all_namespaces
export watch_core_v1_pod_template_list_for_all_namespaces
export watch_core_v1_replication_controller_list_for_all_namespaces
export watch_core_v1_resource_quota_list_for_all_namespaces
export watch_core_v1_secret_list_for_all_namespaces
export watch_core_v1_service_account_list_for_all_namespaces
export watch_core_v1_service_list_for_all_namespaces
