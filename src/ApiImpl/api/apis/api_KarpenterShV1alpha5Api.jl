# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct KarpenterShV1alpha5Api <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `KarpenterShV1alpha5Api`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ KarpenterShV1alpha5Api }) = "http://localhost"

const _returntypes_create_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("201", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("202", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""create a Provisioner

Params:
- body::ShKarpenterV1alpha5Provisioner (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function create_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_karpenter_sh_v1alpha5_provisioner(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_karpenter_sh_v1alpha5_provisioner(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_karpenter_sh_v1alpha5_collection_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1StatusV2,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_karpenter_sh_v1alpha5_collection_provisioner(_api::KarpenterShV1alpha5Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_karpenter_sh_v1alpha5_collection_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersionMatch", resource_version_match)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Provisioner

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- resource_version_match::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1StatusV2, OpenAPI.Clients.ApiResponse
"""
function delete_karpenter_sh_v1alpha5_collection_provisioner(_api::KarpenterShV1alpha5Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_karpenter_sh_v1alpha5_collection_provisioner(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, resource_version_match=resource_version_match, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_karpenter_sh_v1alpha5_collection_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_karpenter_sh_v1alpha5_collection_provisioner(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, resource_version_match=resource_version_match, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1StatusV2,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1StatusV2,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Provisioner

Params:
- name::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptionsV2

Return: IoK8sApimachineryPkgApisMetaV1StatusV2, OpenAPI.Clients.ApiResponse
"""
function delete_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_karpenter_sh_v1alpha5_provisioner(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_karpenter_sh_v1alpha5_provisioner(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5ProvisionerList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersionMatch", resource_version_match)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list objects of kind Provisioner

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- resource_version_match::String
- timeout_seconds::Int64
- watch::Bool

Return: ShKarpenterV1alpha5ProvisionerList, OpenAPI.Clients.ApiResponse
"""
function list_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_karpenter_sh_v1alpha5_provisioner(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, resource_version_match=resource_version_match, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, resource_version_match=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_karpenter_sh_v1alpha5_provisioner(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, resource_version_match=resource_version_match, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Provisioner

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function patch_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_karpenter_sh_v1alpha5_provisioner(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_karpenter_sh_v1alpha5_provisioner(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_karpenter_sh_v1alpha5_provisioner_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_karpenter_sh_v1alpha5_provisioner_status, "/apis/karpenter.sh/v1alpha5/provisioners/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Provisioner

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function patch_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_karpenter_sh_v1alpha5_provisioner_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_karpenter_sh_v1alpha5_provisioner_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Provisioner

Params:
- name::String (required)
- pretty::String
- resource_version::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function read_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_karpenter_sh_v1alpha5_provisioner(_api, name; pretty=pretty, resource_version=resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_karpenter_sh_v1alpha5_provisioner(_api, name; pretty=pretty, resource_version=resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_karpenter_sh_v1alpha5_provisioner_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_karpenter_sh_v1alpha5_provisioner_status, "/apis/karpenter.sh/v1alpha5/provisioners/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Provisioner

Params:
- name::String (required)
- pretty::String
- resource_version::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function read_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_karpenter_sh_v1alpha5_provisioner_status(_api, name; pretty=pretty, resource_version=resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String; pretty=nothing, resource_version=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_karpenter_sh_v1alpha5_provisioner_status(_api, name; pretty=pretty, resource_version=resource_version, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_karpenter_sh_v1alpha5_provisioner = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("201", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_karpenter_sh_v1alpha5_provisioner, "/apis/karpenter.sh/v1alpha5/provisioners/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Provisioner

Params:
- name::String (required)
- body::ShKarpenterV1alpha5Provisioner (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function replace_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_karpenter_sh_v1alpha5_provisioner(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_karpenter_sh_v1alpha5_provisioner(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_karpenter_sh_v1alpha5_provisioner(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_karpenter_sh_v1alpha5_provisioner_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("201", "x"=>".") * "\$") => ShKarpenterV1alpha5Provisioner,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_karpenter_sh_v1alpha5_provisioner_status, "/apis/karpenter.sh/v1alpha5/provisioners/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Provisioner

Params:
- name::String (required)
- body::ShKarpenterV1alpha5Provisioner (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: ShKarpenterV1alpha5Provisioner, OpenAPI.Clients.ApiResponse
"""
function replace_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_karpenter_sh_v1alpha5_provisioner_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_karpenter_sh_v1alpha5_provisioner_status(_api::KarpenterShV1alpha5Api, response_stream::Channel, name::String, body::ShKarpenterV1alpha5Provisioner; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_karpenter_sh_v1alpha5_provisioner_status(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_karpenter_sh_v1alpha5_provisioner
export delete_karpenter_sh_v1alpha5_collection_provisioner
export delete_karpenter_sh_v1alpha5_provisioner
export list_karpenter_sh_v1alpha5_provisioner
export patch_karpenter_sh_v1alpha5_provisioner
export patch_karpenter_sh_v1alpha5_provisioner_status
export read_karpenter_sh_v1alpha5_provisioner
export read_karpenter_sh_v1alpha5_provisioner_status
export replace_karpenter_sh_v1alpha5_provisioner
export replace_karpenter_sh_v1alpha5_provisioner_status
