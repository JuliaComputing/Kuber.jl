# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ExtensionsV1beta1Api <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ExtensionsV1beta1Api`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ExtensionsV1beta1Api }) = "http://localhost"

const _returntypes_create_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a DaemonSet

Params:
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1DaemonSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_daemon_set(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_daemon_set(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a Deployment

Params:
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Deployment (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_deployment(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_deployment(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_namespaced_deployment_rollback = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_deployment_rollback(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DeploymentRollback; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_deployment_rollback, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create rollback of a Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1DeploymentRollback (required)
- dry_run::String
- field_manager::String
- pretty::String

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_deployment_rollback(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DeploymentRollback; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_deployment_rollback(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_deployment_rollback(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DeploymentRollback; dry_run=nothing, field_manager=nothing, pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_deployment_rollback(_api, name, namespace, body; dry_run=dry_run, field_manager=field_manager, pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create an Ingress

Params:
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Ingress (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_ingress(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_ingress(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a NetworkPolicy

Params:
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1NetworkPolicy (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1NetworkPolicy, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_network_policy(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_network_policy(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a ReplicaSet

Params:
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1ReplicaSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_replica_set(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_namespaced_replica_set(_api, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""create a PodSecurityPolicy

Params:
- body::IoK8sApiExtensionsV1beta1PodSecurityPolicy (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1PodSecurityPolicy, OpenAPI.Clients.ApiResponse
"""
function create_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_pod_security_policy(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_extensions_v1beta1_pod_security_policy(_api, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of DaemonSet

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_daemon_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_daemon_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Deployment

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_deployment(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_deployment(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of Ingress

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_ingress(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_ingress(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of NetworkPolicy

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_network_policy(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_network_policy(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of ReplicaSet

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_replica_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_namespaced_replica_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_collection_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_collection_pod_security_policy(_api::ExtensionsV1beta1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_collection_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete collection of PodSecurityPolicy

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- dry_run::String
- field_selector::String
- grace_period_seconds::Int64
- label_selector::String
- limit::Int64
- orphan_dependents::Bool
- propagation_policy::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_collection_pod_security_policy(_api::ExtensionsV1beta1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_pod_security_policy(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_collection_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, dry_run=nothing, field_selector=nothing, grace_period_seconds=nothing, label_selector=nothing, limit=nothing, orphan_dependents=nothing, propagation_policy=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_collection_pod_security_policy(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, dry_run=dry_run, field_selector=field_selector, grace_period_seconds=grace_period_seconds, label_selector=label_selector, limit=limit, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a Deployment

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_deployment(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_deployment(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete an Ingress

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_ingress(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_ingress(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a NetworkPolicy

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("202", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1Status,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "gracePeriodSeconds", grace_period_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orphanDependents", orphan_dependents)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "propagationPolicy", propagation_policy)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""delete a PodSecurityPolicy

Params:
- name::String (required)
- pretty::String
- dry_run::String
- grace_period_seconds::Int64
- orphan_dependents::Bool
- propagation_policy::String
- body::IoK8sApimachineryPkgApisMetaV1DeleteOptions

Return: IoK8sApimachineryPkgApisMetaV1Status, OpenAPI.Clients.ApiResponse
"""
function delete_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_pod_security_policy(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String; pretty=nothing, dry_run=nothing, grace_period_seconds=nothing, orphan_dependents=nothing, propagation_policy=nothing, body=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_extensions_v1beta1_pod_security_policy(_api, name; pretty=pretty, dry_run=dry_run, grace_period_seconds=grace_period_seconds, orphan_dependents=orphan_dependents, propagation_policy=propagation_policy, body=body, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_extensions_v1beta1_a_p_i_resources = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1APIResourceList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_extensions_v1beta1_a_p_i_resources(_api::ExtensionsV1beta1Api; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_extensions_v1beta1_a_p_i_resources, "/apis/extensions/v1beta1/", ["BearerToken", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""get available resources

Params:

Return: IoK8sApimachineryPkgApisMetaV1APIResourceList, OpenAPI.Clients.ApiResponse
"""
function get_extensions_v1beta1_a_p_i_resources(_api::ExtensionsV1beta1Api; _mediaType=nothing)
    _ctx = _oacinternal_get_extensions_v1beta1_a_p_i_resources(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_extensions_v1beta1_a_p_i_resources(_api::ExtensionsV1beta1Api, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_extensions_v1beta1_a_p_i_resources(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_daemon_set_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSetList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_daemon_set_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_daemon_set_for_all_namespaces, "/apis/extensions/v1beta1/daemonsets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind DaemonSet

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1DaemonSetList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_daemon_set_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_daemon_set_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_daemon_set_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_daemon_set_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_deployment_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DeploymentList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_deployment_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_deployment_for_all_namespaces, "/apis/extensions/v1beta1/deployments", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Deployment

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1DeploymentList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_deployment_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_deployment_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_deployment_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_deployment_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_ingress_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1IngressList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_ingress_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_ingress_for_all_namespaces, "/apis/extensions/v1beta1/ingresses", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Ingress

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1IngressList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_ingress_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_ingress_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_ingress_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_ingress_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSetList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind DaemonSet

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1DaemonSetList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_daemon_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_daemon_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DeploymentList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Deployment

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1DeploymentList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_deployment(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_deployment(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1IngressList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind Ingress

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1IngressList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_ingress(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_ingress(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicyList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind NetworkPolicy

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1NetworkPolicyList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_network_policy(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_network_policy(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSetList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ReplicaSet

Params:
- namespace::String (required)
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1ReplicaSetList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_replica_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_namespaced_replica_set(_api, namespace; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_network_policy_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicyList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_network_policy_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_network_policy_for_all_namespaces, "/apis/extensions/v1beta1/networkpolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind NetworkPolicy

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1NetworkPolicyList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_network_policy_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_network_policy_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_network_policy_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_network_policy_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicyList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind PodSecurityPolicy

Params:
- pretty::String
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1PodSecurityPolicyList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_pod_security_policy(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel; pretty=nothing, allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_pod_security_policy(_api; pretty=pretty, allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_extensions_v1beta1_replica_set_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSetList,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_list_extensions_v1beta1_replica_set_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_extensions_v1beta1_replica_set_for_all_namespaces, "/apis/extensions/v1beta1/replicasets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""list or watch objects of kind ReplicaSet

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApiExtensionsV1beta1ReplicaSetList, OpenAPI.Clients.ApiResponse
"""
function list_extensions_v1beta1_replica_set_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_replica_set_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_extensions_v1beta1_replica_set_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_extensions_v1beta1_replica_set_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_daemon_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_daemon_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_deployment_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_deployment_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update scale of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_deployment_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_deployment_status, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_ingress(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_ingress(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_ingress_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_ingress_status, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified NetworkPolicy

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1NetworkPolicy, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_network_policy(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_network_policy(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_replica_set_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_replica_set_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update scale of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_replica_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_replica_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update status of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update scale of the specified ReplicationControllerDummy

Params:
- name::String (required)
- namespace::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_patch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml", ] : [_mediaType])
    return _ctx
end

@doc raw"""partially update the specified PodSecurityPolicy

Params:
- name::String (required)
- body::Any (required)
- pretty::String
- dry_run::String
- field_manager::String
- force::Bool

Return: IoK8sApiExtensionsV1beta1PodSecurityPolicy, OpenAPI.Clients.ApiResponse
"""
function patch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_pod_security_policy(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, body::Any; pretty=nothing, dry_run=nothing, field_manager=nothing, force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_extensions_v1beta1_pod_security_policy(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_daemon_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_daemon_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_deployment_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_deployment_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read scale of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_deployment_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_deployment_status, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_ingress(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_ingress(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_ingress_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_ingress_status, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified NetworkPolicy

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1NetworkPolicy, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_replica_set_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_replica_set_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read scale of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_replica_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_replica_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read status of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_namespaced_replication_controller_dummy_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_namespaced_replication_controller_dummy_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read scale of the specified ReplicationControllerDummy

Params:
- name::String (required)
- namespace::String (required)
- pretty::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; pretty=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace; pretty=pretty, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_read_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_read_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_read_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exact", exact)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "export", __export__)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""read the specified PodSecurityPolicy

Params:
- name::String (required)
- pretty::String
- exact::Bool
- __export__::Bool

Return: IoK8sApiExtensionsV1beta1PodSecurityPolicy, OpenAPI.Clients.ApiResponse
"""
function read_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_pod_security_policy(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function read_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String; pretty=nothing, exact=nothing, __export__=nothing, _mediaType=nothing)
    _ctx = _oacinternal_read_extensions_v1beta1_pod_security_policy(_api, name; pretty=pretty, exact=exact, __export__=__export__, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1DaemonSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_daemon_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1DaemonSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_daemon_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified DaemonSet

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1DaemonSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1DaemonSet, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_daemon_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1DaemonSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_daemon_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Deployment (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_deployment_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_deployment_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace scale of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Scale (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_deployment_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_deployment_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Deployment,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_deployment_status, "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Deployment

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Deployment (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Deployment, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_deployment_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Deployment; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_deployment_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Ingress (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_ingress(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_ingress(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_ingress_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Ingress,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_ingress_status, "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified Ingress

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Ingress (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Ingress, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_ingress_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Ingress; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_ingress_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1NetworkPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified NetworkPolicy

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1NetworkPolicy (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1NetworkPolicy, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_network_policy(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1NetworkPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_network_policy(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1ReplicaSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_replica_set_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_replica_set_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace scale of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Scale (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_replica_set_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_replica_set_status = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1ReplicaSet,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_replica_set_status, "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace status of the specified ReplicaSet

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1ReplicaSet (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1ReplicaSet, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_replica_set_status(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1ReplicaSet; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replica_set_status(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1Scale,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale, "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace scale of the specified ReplicationControllerDummy

Params:
- name::String (required)
- namespace::String (required)
- body::IoK8sApiExtensionsV1beta1Scale (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1Scale, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String, body::IoK8sApiExtensionsV1beta1Scale; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale(_api, name, namespace, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_replace_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("201", "x"=>".") * "\$") => IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_replace_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_replace_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/podsecuritypolicies/{name}", ["BearerToken", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "dryRun", dry_run)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldManager", field_manager)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""replace the specified PodSecurityPolicy

Params:
- name::String (required)
- body::IoK8sApiExtensionsV1beta1PodSecurityPolicy (required)
- pretty::String
- dry_run::String
- field_manager::String

Return: IoK8sApiExtensionsV1beta1PodSecurityPolicy, OpenAPI.Clients.ApiResponse
"""
function replace_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_pod_security_policy(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function replace_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, body::IoK8sApiExtensionsV1beta1PodSecurityPolicy; pretty=nothing, dry_run=nothing, field_manager=nothing, _mediaType=nothing)
    _ctx = _oacinternal_replace_extensions_v1beta1_pod_security_policy(_api, name, body; pretty=pretty, dry_run=dry_run, field_manager=field_manager, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_daemon_set_list_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_daemon_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_daemon_set_list_for_all_namespaces, "/apis/extensions/v1beta1/watch/daemonsets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_daemon_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_daemon_set_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_daemon_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_daemon_set_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_deployment_list_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_deployment_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_deployment_list_for_all_namespaces, "/apis/extensions/v1beta1/watch/deployments", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_deployment_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_deployment_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_deployment_list_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_deployment_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_ingress_list_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_ingress_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_ingress_list_for_all_namespaces, "/apis/extensions/v1beta1/watch/ingresses", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_ingress_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_ingress_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_ingress_list_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_ingress_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_daemon_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_daemon_set, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_daemon_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_daemon_set_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_daemon_set_list, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_daemon_set_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_daemon_set_list(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_daemon_set_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_deployment = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_deployment, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_deployment(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_deployment(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_deployment(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_deployment_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_deployment_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_deployment_list, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_deployment_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_deployment_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_deployment_list(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_deployment_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_ingress = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_ingress, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_ingress(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_ingress(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_ingress(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_ingress_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_ingress_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_ingress_list, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_ingress_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_ingress_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_ingress_list(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_ingress_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_network_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_network_policy, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_network_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_network_policy(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_network_policy_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_network_policy_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_network_policy_list, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_network_policy_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_network_policy_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_network_policy_list(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_network_policy_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_replica_set = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_replica_set, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_replica_set(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_replica_set(_api, name, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_namespaced_replica_set_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_namespaced_replica_set_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_namespaced_replica_set_list, "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "namespace", namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- namespace::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_namespaced_replica_set_list(_api::ExtensionsV1beta1Api, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_replica_set_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_namespaced_replica_set_list(_api::ExtensionsV1beta1Api, response_stream::Channel, namespace::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_namespaced_replica_set_list(_api, namespace; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_network_policy_list_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_network_policy_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_network_policy_list_for_all_namespaces, "/apis/extensions/v1beta1/watch/networkpolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_network_policy_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_network_policy_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_network_policy_list_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_network_policy_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_pod_security_policy = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_pod_security_policy, "/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch changes to an object of kind PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

Params:
- name::String (required)
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_pod_security_policy(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_pod_security_policy(_api::ExtensionsV1beta1Api, response_stream::Channel, name::String; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_pod_security_policy(_api, name; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_pod_security_policy_list = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_pod_security_policy_list(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_pod_security_policy_list, "/apis/extensions/v1beta1/watch/podsecuritypolicies", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_pod_security_policy_list(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_pod_security_policy_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_pod_security_policy_list(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_pod_security_policy_list(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_extensions_v1beta1_replica_set_list_for_all_namespaces = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IoK8sApimachineryPkgApisMetaV1WatchEvent,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_watch_extensions_v1beta1_replica_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_extensions_v1beta1_replica_set_list_for_all_namespaces, "/apis/extensions/v1beta1/watch/replicasets", ["BearerToken", ])
    OpenAPI.Clients.set_param(_ctx.query, "allowWatchBookmarks", allow_watch_bookmarks)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "continue", __continue__)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "fieldSelector", field_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "labelSelector", label_selector)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pretty", pretty)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "resourceVersion", resource_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timeoutSeconds", timeout_seconds)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "watch", watch)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.

Params:
- allow_watch_bookmarks::Bool
- __continue__::String
- field_selector::String
- label_selector::String
- limit::Int64
- pretty::String
- resource_version::String
- timeout_seconds::Int64
- watch::Bool

Return: IoK8sApimachineryPkgApisMetaV1WatchEvent, OpenAPI.Clients.ApiResponse
"""
function watch_extensions_v1beta1_replica_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_replica_set_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_extensions_v1beta1_replica_set_list_for_all_namespaces(_api::ExtensionsV1beta1Api, response_stream::Channel; allow_watch_bookmarks=nothing, __continue__=nothing, field_selector=nothing, label_selector=nothing, limit=nothing, pretty=nothing, resource_version=nothing, timeout_seconds=nothing, watch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_extensions_v1beta1_replica_set_list_for_all_namespaces(_api; allow_watch_bookmarks=allow_watch_bookmarks, __continue__=__continue__, field_selector=field_selector, label_selector=label_selector, limit=limit, pretty=pretty, resource_version=resource_version, timeout_seconds=timeout_seconds, watch=watch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_extensions_v1beta1_namespaced_daemon_set
export create_extensions_v1beta1_namespaced_deployment
export create_extensions_v1beta1_namespaced_deployment_rollback
export create_extensions_v1beta1_namespaced_ingress
export create_extensions_v1beta1_namespaced_network_policy
export create_extensions_v1beta1_namespaced_replica_set
export create_extensions_v1beta1_pod_security_policy
export delete_extensions_v1beta1_collection_namespaced_daemon_set
export delete_extensions_v1beta1_collection_namespaced_deployment
export delete_extensions_v1beta1_collection_namespaced_ingress
export delete_extensions_v1beta1_collection_namespaced_network_policy
export delete_extensions_v1beta1_collection_namespaced_replica_set
export delete_extensions_v1beta1_collection_pod_security_policy
export delete_extensions_v1beta1_namespaced_daemon_set
export delete_extensions_v1beta1_namespaced_deployment
export delete_extensions_v1beta1_namespaced_ingress
export delete_extensions_v1beta1_namespaced_network_policy
export delete_extensions_v1beta1_namespaced_replica_set
export delete_extensions_v1beta1_pod_security_policy
export get_extensions_v1beta1_a_p_i_resources
export list_extensions_v1beta1_daemon_set_for_all_namespaces
export list_extensions_v1beta1_deployment_for_all_namespaces
export list_extensions_v1beta1_ingress_for_all_namespaces
export list_extensions_v1beta1_namespaced_daemon_set
export list_extensions_v1beta1_namespaced_deployment
export list_extensions_v1beta1_namespaced_ingress
export list_extensions_v1beta1_namespaced_network_policy
export list_extensions_v1beta1_namespaced_replica_set
export list_extensions_v1beta1_network_policy_for_all_namespaces
export list_extensions_v1beta1_pod_security_policy
export list_extensions_v1beta1_replica_set_for_all_namespaces
export patch_extensions_v1beta1_namespaced_daemon_set
export patch_extensions_v1beta1_namespaced_daemon_set_status
export patch_extensions_v1beta1_namespaced_deployment
export patch_extensions_v1beta1_namespaced_deployment_scale
export patch_extensions_v1beta1_namespaced_deployment_status
export patch_extensions_v1beta1_namespaced_ingress
export patch_extensions_v1beta1_namespaced_ingress_status
export patch_extensions_v1beta1_namespaced_network_policy
export patch_extensions_v1beta1_namespaced_replica_set
export patch_extensions_v1beta1_namespaced_replica_set_scale
export patch_extensions_v1beta1_namespaced_replica_set_status
export patch_extensions_v1beta1_namespaced_replication_controller_dummy_scale
export patch_extensions_v1beta1_pod_security_policy
export read_extensions_v1beta1_namespaced_daemon_set
export read_extensions_v1beta1_namespaced_daemon_set_status
export read_extensions_v1beta1_namespaced_deployment
export read_extensions_v1beta1_namespaced_deployment_scale
export read_extensions_v1beta1_namespaced_deployment_status
export read_extensions_v1beta1_namespaced_ingress
export read_extensions_v1beta1_namespaced_ingress_status
export read_extensions_v1beta1_namespaced_network_policy
export read_extensions_v1beta1_namespaced_replica_set
export read_extensions_v1beta1_namespaced_replica_set_scale
export read_extensions_v1beta1_namespaced_replica_set_status
export read_extensions_v1beta1_namespaced_replication_controller_dummy_scale
export read_extensions_v1beta1_pod_security_policy
export replace_extensions_v1beta1_namespaced_daemon_set
export replace_extensions_v1beta1_namespaced_daemon_set_status
export replace_extensions_v1beta1_namespaced_deployment
export replace_extensions_v1beta1_namespaced_deployment_scale
export replace_extensions_v1beta1_namespaced_deployment_status
export replace_extensions_v1beta1_namespaced_ingress
export replace_extensions_v1beta1_namespaced_ingress_status
export replace_extensions_v1beta1_namespaced_network_policy
export replace_extensions_v1beta1_namespaced_replica_set
export replace_extensions_v1beta1_namespaced_replica_set_scale
export replace_extensions_v1beta1_namespaced_replica_set_status
export replace_extensions_v1beta1_namespaced_replication_controller_dummy_scale
export replace_extensions_v1beta1_pod_security_policy
export watch_extensions_v1beta1_daemon_set_list_for_all_namespaces
export watch_extensions_v1beta1_deployment_list_for_all_namespaces
export watch_extensions_v1beta1_ingress_list_for_all_namespaces
export watch_extensions_v1beta1_namespaced_daemon_set
export watch_extensions_v1beta1_namespaced_daemon_set_list
export watch_extensions_v1beta1_namespaced_deployment
export watch_extensions_v1beta1_namespaced_deployment_list
export watch_extensions_v1beta1_namespaced_ingress
export watch_extensions_v1beta1_namespaced_ingress_list
export watch_extensions_v1beta1_namespaced_network_policy
export watch_extensions_v1beta1_namespaced_network_policy_list
export watch_extensions_v1beta1_namespaced_replica_set
export watch_extensions_v1beta1_namespaced_replica_set_list
export watch_extensions_v1beta1_network_policy_list_for_all_namespaces
export watch_extensions_v1beta1_pod_security_policy
export watch_extensions_v1beta1_pod_security_policy_list
export watch_extensions_v1beta1_replica_set_list_for_all_namespaces
