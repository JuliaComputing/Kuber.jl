# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ContainerStatus contains details for the current status of this container.

    IoK8sApiCoreV1ContainerStatus(;
        containerID=nothing,
        image=nothing,
        imageID=nothing,
        lastState=nothing,
        name=nothing,
        ready=nothing,
        restartCount=nothing,
        started=nothing,
        state=nothing,
    )

    - containerID::String : Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;.
    - image::String : The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
    - imageID::String : ImageID of the container&#39;s image.
    - lastState::IoK8sApiCoreV1ContainerState : Details about the container&#39;s last termination condition.
    - name::String : This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    - ready::Bool : Specifies whether the container has passed its readiness probe.
    - restartCount::Int32 : The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    - started::Bool : Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
    - state::IoK8sApiCoreV1ContainerState : Details about the container&#39;s current condition.
"""
mutable struct IoK8sApiCoreV1ContainerStatus <: SwaggerModel
    containerID::Any # spec type: Union{ Nothing, String } # spec name: containerID
    image::Any # spec type: Union{ Nothing, String } # spec name: image
    imageID::Any # spec type: Union{ Nothing, String } # spec name: imageID
    lastState::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ContainerState } # spec name: lastState
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    ready::Any # spec type: Union{ Nothing, Bool } # spec name: ready
    restartCount::Any # spec type: Union{ Nothing, Int32 } # spec name: restartCount
    started::Any # spec type: Union{ Nothing, Bool } # spec name: started
    state::Any # spec type: Union{ Nothing, IoK8sApiCoreV1ContainerState } # spec name: state

    function IoK8sApiCoreV1ContainerStatus(;containerID=nothing, image=nothing, imageID=nothing, lastState=nothing, name=nothing, ready=nothing, restartCount=nothing, started=nothing, state=nothing)
        o = new()
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("containerID"), containerID)
        setfield!(o, Symbol("containerID"), containerID)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("image"), image)
        setfield!(o, Symbol("image"), image)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("imageID"), imageID)
        setfield!(o, Symbol("imageID"), imageID)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("lastState"), lastState)
        setfield!(o, Symbol("lastState"), lastState)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("ready"), ready)
        setfield!(o, Symbol("ready"), ready)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("restartCount"), restartCount)
        setfield!(o, Symbol("restartCount"), restartCount)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("started"), started)
        setfield!(o, Symbol("started"), started)
        validate_property(IoK8sApiCoreV1ContainerStatus, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        o
    end
end # type IoK8sApiCoreV1ContainerStatus

const _property_map_IoK8sApiCoreV1ContainerStatus = Dict{Symbol,Symbol}(Symbol("containerID")=>Symbol("containerID"), Symbol("image")=>Symbol("image"), Symbol("imageID")=>Symbol("imageID"), Symbol("lastState")=>Symbol("lastState"), Symbol("name")=>Symbol("name"), Symbol("ready")=>Symbol("ready"), Symbol("restartCount")=>Symbol("restartCount"), Symbol("started")=>Symbol("started"), Symbol("state")=>Symbol("state"))
const _property_types_IoK8sApiCoreV1ContainerStatus = Dict{Symbol,String}(Symbol("containerID")=>"String", Symbol("image")=>"String", Symbol("imageID")=>"String", Symbol("lastState")=>"IoK8sApiCoreV1ContainerState", Symbol("name")=>"String", Symbol("ready")=>"Bool", Symbol("restartCount")=>"Int32", Symbol("started")=>"Bool", Symbol("state")=>"IoK8sApiCoreV1ContainerState")
Base.propertynames(::Type{ IoK8sApiCoreV1ContainerStatus }) = collect(keys(_property_map_IoK8sApiCoreV1ContainerStatus))
Swagger.property_type(::Type{ IoK8sApiCoreV1ContainerStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCoreV1ContainerStatus[name]))}
Swagger.field_name(::Type{ IoK8sApiCoreV1ContainerStatus }, property_name::Symbol) =  _property_map_IoK8sApiCoreV1ContainerStatus[property_name]

function check_required(o::IoK8sApiCoreV1ContainerStatus)
    (getproperty(o, Symbol("image")) === nothing) && (return false)
    (getproperty(o, Symbol("imageID")) === nothing) && (return false)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    (getproperty(o, Symbol("ready")) === nothing) && (return false)
    (getproperty(o, Symbol("restartCount")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCoreV1ContainerStatus }, name::Symbol, val)
end
